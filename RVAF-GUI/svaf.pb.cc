#include "stdafx.h"
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: svaf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "svaf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace svaf {

namespace {

const ::google::protobuf::Descriptor* SvafTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SvafTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageOperationParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageOperationParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuperPixelSegmentParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuperPixelSegmentParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageResizeParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageResizeParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageCropParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageCropParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* StereoOperationParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StereoOperationParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* StereoRectifyParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StereoRectifyParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinocularPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinocularPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImagePairParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImagePairParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoPairParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoPairParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraPairParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraPairParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DSPCameraDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DSPCameraDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DSPCameraPairParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DSPCameraPairParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* KinectDataParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KinectDataParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageFolderParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageFolderParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImagePairFolderParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImagePairFolderParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecognizeParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecognizeParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ROIExtention_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ROIExtention_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdaboostParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdaboostParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitRectParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitRectParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* MilTrackParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MilTrackParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MilTrackParameter_InitType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MilTrackParameter_TrackType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FeaturePointParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeaturePointParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SIFTPointParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SIFTPointParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SURFPointParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SURFPointParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* STARPointParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  STARPointParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BRISKPointParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BRISKPointParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* FASTPointParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FASTPointParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ORBPointParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ORBPointParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* KAZEPointParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KAZEPointParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* HarrisPointParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HarrisPointParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* FastParamCP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FastParamCP_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FastParamCP_FastType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MSERParamCP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSERParamCP_reflection_ = NULL;
const ::google::protobuf::Descriptor* ORBParamCP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ORBParamCP_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ORBParamCP_OBRScoreType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BriskParamCP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BriskParamCP_reflection_ = NULL;
const ::google::protobuf::Descriptor* FreakParamCP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FreakParamCP_reflection_ = NULL;
const ::google::protobuf::Descriptor* StarParamCP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StarParamCP_reflection_ = NULL;
const ::google::protobuf::Descriptor* SiftParamCP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SiftParamCP_reflection_ = NULL;
const ::google::protobuf::Descriptor* SurfParamCP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SurfParamCP_reflection_ = NULL;
const ::google::protobuf::Descriptor* GFTTParamCP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GFTTParamCP_reflection_ = NULL;
const ::google::protobuf::Descriptor* HarrisParamCP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HarrisParamCP_reflection_ = NULL;
const ::google::protobuf::Descriptor* DenseParamCP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DenseParamCP_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleBlobParamCP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleBlobParamCP_reflection_ = NULL;
const ::google::protobuf::Descriptor* AkazeParamCP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AkazeParamCP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CVPointParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CVPointParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CVPointParameter_PointType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FeatureDescriptorParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureDescriptorParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SIFTDescriptorParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SIFTDescriptorParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SURFDescriptorParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SURFDescriptorParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* STARDescriptorParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  STARDescriptorParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BRIEFDescriptorParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BRIEFDescriptorParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BRISKDescriptorParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BRISKDescriptorParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* FASTDescriptorParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FASTDescriptorParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ORBDescriptorParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ORBDescriptorParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* KAZEDescriptorParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KAZEDescriptorParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BriefDespCV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BriefDespCV_reflection_ = NULL;
const ::google::protobuf::Descriptor* CVDescriptorParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CVDescriptorParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CVDescriptorParameter_DespType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* VectorMatchParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VectorMatchParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* KDTreeMatchParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KDTreeMatchParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* EularMatchParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EularMatchParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* RansacParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RansacParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BruteForceMatchParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BruteForceMatchParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* FLANNMatchParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FLANNMatchParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ECMatchParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ECMatchParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CVMatchParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CVMatchParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CVMatchParameter_MatchType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StereoMatchParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StereoMatchParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SGMMatchParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SGMMatchParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* EADPMatchParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EADPMatchParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* OutputParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OutputParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* TriangularParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TriangularParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatrixMulParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatrixMulParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* PositionEstimateParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PositionEstimateParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterPointParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterPointParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CoordiParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoordiParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SACIAParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SACIAParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* SACIAEstimateParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SACIAEstimateParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* ICPParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ICPParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* IAICPEstimateParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IAICPEstimateParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* NDTParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NDTParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* IANDTEstimateParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IANDTEstimateParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* LayerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayerParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LayerParameter_LayerType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_svaf_2eproto() {
  protobuf_AddDesc_svaf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "svaf.proto");
  GOOGLE_CHECK(file != NULL);
  SvafTask_descriptor_ = file->message_type(0);
  static const int SvafTask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvafTask, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvafTask, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvafTask, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvafTask, pause_),
  };
  SvafTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SvafTask_descriptor_,
      SvafTask::default_instance_,
      SvafTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvafTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SvafTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SvafTask));
  ImageOperationParameter_descriptor_ = file->message_type(1);
  static const int ImageOperationParameter_offsets_[1] = {
  };
  ImageOperationParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageOperationParameter_descriptor_,
      ImageOperationParameter::default_instance_,
      ImageOperationParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageOperationParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageOperationParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageOperationParameter));
  SuperPixelSegmentParameter_descriptor_ = file->message_type(2);
  static const int SuperPixelSegmentParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperPixelSegmentParameter, k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperPixelSegmentParameter, m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperPixelSegmentParameter, optint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperPixelSegmentParameter, saveseg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperPixelSegmentParameter, segname_),
  };
  SuperPixelSegmentParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuperPixelSegmentParameter_descriptor_,
      SuperPixelSegmentParameter::default_instance_,
      SuperPixelSegmentParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperPixelSegmentParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperPixelSegmentParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuperPixelSegmentParameter));
  ImageResizeParameter_descriptor_ = file->message_type(3);
  static const int ImageResizeParameter_offsets_[1] = {
  };
  ImageResizeParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageResizeParameter_descriptor_,
      ImageResizeParameter::default_instance_,
      ImageResizeParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageResizeParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageResizeParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageResizeParameter));
  ImageCropParameter_descriptor_ = file->message_type(4);
  static const int ImageCropParameter_offsets_[1] = {
  };
  ImageCropParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageCropParameter_descriptor_,
      ImageCropParameter::default_instance_,
      ImageCropParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCropParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageCropParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageCropParameter));
  StereoOperationParameter_descriptor_ = file->message_type(5);
  static const int StereoOperationParameter_offsets_[1] = {
  };
  StereoOperationParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StereoOperationParameter_descriptor_,
      StereoOperationParameter::default_instance_,
      StereoOperationParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StereoOperationParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StereoOperationParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StereoOperationParameter));
  StereoRectifyParameter_descriptor_ = file->message_type(6);
  static const int StereoRectifyParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StereoRectifyParameter, filename_),
  };
  StereoRectifyParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StereoRectifyParameter_descriptor_,
      StereoRectifyParameter::default_instance_,
      StereoRectifyParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StereoRectifyParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StereoRectifyParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StereoRectifyParameter));
  DataParameter_descriptor_ = file->message_type(7);
  static const int DataParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, color_),
  };
  DataParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataParameter_descriptor_,
      DataParameter::default_instance_,
      DataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataParameter));
  ImageDataParameter_descriptor_ = file->message_type(8);
  static const int ImageDataParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, name_),
  };
  ImageDataParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageDataParameter_descriptor_,
      ImageDataParameter::default_instance_,
      ImageDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageDataParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageDataParameter));
  BinocularPair_descriptor_ = file->message_type(9);
  static const int BinocularPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinocularPair, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinocularPair, right_),
  };
  BinocularPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinocularPair_descriptor_,
      BinocularPair::default_instance_,
      BinocularPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinocularPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinocularPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinocularPair));
  ImagePairParameter_descriptor_ = file->message_type(10);
  static const int ImagePairParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagePairParameter, pair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagePairParameter, _pair_),
  };
  ImagePairParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImagePairParameter_descriptor_,
      ImagePairParameter::default_instance_,
      ImagePairParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagePairParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagePairParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImagePairParameter));
  VideoDataParameter_descriptor_ = file->message_type(11);
  static const int VideoDataParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoDataParameter, name_),
  };
  VideoDataParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoDataParameter_descriptor_,
      VideoDataParameter::default_instance_,
      VideoDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoDataParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoDataParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoDataParameter));
  VideoPairParameter_descriptor_ = file->message_type(12);
  static const int VideoPairParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPairParameter, pair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPairParameter, _pair_),
  };
  VideoPairParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoPairParameter_descriptor_,
      VideoPairParameter::default_instance_,
      VideoPairParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPairParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoPairParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoPairParameter));
  CameraDataParameter_descriptor_ = file->message_type(13);
  static const int CameraDataParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraDataParameter, camere_),
  };
  CameraDataParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraDataParameter_descriptor_,
      CameraDataParameter::default_instance_,
      CameraDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraDataParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraDataParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraDataParameter));
  CameraPairParameter_descriptor_ = file->message_type(14);
  static const int CameraPairParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraPairParameter, leftcamera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraPairParameter, rightcamera_),
  };
  CameraPairParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraPairParameter_descriptor_,
      CameraPairParameter::default_instance_,
      CameraPairParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraPairParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraPairParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraPairParameter));
  DSPCameraDataParameter_descriptor_ = file->message_type(15);
  static const int DSPCameraDataParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSPCameraDataParameter, chns_),
  };
  DSPCameraDataParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DSPCameraDataParameter_descriptor_,
      DSPCameraDataParameter::default_instance_,
      DSPCameraDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSPCameraDataParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSPCameraDataParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DSPCameraDataParameter));
  DSPCameraPairParameter_descriptor_ = file->message_type(16);
  static const int DSPCameraPairParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSPCameraPairParameter, chns_),
  };
  DSPCameraPairParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DSPCameraPairParameter_descriptor_,
      DSPCameraPairParameter::default_instance_,
      DSPCameraPairParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSPCameraPairParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSPCameraPairParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DSPCameraPairParameter));
  KinectDataParameter_descriptor_ = file->message_type(17);
  static const int KinectDataParameter_offsets_[1] = {
  };
  KinectDataParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KinectDataParameter_descriptor_,
      KinectDataParameter::default_instance_,
      KinectDataParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KinectDataParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KinectDataParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KinectDataParameter));
  ImageFolderParameter_descriptor_ = file->message_type(18);
  static const int ImageFolderParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFolderParameter, name_),
  };
  ImageFolderParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImageFolderParameter_descriptor_,
      ImageFolderParameter::default_instance_,
      ImageFolderParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFolderParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageFolderParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImageFolderParameter));
  ImagePairFolderParameter_descriptor_ = file->message_type(19);
  static const int ImagePairFolderParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagePairFolderParameter, pair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagePairFolderParameter, _pair_),
  };
  ImagePairFolderParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ImagePairFolderParameter_descriptor_,
      ImagePairFolderParameter::default_instance_,
      ImagePairFolderParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagePairFolderParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImagePairFolderParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ImagePairFolderParameter));
  RecognizeParameter_descriptor_ = file->message_type(20);
  static const int RecognizeParameter_offsets_[1] = {
  };
  RecognizeParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecognizeParameter_descriptor_,
      RecognizeParameter::default_instance_,
      RecognizeParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecognizeParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecognizeParameter));
  ROIExtention_descriptor_ = file->message_type(21);
  static const int ROIExtention_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIExtention, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIExtention, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIExtention, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIExtention, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIExtention, xshift_),
  };
  ROIExtention_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ROIExtention_descriptor_,
      ROIExtention::default_instance_,
      ROIExtention_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIExtention, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROIExtention, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ROIExtention));
  AdaboostParameter_descriptor_ = file->message_type(22);
  static const int AdaboostParameter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaboostParameter, detector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaboostParameter, sync_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaboostParameter, sync_video_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaboostParameter, sync_epipolar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaboostParameter, thresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaboostParameter, nms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaboostParameter, pad_rect_),
  };
  AdaboostParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdaboostParameter_descriptor_,
      AdaboostParameter::default_instance_,
      AdaboostParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaboostParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdaboostParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdaboostParameter));
  TrackParameter_descriptor_ = file->message_type(23);
  static const int TrackParameter_offsets_[1] = {
  };
  TrackParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackParameter_descriptor_,
      TrackParameter::default_instance_,
      TrackParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackParameter));
  InitRectParameter_descriptor_ = file->message_type(24);
  static const int InitRectParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRectParameter, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRectParameter, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRectParameter, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRectParameter, height_),
  };
  InitRectParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitRectParameter_descriptor_,
      InitRectParameter::default_instance_,
      InitRectParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRectParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRectParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitRectParameter));
  MilTrackParameter_descriptor_ = file->message_type(25);
  static const int MilTrackParameter_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, init_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, track_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, track_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, init_rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, tr_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, tr_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, scalefactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, init_negnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, negnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, posmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, srchwinsz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, negsample_strat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, numfeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, numsel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, lrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, posrad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, init_posrad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, haarmin_rectnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, haarmax_rectnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, uselogr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, tss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, mixfeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, showprob_),
  };
  MilTrackParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MilTrackParameter_descriptor_,
      MilTrackParameter::default_instance_,
      MilTrackParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MilTrackParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MilTrackParameter));
  MilTrackParameter_InitType_descriptor_ = MilTrackParameter_descriptor_->enum_type(0);
  MilTrackParameter_TrackType_descriptor_ = MilTrackParameter_descriptor_->enum_type(1);
  FeaturePointParameter_descriptor_ = file->message_type(26);
  static const int FeaturePointParameter_offsets_[1] = {
  };
  FeaturePointParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeaturePointParameter_descriptor_,
      FeaturePointParameter::default_instance_,
      FeaturePointParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturePointParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeaturePointParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeaturePointParameter));
  SIFTPointParameter_descriptor_ = file->message_type(27);
  static const int SIFTPointParameter_offsets_[1] = {
  };
  SIFTPointParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SIFTPointParameter_descriptor_,
      SIFTPointParameter::default_instance_,
      SIFTPointParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIFTPointParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIFTPointParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SIFTPointParameter));
  SURFPointParameter_descriptor_ = file->message_type(28);
  static const int SURFPointParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SURFPointParameter, stride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SURFPointParameter, octaves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SURFPointParameter, intervals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SURFPointParameter, thresh_),
  };
  SURFPointParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SURFPointParameter_descriptor_,
      SURFPointParameter::default_instance_,
      SURFPointParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SURFPointParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SURFPointParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SURFPointParameter));
  STARPointParameter_descriptor_ = file->message_type(29);
  static const int STARPointParameter_offsets_[1] = {
  };
  STARPointParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      STARPointParameter_descriptor_,
      STARPointParameter::default_instance_,
      STARPointParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STARPointParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STARPointParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(STARPointParameter));
  BRISKPointParameter_descriptor_ = file->message_type(30);
  static const int BRISKPointParameter_offsets_[1] = {
  };
  BRISKPointParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BRISKPointParameter_descriptor_,
      BRISKPointParameter::default_instance_,
      BRISKPointParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BRISKPointParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BRISKPointParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BRISKPointParameter));
  FASTPointParameter_descriptor_ = file->message_type(31);
  static const int FASTPointParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FASTPointParameter, thresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FASTPointParameter, nms_),
  };
  FASTPointParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FASTPointParameter_descriptor_,
      FASTPointParameter::default_instance_,
      FASTPointParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FASTPointParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FASTPointParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FASTPointParameter));
  ORBPointParameter_descriptor_ = file->message_type(32);
  static const int ORBPointParameter_offsets_[1] = {
  };
  ORBPointParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ORBPointParameter_descriptor_,
      ORBPointParameter::default_instance_,
      ORBPointParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORBPointParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORBPointParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ORBPointParameter));
  KAZEPointParameter_descriptor_ = file->message_type(33);
  static const int KAZEPointParameter_offsets_[1] = {
  };
  KAZEPointParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KAZEPointParameter_descriptor_,
      KAZEPointParameter::default_instance_,
      KAZEPointParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KAZEPointParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KAZEPointParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KAZEPointParameter));
  HarrisPointParameter_descriptor_ = file->message_type(34);
  static const int HarrisPointParameter_offsets_[1] = {
  };
  HarrisPointParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HarrisPointParameter_descriptor_,
      HarrisPointParameter::default_instance_,
      HarrisPointParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarrisPointParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarrisPointParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HarrisPointParameter));
  FastParamCP_descriptor_ = file->message_type(35);
  static const int FastParamCP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastParamCP, thresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastParamCP, isnms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastParamCP, ftype_),
  };
  FastParamCP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FastParamCP_descriptor_,
      FastParamCP::default_instance_,
      FastParamCP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastParamCP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FastParamCP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FastParamCP));
  FastParamCP_FastType_descriptor_ = FastParamCP_descriptor_->enum_type(0);
  MSERParamCP_descriptor_ = file->message_type(36);
  static const int MSERParamCP_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSERParamCP, delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSERParamCP, min_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSERParamCP, max_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSERParamCP, max_varia_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSERParamCP, min_divers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSERParamCP, max_evolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSERParamCP, area_thresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSERParamCP, min_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSERParamCP, edgeblur_size_),
  };
  MSERParamCP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSERParamCP_descriptor_,
      MSERParamCP::default_instance_,
      MSERParamCP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSERParamCP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSERParamCP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSERParamCP));
  ORBParamCP_descriptor_ = file->message_type(37);
  static const int ORBParamCP_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORBParamCP, nfeatures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORBParamCP, scalefactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORBParamCP, nlevels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORBParamCP, edgethresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORBParamCP, firstlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORBParamCP, wta_k_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORBParamCP, scoretype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORBParamCP, patchsize_),
  };
  ORBParamCP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ORBParamCP_descriptor_,
      ORBParamCP::default_instance_,
      ORBParamCP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORBParamCP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORBParamCP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ORBParamCP));
  ORBParamCP_OBRScoreType_descriptor_ = ORBParamCP_descriptor_->enum_type(0);
  BriskParamCP_descriptor_ = file->message_type(38);
  static const int BriskParamCP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriskParamCP, thresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriskParamCP, octaves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriskParamCP, ptscale_),
  };
  BriskParamCP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BriskParamCP_descriptor_,
      BriskParamCP::default_instance_,
      BriskParamCP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriskParamCP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriskParamCP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BriskParamCP));
  FreakParamCP_descriptor_ = file->message_type(39);
  static const int FreakParamCP_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreakParamCP, orientnorm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreakParamCP, scalenorm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreakParamCP, ptscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreakParamCP, octaves_),
  };
  FreakParamCP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FreakParamCP_descriptor_,
      FreakParamCP::default_instance_,
      FreakParamCP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreakParamCP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FreakParamCP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FreakParamCP));
  StarParamCP_descriptor_ = file->message_type(40);
  static const int StarParamCP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarParamCP, maxsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarParamCP, response_thresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarParamCP, projected_thresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarParamCP, binarized_thresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarParamCP, nms_size_),
  };
  StarParamCP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StarParamCP_descriptor_,
      StarParamCP::default_instance_,
      StarParamCP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarParamCP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarParamCP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StarParamCP));
  SiftParamCP_descriptor_ = file->message_type(41);
  static const int SiftParamCP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiftParamCP, nfeatures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiftParamCP, octaves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiftParamCP, contrast_thresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiftParamCP, edge_thresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiftParamCP, sigma_),
  };
  SiftParamCP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SiftParamCP_descriptor_,
      SiftParamCP::default_instance_,
      SiftParamCP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiftParamCP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SiftParamCP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SiftParamCP));
  SurfParamCP_descriptor_ = file->message_type(42);
  static const int SurfParamCP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfParamCP, hassian_thresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfParamCP, octaves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfParamCP, intevals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfParamCP, extended_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfParamCP, upright_),
  };
  SurfParamCP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SurfParamCP_descriptor_,
      SurfParamCP::default_instance_,
      SurfParamCP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfParamCP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SurfParamCP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SurfParamCP));
  GFTTParamCP_descriptor_ = file->message_type(43);
  static const int GFTTParamCP_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GFTTParamCP, maxcornners_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GFTTParamCP, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GFTTParamCP, mindist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GFTTParamCP, blocksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GFTTParamCP, useharris_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GFTTParamCP, k_),
  };
  GFTTParamCP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GFTTParamCP_descriptor_,
      GFTTParamCP::default_instance_,
      GFTTParamCP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GFTTParamCP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GFTTParamCP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GFTTParamCP));
  HarrisParamCP_descriptor_ = file->message_type(44);
  static const int HarrisParamCP_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarrisParamCP, maxcornners_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarrisParamCP, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarrisParamCP, mindist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarrisParamCP, blocksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarrisParamCP, k_),
  };
  HarrisParamCP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HarrisParamCP_descriptor_,
      HarrisParamCP::default_instance_,
      HarrisParamCP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarrisParamCP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarrisParamCP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HarrisParamCP));
  DenseParamCP_descriptor_ = file->message_type(45);
  static const int DenseParamCP_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseParamCP, initfeatscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseParamCP, featscalelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseParamCP, featscalemul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseParamCP, initxystep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseParamCP, initbound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseParamCP, varyxyscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseParamCP, varybdscale_),
  };
  DenseParamCP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DenseParamCP_descriptor_,
      DenseParamCP::default_instance_,
      DenseParamCP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseParamCP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseParamCP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DenseParamCP));
  SimpleBlobParamCP_descriptor_ = file->message_type(46);
  static const int SimpleBlobParamCP_offsets_[1] = {
  };
  SimpleBlobParamCP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimpleBlobParamCP_descriptor_,
      SimpleBlobParamCP::default_instance_,
      SimpleBlobParamCP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleBlobParamCP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleBlobParamCP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimpleBlobParamCP));
  AkazeParamCP_descriptor_ = file->message_type(47);
  static const int AkazeParamCP_offsets_[1] = {
  };
  AkazeParamCP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AkazeParamCP_descriptor_,
      AkazeParamCP::default_instance_,
      AkazeParamCP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AkazeParamCP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AkazeParamCP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AkazeParamCP));
  CVPointParameter_descriptor_ = file->message_type(48);
  static const int CVPointParameter_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVPointParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVPointParameter, isadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVPointParameter, fast_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVPointParameter, mser_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVPointParameter, orb_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVPointParameter, brisk_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVPointParameter, freak_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVPointParameter, star_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVPointParameter, sift_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVPointParameter, surf_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVPointParameter, gftt_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVPointParameter, harris_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVPointParameter, dense_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVPointParameter, sb_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVPointParameter, akaze_param_),
  };
  CVPointParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CVPointParameter_descriptor_,
      CVPointParameter::default_instance_,
      CVPointParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVPointParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVPointParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CVPointParameter));
  CVPointParameter_PointType_descriptor_ = CVPointParameter_descriptor_->enum_type(0);
  FeatureDescriptorParameter_descriptor_ = file->message_type(49);
  static const int FeatureDescriptorParameter_offsets_[1] = {
  };
  FeatureDescriptorParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeatureDescriptorParameter_descriptor_,
      FeatureDescriptorParameter::default_instance_,
      FeatureDescriptorParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureDescriptorParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureDescriptorParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeatureDescriptorParameter));
  SIFTDescriptorParameter_descriptor_ = file->message_type(50);
  static const int SIFTDescriptorParameter_offsets_[1] = {
  };
  SIFTDescriptorParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SIFTDescriptorParameter_descriptor_,
      SIFTDescriptorParameter::default_instance_,
      SIFTDescriptorParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIFTDescriptorParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SIFTDescriptorParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SIFTDescriptorParameter));
  SURFDescriptorParameter_descriptor_ = file->message_type(51);
  static const int SURFDescriptorParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SURFDescriptorParameter, upright_),
  };
  SURFDescriptorParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SURFDescriptorParameter_descriptor_,
      SURFDescriptorParameter::default_instance_,
      SURFDescriptorParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SURFDescriptorParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SURFDescriptorParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SURFDescriptorParameter));
  STARDescriptorParameter_descriptor_ = file->message_type(52);
  static const int STARDescriptorParameter_offsets_[1] = {
  };
  STARDescriptorParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      STARDescriptorParameter_descriptor_,
      STARDescriptorParameter::default_instance_,
      STARDescriptorParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STARDescriptorParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(STARDescriptorParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(STARDescriptorParameter));
  BRIEFDescriptorParameter_descriptor_ = file->message_type(53);
  static const int BRIEFDescriptorParameter_offsets_[1] = {
  };
  BRIEFDescriptorParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BRIEFDescriptorParameter_descriptor_,
      BRIEFDescriptorParameter::default_instance_,
      BRIEFDescriptorParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BRIEFDescriptorParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BRIEFDescriptorParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BRIEFDescriptorParameter));
  BRISKDescriptorParameter_descriptor_ = file->message_type(54);
  static const int BRISKDescriptorParameter_offsets_[1] = {
  };
  BRISKDescriptorParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BRISKDescriptorParameter_descriptor_,
      BRISKDescriptorParameter::default_instance_,
      BRISKDescriptorParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BRISKDescriptorParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BRISKDescriptorParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BRISKDescriptorParameter));
  FASTDescriptorParameter_descriptor_ = file->message_type(55);
  static const int FASTDescriptorParameter_offsets_[1] = {
  };
  FASTDescriptorParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FASTDescriptorParameter_descriptor_,
      FASTDescriptorParameter::default_instance_,
      FASTDescriptorParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FASTDescriptorParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FASTDescriptorParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FASTDescriptorParameter));
  ORBDescriptorParameter_descriptor_ = file->message_type(56);
  static const int ORBDescriptorParameter_offsets_[1] = {
  };
  ORBDescriptorParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ORBDescriptorParameter_descriptor_,
      ORBDescriptorParameter::default_instance_,
      ORBDescriptorParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORBDescriptorParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORBDescriptorParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ORBDescriptorParameter));
  KAZEDescriptorParameter_descriptor_ = file->message_type(57);
  static const int KAZEDescriptorParameter_offsets_[1] = {
  };
  KAZEDescriptorParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KAZEDescriptorParameter_descriptor_,
      KAZEDescriptorParameter::default_instance_,
      KAZEDescriptorParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KAZEDescriptorParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KAZEDescriptorParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KAZEDescriptorParameter));
  BriefDespCV_descriptor_ = file->message_type(58);
  static const int BriefDespCV_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefDespCV, length_),
  };
  BriefDespCV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BriefDespCV_descriptor_,
      BriefDespCV::default_instance_,
      BriefDespCV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefDespCV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BriefDespCV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BriefDespCV));
  CVDescriptorParameter_descriptor_ = file->message_type(59);
  static const int CVDescriptorParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVDescriptorParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVDescriptorParameter, brief_param_),
  };
  CVDescriptorParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CVDescriptorParameter_descriptor_,
      CVDescriptorParameter::default_instance_,
      CVDescriptorParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVDescriptorParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVDescriptorParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CVDescriptorParameter));
  CVDescriptorParameter_DespType_descriptor_ = CVDescriptorParameter_descriptor_->enum_type(0);
  VectorMatchParameter_descriptor_ = file->message_type(60);
  static const int VectorMatchParameter_offsets_[1] = {
  };
  VectorMatchParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VectorMatchParameter_descriptor_,
      VectorMatchParameter::default_instance_,
      VectorMatchParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorMatchParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VectorMatchParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VectorMatchParameter));
  KDTreeMatchParameter_descriptor_ = file->message_type(61);
  static const int KDTreeMatchParameter_offsets_[1] = {
  };
  KDTreeMatchParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KDTreeMatchParameter_descriptor_,
      KDTreeMatchParameter::default_instance_,
      KDTreeMatchParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDTreeMatchParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KDTreeMatchParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KDTreeMatchParameter));
  EularMatchParameter_descriptor_ = file->message_type(62);
  static const int EularMatchParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EularMatchParameter, thresh_),
  };
  EularMatchParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EularMatchParameter_descriptor_,
      EularMatchParameter::default_instance_,
      EularMatchParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EularMatchParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EularMatchParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EularMatchParameter));
  RansacParameter_descriptor_ = file->message_type(63);
  static const int RansacParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RansacParameter, thresh_),
  };
  RansacParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RansacParameter_descriptor_,
      RansacParameter::default_instance_,
      RansacParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RansacParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RansacParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RansacParameter));
  BruteForceMatchParameter_descriptor_ = file->message_type(64);
  static const int BruteForceMatchParameter_offsets_[1] = {
  };
  BruteForceMatchParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BruteForceMatchParameter_descriptor_,
      BruteForceMatchParameter::default_instance_,
      BruteForceMatchParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BruteForceMatchParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BruteForceMatchParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BruteForceMatchParameter));
  FLANNMatchParameter_descriptor_ = file->message_type(65);
  static const int FLANNMatchParameter_offsets_[1] = {
  };
  FLANNMatchParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FLANNMatchParameter_descriptor_,
      FLANNMatchParameter::default_instance_,
      FLANNMatchParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FLANNMatchParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FLANNMatchParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FLANNMatchParameter));
  ECMatchParameter_descriptor_ = file->message_type(66);
  static const int ECMatchParameter_offsets_[1] = {
  };
  ECMatchParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ECMatchParameter_descriptor_,
      ECMatchParameter::default_instance_,
      ECMatchParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECMatchParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECMatchParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ECMatchParameter));
  CVMatchParameter_descriptor_ = file->message_type(67);
  static const int CVMatchParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVMatchParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVMatchParameter, crosscheck_),
  };
  CVMatchParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CVMatchParameter_descriptor_,
      CVMatchParameter::default_instance_,
      CVMatchParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVMatchParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CVMatchParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CVMatchParameter));
  CVMatchParameter_MatchType_descriptor_ = CVMatchParameter_descriptor_->enum_type(0);
  StereoMatchParameter_descriptor_ = file->message_type(68);
  static const int StereoMatchParameter_offsets_[1] = {
  };
  StereoMatchParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StereoMatchParameter_descriptor_,
      StereoMatchParameter::default_instance_,
      StereoMatchParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StereoMatchParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StereoMatchParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StereoMatchParameter));
  SGMMatchParameter_descriptor_ = file->message_type(69);
  static const int SGMMatchParameter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGMMatchParameter, max_disp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGMMatchParameter, factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGMMatchParameter, dispmr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGMMatchParameter, r1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGMMatchParameter, r2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGMMatchParameter, prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGMMatchParameter, savetxt_),
  };
  SGMMatchParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SGMMatchParameter_descriptor_,
      SGMMatchParameter::default_instance_,
      SGMMatchParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGMMatchParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SGMMatchParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SGMMatchParameter));
  EADPMatchParameter_descriptor_ = file->message_type(70);
  static const int EADPMatchParameter_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EADPMatchParameter, max_disp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EADPMatchParameter, factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EADPMatchParameter, guidmr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EADPMatchParameter, dispmr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EADPMatchParameter, sg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EADPMatchParameter, sc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EADPMatchParameter, r1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EADPMatchParameter, r2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EADPMatchParameter, prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EADPMatchParameter, savetxt_),
  };
  EADPMatchParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EADPMatchParameter_descriptor_,
      EADPMatchParameter::default_instance_,
      EADPMatchParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EADPMatchParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EADPMatchParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EADPMatchParameter));
  OutputParameter_descriptor_ = file->message_type(71);
  static const int OutputParameter_offsets_[1] = {
  };
  OutputParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OutputParameter_descriptor_,
      OutputParameter::default_instance_,
      OutputParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OutputParameter));
  TriangularParameter_descriptor_ = file->message_type(72);
  static const int TriangularParameter_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriangularParameter, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriangularParameter, toolbox_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriangularParameter, calibmat_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriangularParameter, savepc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriangularParameter, pcname_),
  };
  TriangularParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TriangularParameter_descriptor_,
      TriangularParameter::default_instance_,
      TriangularParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriangularParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriangularParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TriangularParameter));
  MatrixMulParameter_descriptor_ = file->message_type(73);
  static const int MatrixMulParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixMulParameter, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixMulParameter, col0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixMulParameter, col1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixMulParameter, col2_),
  };
  MatrixMulParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatrixMulParameter_descriptor_,
      MatrixMulParameter::default_instance_,
      MatrixMulParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixMulParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatrixMulParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatrixMulParameter));
  PositionEstimateParameter_descriptor_ = file->message_type(74);
  static const int PositionEstimateParameter_offsets_[1] = {
  };
  PositionEstimateParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PositionEstimateParameter_descriptor_,
      PositionEstimateParameter::default_instance_,
      PositionEstimateParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionEstimateParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PositionEstimateParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PositionEstimateParameter));
  CenterPointParameter_descriptor_ = file->message_type(75);
  static const int CenterPointParameter_offsets_[1] = {
  };
  CenterPointParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterPointParameter_descriptor_,
      CenterPointParameter::default_instance_,
      CenterPointParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterPointParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterPointParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterPointParameter));
  CoordiParameter_descriptor_ = file->message_type(76);
  static const int CoordiParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordiParameter, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordiParameter, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordiParameter, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordiParameter, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordiParameter, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordiParameter, c_),
  };
  CoordiParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CoordiParameter_descriptor_,
      CoordiParameter::default_instance_,
      CoordiParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordiParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordiParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CoordiParameter));
  SACIAParameter_descriptor_ = file->message_type(77);
  static const int SACIAParameter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SACIAParameter, max_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SACIAParameter, min_cors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SACIAParameter, max_cors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SACIAParameter, voxel_grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SACIAParameter, norm_rad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SACIAParameter, feat_rad_),
  };
  SACIAParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SACIAParameter_descriptor_,
      SACIAParameter::default_instance_,
      SACIAParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SACIAParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SACIAParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SACIAParameter));
  SACIAEstimateParameter_descriptor_ = file->message_type(78);
  static const int SACIAEstimateParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SACIAEstimateParameter, pcd_filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SACIAEstimateParameter, ia_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SACIAEstimateParameter, coor_param_),
  };
  SACIAEstimateParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SACIAEstimateParameter_descriptor_,
      SACIAEstimateParameter::default_instance_,
      SACIAEstimateParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SACIAEstimateParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SACIAEstimateParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SACIAEstimateParameter));
  ICPParameter_descriptor_ = file->message_type(79);
  static const int ICPParameter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICPParameter, max_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICPParameter, max_resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICPParameter, esp_),
  };
  ICPParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ICPParameter_descriptor_,
      ICPParameter::default_instance_,
      ICPParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICPParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ICPParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ICPParameter));
  IAICPEstimateParameter_descriptor_ = file->message_type(80);
  static const int IAICPEstimateParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IAICPEstimateParameter, pcd_filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IAICPEstimateParameter, sacia_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IAICPEstimateParameter, icp_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IAICPEstimateParameter, coor_param_),
  };
  IAICPEstimateParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IAICPEstimateParameter_descriptor_,
      IAICPEstimateParameter::default_instance_,
      IAICPEstimateParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IAICPEstimateParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IAICPEstimateParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IAICPEstimateParameter));
  NDTParameter_descriptor_ = file->message_type(81);
  static const int NDTParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NDTParameter, max_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NDTParameter, step_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NDTParameter, resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NDTParameter, esp_),
  };
  NDTParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NDTParameter_descriptor_,
      NDTParameter::default_instance_,
      NDTParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NDTParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NDTParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NDTParameter));
  IANDTEstimateParameter_descriptor_ = file->message_type(82);
  static const int IANDTEstimateParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IANDTEstimateParameter, pcd_filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IANDTEstimateParameter, sacia_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IANDTEstimateParameter, ndt_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IANDTEstimateParameter, coor_param_),
  };
  IANDTEstimateParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IANDTEstimateParameter_descriptor_,
      IANDTEstimateParameter::default_instance_,
      IANDTEstimateParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IANDTEstimateParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IANDTEstimateParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IANDTEstimateParameter));
  LayerParameter_descriptor_ = file->message_type(83);
  static const int LayerParameter_offsets_[70] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, save_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, logt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, logi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, imageop_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, supix_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, resize_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, crop_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, stereoop_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, rectify_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, data_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, imagedata_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, imagepair_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, videodata_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, videopair_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, cameradata_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, camerapair_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, dspcameradata_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, dspcamerapair_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, kinectdata_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, folder_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, pairfolder_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, recognize_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, adaboost_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, track_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, miltrack_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bittrack_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, featurepoint_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, siftpoint_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, surfpoint_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, starpoint_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, briskpoint_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, fastpoint_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, orbpoint_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, kazepoint_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, harrispoint_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, cvpoint_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, featuredescriptor_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, siftdescriptor_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, surfdescriptor_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, stardescriptor_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, briefdescriptor_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, briskdescriptor_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, fastdescriptor_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, orbdescriptor_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, kazedescriptor_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, cvdescriptor_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, vectormatch_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, kdtreematch_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, eularmatch_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, ransac_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, bfmatch_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, flannmatch_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, ecmatch_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, cvmatch_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, stereomatch_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, sgm_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, eadp_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, output_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, triang_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, mxmul_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, posest_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, centerpoint_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, sacia_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, iaicp_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, iandt_param_),
  };
  LayerParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LayerParameter_descriptor_,
      LayerParameter::default_instance_,
      LayerParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayerParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LayerParameter));
  LayerParameter_LayerType_descriptor_ = LayerParameter_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_svaf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SvafTask_descriptor_, &SvafTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageOperationParameter_descriptor_, &ImageOperationParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuperPixelSegmentParameter_descriptor_, &SuperPixelSegmentParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageResizeParameter_descriptor_, &ImageResizeParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageCropParameter_descriptor_, &ImageCropParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StereoOperationParameter_descriptor_, &StereoOperationParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StereoRectifyParameter_descriptor_, &StereoRectifyParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataParameter_descriptor_, &DataParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageDataParameter_descriptor_, &ImageDataParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinocularPair_descriptor_, &BinocularPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImagePairParameter_descriptor_, &ImagePairParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoDataParameter_descriptor_, &VideoDataParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoPairParameter_descriptor_, &VideoPairParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraDataParameter_descriptor_, &CameraDataParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraPairParameter_descriptor_, &CameraPairParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DSPCameraDataParameter_descriptor_, &DSPCameraDataParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DSPCameraPairParameter_descriptor_, &DSPCameraPairParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KinectDataParameter_descriptor_, &KinectDataParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImageFolderParameter_descriptor_, &ImageFolderParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ImagePairFolderParameter_descriptor_, &ImagePairFolderParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecognizeParameter_descriptor_, &RecognizeParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ROIExtention_descriptor_, &ROIExtention::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdaboostParameter_descriptor_, &AdaboostParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackParameter_descriptor_, &TrackParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitRectParameter_descriptor_, &InitRectParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MilTrackParameter_descriptor_, &MilTrackParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeaturePointParameter_descriptor_, &FeaturePointParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SIFTPointParameter_descriptor_, &SIFTPointParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SURFPointParameter_descriptor_, &SURFPointParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    STARPointParameter_descriptor_, &STARPointParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BRISKPointParameter_descriptor_, &BRISKPointParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FASTPointParameter_descriptor_, &FASTPointParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ORBPointParameter_descriptor_, &ORBPointParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KAZEPointParameter_descriptor_, &KAZEPointParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HarrisPointParameter_descriptor_, &HarrisPointParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FastParamCP_descriptor_, &FastParamCP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSERParamCP_descriptor_, &MSERParamCP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ORBParamCP_descriptor_, &ORBParamCP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BriskParamCP_descriptor_, &BriskParamCP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FreakParamCP_descriptor_, &FreakParamCP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StarParamCP_descriptor_, &StarParamCP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SiftParamCP_descriptor_, &SiftParamCP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SurfParamCP_descriptor_, &SurfParamCP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GFTTParamCP_descriptor_, &GFTTParamCP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HarrisParamCP_descriptor_, &HarrisParamCP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DenseParamCP_descriptor_, &DenseParamCP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimpleBlobParamCP_descriptor_, &SimpleBlobParamCP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AkazeParamCP_descriptor_, &AkazeParamCP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CVPointParameter_descriptor_, &CVPointParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeatureDescriptorParameter_descriptor_, &FeatureDescriptorParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SIFTDescriptorParameter_descriptor_, &SIFTDescriptorParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SURFDescriptorParameter_descriptor_, &SURFDescriptorParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    STARDescriptorParameter_descriptor_, &STARDescriptorParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BRIEFDescriptorParameter_descriptor_, &BRIEFDescriptorParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BRISKDescriptorParameter_descriptor_, &BRISKDescriptorParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FASTDescriptorParameter_descriptor_, &FASTDescriptorParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ORBDescriptorParameter_descriptor_, &ORBDescriptorParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KAZEDescriptorParameter_descriptor_, &KAZEDescriptorParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BriefDespCV_descriptor_, &BriefDespCV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CVDescriptorParameter_descriptor_, &CVDescriptorParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VectorMatchParameter_descriptor_, &VectorMatchParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KDTreeMatchParameter_descriptor_, &KDTreeMatchParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EularMatchParameter_descriptor_, &EularMatchParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RansacParameter_descriptor_, &RansacParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BruteForceMatchParameter_descriptor_, &BruteForceMatchParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FLANNMatchParameter_descriptor_, &FLANNMatchParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ECMatchParameter_descriptor_, &ECMatchParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CVMatchParameter_descriptor_, &CVMatchParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StereoMatchParameter_descriptor_, &StereoMatchParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SGMMatchParameter_descriptor_, &SGMMatchParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EADPMatchParameter_descriptor_, &EADPMatchParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OutputParameter_descriptor_, &OutputParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TriangularParameter_descriptor_, &TriangularParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatrixMulParameter_descriptor_, &MatrixMulParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PositionEstimateParameter_descriptor_, &PositionEstimateParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterPointParameter_descriptor_, &CenterPointParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CoordiParameter_descriptor_, &CoordiParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SACIAParameter_descriptor_, &SACIAParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SACIAEstimateParameter_descriptor_, &SACIAEstimateParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ICPParameter_descriptor_, &ICPParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IAICPEstimateParameter_descriptor_, &IAICPEstimateParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NDTParameter_descriptor_, &NDTParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IANDTEstimateParameter_descriptor_, &IANDTEstimateParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LayerParameter_descriptor_, &LayerParameter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_svaf_2eproto() {
  delete SvafTask::default_instance_;
  delete SvafTask_reflection_;
  delete SvafTask::_default_name_;
  delete ImageOperationParameter::default_instance_;
  delete ImageOperationParameter_reflection_;
  delete SuperPixelSegmentParameter::default_instance_;
  delete SuperPixelSegmentParameter_reflection_;
  delete SuperPixelSegmentParameter::_default_segname_;
  delete ImageResizeParameter::default_instance_;
  delete ImageResizeParameter_reflection_;
  delete ImageCropParameter::default_instance_;
  delete ImageCropParameter_reflection_;
  delete StereoOperationParameter::default_instance_;
  delete StereoOperationParameter_reflection_;
  delete StereoRectifyParameter::default_instance_;
  delete StereoRectifyParameter_reflection_;
  delete DataParameter::default_instance_;
  delete DataParameter_reflection_;
  delete ImageDataParameter::default_instance_;
  delete ImageDataParameter_reflection_;
  delete BinocularPair::default_instance_;
  delete BinocularPair_reflection_;
  delete ImagePairParameter::default_instance_;
  delete ImagePairParameter_reflection_;
  delete VideoDataParameter::default_instance_;
  delete VideoDataParameter_reflection_;
  delete VideoPairParameter::default_instance_;
  delete VideoPairParameter_reflection_;
  delete CameraDataParameter::default_instance_;
  delete CameraDataParameter_reflection_;
  delete CameraPairParameter::default_instance_;
  delete CameraPairParameter_reflection_;
  delete DSPCameraDataParameter::default_instance_;
  delete DSPCameraDataParameter_reflection_;
  delete DSPCameraPairParameter::default_instance_;
  delete DSPCameraPairParameter_reflection_;
  delete KinectDataParameter::default_instance_;
  delete KinectDataParameter_reflection_;
  delete ImageFolderParameter::default_instance_;
  delete ImageFolderParameter_reflection_;
  delete ImagePairFolderParameter::default_instance_;
  delete ImagePairFolderParameter_reflection_;
  delete RecognizeParameter::default_instance_;
  delete RecognizeParameter_reflection_;
  delete ROIExtention::default_instance_;
  delete ROIExtention_reflection_;
  delete AdaboostParameter::default_instance_;
  delete AdaboostParameter_reflection_;
  delete TrackParameter::default_instance_;
  delete TrackParameter_reflection_;
  delete InitRectParameter::default_instance_;
  delete InitRectParameter_reflection_;
  delete MilTrackParameter::default_instance_;
  delete MilTrackParameter_reflection_;
  delete FeaturePointParameter::default_instance_;
  delete FeaturePointParameter_reflection_;
  delete SIFTPointParameter::default_instance_;
  delete SIFTPointParameter_reflection_;
  delete SURFPointParameter::default_instance_;
  delete SURFPointParameter_reflection_;
  delete STARPointParameter::default_instance_;
  delete STARPointParameter_reflection_;
  delete BRISKPointParameter::default_instance_;
  delete BRISKPointParameter_reflection_;
  delete FASTPointParameter::default_instance_;
  delete FASTPointParameter_reflection_;
  delete ORBPointParameter::default_instance_;
  delete ORBPointParameter_reflection_;
  delete KAZEPointParameter::default_instance_;
  delete KAZEPointParameter_reflection_;
  delete HarrisPointParameter::default_instance_;
  delete HarrisPointParameter_reflection_;
  delete FastParamCP::default_instance_;
  delete FastParamCP_reflection_;
  delete MSERParamCP::default_instance_;
  delete MSERParamCP_reflection_;
  delete ORBParamCP::default_instance_;
  delete ORBParamCP_reflection_;
  delete BriskParamCP::default_instance_;
  delete BriskParamCP_reflection_;
  delete FreakParamCP::default_instance_;
  delete FreakParamCP_reflection_;
  delete StarParamCP::default_instance_;
  delete StarParamCP_reflection_;
  delete SiftParamCP::default_instance_;
  delete SiftParamCP_reflection_;
  delete SurfParamCP::default_instance_;
  delete SurfParamCP_reflection_;
  delete GFTTParamCP::default_instance_;
  delete GFTTParamCP_reflection_;
  delete HarrisParamCP::default_instance_;
  delete HarrisParamCP_reflection_;
  delete DenseParamCP::default_instance_;
  delete DenseParamCP_reflection_;
  delete SimpleBlobParamCP::default_instance_;
  delete SimpleBlobParamCP_reflection_;
  delete AkazeParamCP::default_instance_;
  delete AkazeParamCP_reflection_;
  delete CVPointParameter::default_instance_;
  delete CVPointParameter_reflection_;
  delete FeatureDescriptorParameter::default_instance_;
  delete FeatureDescriptorParameter_reflection_;
  delete SIFTDescriptorParameter::default_instance_;
  delete SIFTDescriptorParameter_reflection_;
  delete SURFDescriptorParameter::default_instance_;
  delete SURFDescriptorParameter_reflection_;
  delete STARDescriptorParameter::default_instance_;
  delete STARDescriptorParameter_reflection_;
  delete BRIEFDescriptorParameter::default_instance_;
  delete BRIEFDescriptorParameter_reflection_;
  delete BRISKDescriptorParameter::default_instance_;
  delete BRISKDescriptorParameter_reflection_;
  delete FASTDescriptorParameter::default_instance_;
  delete FASTDescriptorParameter_reflection_;
  delete ORBDescriptorParameter::default_instance_;
  delete ORBDescriptorParameter_reflection_;
  delete KAZEDescriptorParameter::default_instance_;
  delete KAZEDescriptorParameter_reflection_;
  delete BriefDespCV::default_instance_;
  delete BriefDespCV_reflection_;
  delete CVDescriptorParameter::default_instance_;
  delete CVDescriptorParameter_reflection_;
  delete VectorMatchParameter::default_instance_;
  delete VectorMatchParameter_reflection_;
  delete KDTreeMatchParameter::default_instance_;
  delete KDTreeMatchParameter_reflection_;
  delete EularMatchParameter::default_instance_;
  delete EularMatchParameter_reflection_;
  delete RansacParameter::default_instance_;
  delete RansacParameter_reflection_;
  delete BruteForceMatchParameter::default_instance_;
  delete BruteForceMatchParameter_reflection_;
  delete FLANNMatchParameter::default_instance_;
  delete FLANNMatchParameter_reflection_;
  delete ECMatchParameter::default_instance_;
  delete ECMatchParameter_reflection_;
  delete CVMatchParameter::default_instance_;
  delete CVMatchParameter_reflection_;
  delete StereoMatchParameter::default_instance_;
  delete StereoMatchParameter_reflection_;
  delete SGMMatchParameter::default_instance_;
  delete SGMMatchParameter_reflection_;
  delete SGMMatchParameter::_default_prefix_;
  delete EADPMatchParameter::default_instance_;
  delete EADPMatchParameter_reflection_;
  delete EADPMatchParameter::_default_prefix_;
  delete OutputParameter::default_instance_;
  delete OutputParameter_reflection_;
  delete TriangularParameter::default_instance_;
  delete TriangularParameter_reflection_;
  delete TriangularParameter::_default_pcname_;
  delete MatrixMulParameter::default_instance_;
  delete MatrixMulParameter_reflection_;
  delete PositionEstimateParameter::default_instance_;
  delete PositionEstimateParameter_reflection_;
  delete CenterPointParameter::default_instance_;
  delete CenterPointParameter_reflection_;
  delete CoordiParameter::default_instance_;
  delete CoordiParameter_reflection_;
  delete SACIAParameter::default_instance_;
  delete SACIAParameter_reflection_;
  delete SACIAEstimateParameter::default_instance_;
  delete SACIAEstimateParameter_reflection_;
  delete ICPParameter::default_instance_;
  delete ICPParameter_reflection_;
  delete IAICPEstimateParameter::default_instance_;
  delete IAICPEstimateParameter_reflection_;
  delete NDTParameter::default_instance_;
  delete NDTParameter_reflection_;
  delete IANDTEstimateParameter::default_instance_;
  delete IANDTEstimateParameter_reflection_;
  delete LayerParameter::default_instance_;
  delete LayerParameter_reflection_;
}

void protobuf_AddDesc_svaf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nsvaf.proto\022\004svaf\"u\n\010SvafTask\022 \n\004name\030\001"
    " \001(\t:\022Untitled Algorithm\022\017\n\007version\030\002 \001("
    "\t\022#\n\005layer\030\003 \003(\0132\024.svaf.LayerParameter\022\021"
    "\n\005pause\030\004 \001(\005:\00210\"\031\n\027ImageOperationParam"
    "eter\"\207\001\n\032SuperPixelSegmentParameter\022\016\n\001K"
    "\030\001 \001(\005:\003400\022\r\n\001M\030\002 \001(\005:\00210\022\024\n\006optint\030\003 \001"
    "(\010:\004true\022\026\n\007saveseg\030\004 \001(\010:\005false\022\034\n\007segn"
    "ame\030\005 \001(\t:\013./supix.seg\"\026\n\024ImageResizePar"
    "ameter\"\024\n\022ImageCropParameter\"\032\n\030StereoOp"
    "erationParameter\"*\n\026StereoRectifyParamet"
    "er\022\020\n\010filename\030\001 \001(\t\"\036\n\rDataParameter\022\r\n"
    "\005color\030\001 \001(\010\"\"\n\022ImageDataParameter\022\014\n\004na"
    "me\030\001 \003(\t\",\n\rBinocularPair\022\014\n\004left\030\001 \001(\t\022"
    "\r\n\005right\030\002 \001(\t\"\\\n\022ImagePairParameter\022!\n\004"
    "pair\030\001 \003(\0132\023.svaf.BinocularPair\022#\n\005_pair"
    "\030\377\001 \003(\0132\023.svaf.BinocularPair\"\"\n\022VideoDat"
    "aParameter\022\014\n\004name\030\001 \003(\t\"\\\n\022VideoPairPar"
    "ameter\022!\n\004pair\030\001 \003(\0132\023.svaf.BinocularPai"
    "r\022#\n\005_pair\030\377\001 \003(\0132\023.svaf.BinocularPair\"%"
    "\n\023CameraDataParameter\022\016\n\006camere\030\001 \001(\003\">\n"
    "\023CameraPairParameter\022\022\n\nleftcamera\030\001 \001(\003"
    "\022\023\n\013rightcamera\030\002 \001(\003\"&\n\026DSPCameraDataPa"
    "rameter\022\014\n\004chns\030\001 \001(\005\"&\n\026DSPCameraPairPa"
    "rameter\022\014\n\004chns\030\001 \001(\005\"\025\n\023KinectDataParam"
    "eter\"$\n\024ImageFolderParameter\022\014\n\004name\030\001 \003"
    "(\t\"b\n\030ImagePairFolderParameter\022!\n\004pair\030\001"
    " \003(\0132\023.svaf.BinocularPair\022#\n\005_pair\030\377\001 \003("
    "\0132\023.svaf.BinocularPair\"\024\n\022RecognizeParam"
    "eter\"g\n\014ROIExtention\022\017\n\004left\030\001 \001(\005:\0010\022\020\n"
    "\005right\030\002 \001(\005:\0010\022\016\n\003top\030\003 \001(\005:\0010\022\021\n\006botto"
    "m\030\004 \001(\005:\0010\022\021\n\006xshift\030\005 \001(\005:\0010\"\305\001\n\021Adaboo"
    "stParameter\022\020\n\010detector\030\001 \001(\t\022\031\n\nsync_fr"
    "ame\030\002 \001(\010:\005false\022\031\n\nsync_video\030\003 \001(\010:\005fa"
    "lse\022\034\n\rsync_epipolar\030\004 \001(\010:\005false\022\021\n\006thr"
    "esh\030\005 \001(\002:\0010\022\021\n\003nms\030\006 \001(\002:\0040.65\022$\n\010pad_r"
    "ect\030\007 \001(\0132\022.svaf.ROIExtention\"\020\n\016TrackPa"
    "rameter\"H\n\021InitRectParameter\022\t\n\001x\030\001 \001(\r\022"
    "\t\n\001y\030\002 \001(\r\022\r\n\005width\030\003 \001(\r\022\016\n\006height\030\004 \001("
    "\r\"\317\006\n\021MilTrackParameter\022=\n\tinit_type\030\001 \001"
    "(\0162 .svaf.MilTrackParameter.InitType:\010AU"
    "TORECT\022:\n\ntrack_type\030\002 \001(\0162!.svaf.MilTra"
    "ckParameter.TrackType:\003MIL\022\027\n\013track_coun"
    "t\030\003 \001(\005:\00220\022*\n\tinit_rect\030\004 \003(\0132\027.svaf.In"
    "itRectParameter\022\025\n\010tr_width\030\005 \001(\r:\003200\022\026"
    "\n\ttr_height\030\006 \001(\r:\003150\022\030\n\013scalefactor\030\007 "
    "\001(\002:\0030.5\022\027\n\013init_negnum\030\013 \001(\r:\00265\022\022\n\006neg"
    "num\030\014 \001(\r:\00265\022\026\n\006posmax\030\r \001(\r:\006100000\022\025\n"
    "\tsrchwinsz\030\016 \001(\r:\00225\022\032\n\017negsample_strat\030"
    "\017 \001(\r:\0011\022\024\n\007numfeat\030\020 \001(\r:\003250\022\022\n\006numsel"
    "\030\021 \001(\r:\00250\022\023\n\005lrate\030\025 \001(\002:\0040.85\022\021\n\006posra"
    "d\030\026 \001(\002:\0011\022\026\n\013init_posrad\030\027 \001(\002:\0013\022\032\n\017ha"
    "armin_rectnum\030\030 \001(\r:\0012\022\032\n\017haarmax_rectnu"
    "m\030\031 \001(\r:\0016\022\025\n\007uselogr\030\035 \001(\010:\004true\022\022\n\003tss"
    "\030\037 \001(\010:\005false\022\023\n\004pool\030  \001(\010:\005false\022\023\n\004sy"
    "nc\030! \001(\010:\005false\022\026\n\007mixfeat\030\" \001(\010:\005false\022"
    "\027\n\010showprob\030# \001(\010:\005false\"=\n\010InitType\022\t\n\005"
    "MOUSE\020\001\022\n\n\006SELECT\020\002\022\014\n\010AUTORECT\020\003\022\014\n\010ADA"
    "BOOST\020\004\"R\n\tTrackType\022\007\n\003MIL\020\001\022\007\n\003ADA\020\002\022\014"
    "\n\010MIL_GRAY\020\013\022\013\n\007MIL_RGB\020\014\022\013\n\007MIL_LUV\020\r\022\013"
    "\n\007MIL_HSV\020\016\"\027\n\025FeaturePointParameter\"\024\n\022"
    "SIFTPointParameter\"i\n\022SURFPointParameter"
    "\022\021\n\006stride\030\001 \001(\005:\0012\022\022\n\007octaves\030\002 \001(\005:\0015\022"
    "\024\n\tintervals\030\003 \001(\005:\0014\022\026\n\006thresh\030\004 \001(\002:\0060"
    ".0004\"\024\n\022STARPointParameter\"\025\n\023BRISKPoin"
    "tParameter\";\n\022FASTPointParameter\022\022\n\006thre"
    "sh\030\001 \001(\005:\00240\022\021\n\003nms\030\002 \001(\010:\004true\"\023\n\021ORBPo"
    "intParameter\"\024\n\022KAZEPointParameter\"\026\n\024Ha"
    "rrisPointParameter\"\230\001\n\013FastParamCP\022\022\n\006th"
    "resh\030\001 \001(\005:\00240\022\023\n\005isnms\030\002 \001(\010:\004true\0221\n\005f"
    "type\030\003 \001(\0162\032.svaf.FastParamCP.FastType:\006"
    "T_9_16\"-\n\010FastType\022\n\n\006T_9_16\020\001\022\n\n\006T_7_12"
    "\020\002\022\t\n\005T_5_8\020\003\"\354\001\n\013MSERParamCP\022\020\n\005delta\030\001"
    " \001(\005:\0015\022\024\n\010min_area\030\002 \001(\005:\00260\022\027\n\010max_are"
    "a\030\003 \001(\005:\00514400\022\027\n\tmax_varia\030\004 \001(\002:\0040.25\022"
    "\027\n\nmin_divers\030\005 \001(\002:\0030.2\022\032\n\rmax_evolutio"
    "n\030\006 \001(\005:\003200\022\031\n\013area_thresh\030\007 \001(\002:\0041.01\022"
    "\031\n\nmin_margin\030\010 \001(\002:\0050.003\022\030\n\redgeblur_s"
    "ize\030\t \001(\005:\0015\"\234\002\n\nORBParamCP\022\026\n\tnfeatures"
    "\030\001 \001(\005:\003500\022\030\n\013scalefactor\030\002 \001(\002:\0031.2\022\022\n"
    "\007nlevels\030\003 \001(\005:\0018\022\026\n\nedgethresh\030\004 \001(\005:\0023"
    "1\022\025\n\nfirstlevel\030\005 \001(\005:\0010\022\020\n\005wta_k\030\006 \001(\005:"
    "\0012\022>\n\tscoretype\030\007 \001(\0162\035.svaf.ORBParamCP."
    "OBRScoreType:\014HARRIS_SCORE\022\025\n\tpatchsize\030"
    "\010 \001(\005:\00231\"0\n\014OBRScoreType\022\020\n\014HARRIS_SCOR"
    "E\020\001\022\016\n\nFAST_SCORE\020\002\"J\n\014BriskParamCP\022\022\n\006t"
    "hresh\030\001 \001(\005:\00230\022\022\n\007octaves\030\002 \001(\005:\0013\022\022\n\007p"
    "tscale\030\003 \001(\002:\0011\"j\n\014FreakParamCP\022\030\n\norien"
    "tnorm\030\001 \001(\010:\004true\022\027\n\tscalenorm\030\002 \001(\010:\004tr"
    "ue\022\023\n\007ptscale\030\003 \001(\002:\00222\022\022\n\007octaves\030\004 \001(\005"
    ":\0014\"\217\001\n\013StarParamCP\022\023\n\007maxsize\030\001 \001(\005:\00216"
    "\022\033\n\017response_thresh\030\002 \001(\005:\00230\022\034\n\020project"
    "ed_thresh\030\003 \001(\005:\00210\022\033\n\020binarized_thresh\030"
    "\004 \001(\005:\0018\022\023\n\010nms_size\030\005 \001(\005:\0015\"\203\001\n\013SiftPa"
    "ramCP\022\024\n\tnfeatures\030\001 \001(\005:\0010\022\022\n\007octaves\030\002"
    " \001(\005:\0013\022\035\n\017contrast_thresh\030\003 \001(\002:\0040.04\022\027"
    "\n\013edge_thresh\030\004 \001(\002:\00210\022\022\n\005sigma\030\005 \001(\002:\003"
    "1.6\"\207\001\n\013SurfParamCP\022\036\n\016hassian_thresh\030\001 "
    "\001(\002:\0060.0004\022\022\n\007octaves\030\002 \001(\005:\0014\022\023\n\010intev"
    "als\030\003 \001(\005:\0012\022\027\n\010extended\030\004 \001(\010:\005false\022\026\n"
    "\007upright\030\005 \001(\010:\005false\"\224\001\n\013GFTTParamCP\022\031\n"
    "\013maxcornners\030\001 \001(\005:\0041000\022\025\n\007quality\030\002 \001("
    "\002:\0040.01\022\022\n\007mindist\030\003 \001(\002:\0011\022\024\n\tblocksize"
    "\030\004 \001(\005:\0013\022\030\n\tuseharris\030\005 \001(\010:\005false\022\017\n\001k"
    "\030\006 \001(\002:\0040.04\"|\n\rHarrisParamCP\022\031\n\013maxcorn"
    "ners\030\001 \001(\005:\0041000\022\025\n\007quality\030\002 \001(\002:\0040.01\022"
    "\022\n\007mindist\030\003 \001(\002:\0011\022\024\n\tblocksize\030\004 \001(\005:\001"
    "3\022\017\n\001k\030\006 \001(\002:\0040.04\"\302\001\n\014DenseParamCP\022\030\n\ri"
    "nitfeatscale\030\001 \001(\002:\0011\022\031\n\016featscalelevel\030"
    "\002 \001(\005:\0011\022\031\n\014featscalemul\030\003 \001(\002:\0030.1\022\025\n\ni"
    "nitxystep\030\004 \001(\005:\0016\022\024\n\tinitbound\030\005 \001(\005:\0010"
    "\022\031\n\013varyxyscale\030\006 \001(\010:\004true\022\032\n\013varybdsca"
    "le\030\007 \001(\010:\005false\"\023\n\021SimpleBlobParamCP\"\016\n\014"
    "AkazeParamCP\"\202\006\n\020CVPointParameter\022.\n\004typ"
    "e\030\001 \001(\0162 .svaf.CVPointParameter.PointTyp"
    "e\022\024\n\005isadd\030\002 \001(\010:\005false\022%\n\nfast_param\030\013 "
    "\001(\0132\021.svaf.FastParamCP\022%\n\nmser_param\030\r \001"
    "(\0132\021.svaf.MSERParamCP\022#\n\torb_param\030\016 \001(\013"
    "2\020.svaf.ORBParamCP\022\'\n\013brisk_param\030\017 \001(\0132"
    "\022.svaf.BriskParamCP\022\'\n\013freak_param\030\020 \001(\013"
    "2\022.svaf.FreakParamCP\022%\n\nstar_param\030\021 \001(\013"
    "2\021.svaf.StarParamCP\022%\n\nsift_param\030\022 \001(\0132"
    "\021.svaf.SiftParamCP\022%\n\nsurf_param\030\023 \001(\0132\021"
    ".svaf.SurfParamCP\022%\n\ngftt_param\030\024 \001(\0132\021."
    "svaf.GFTTParamCP\022)\n\014harris_param\030\025 \001(\0132\023"
    ".svaf.HarrisParamCP\022\'\n\013dense_param\030\026 \001(\013"
    "2\022.svaf.DenseParamCP\022)\n\010sb_param\030\027 \001(\0132\027"
    ".svaf.SimpleBlobParamCP\022\'\n\013akaze_param\030\030"
    " \001(\0132\022.svaf.AkazeParamCP\"\236\001\n\tPointType\022\010"
    "\n\004FAST\020\001\022\t\n\005FASTX\020\002\022\010\n\004MSER\020\003\022\007\n\003ORB\020\004\022\t"
    "\n\005BRISK\020\005\022\t\n\005FREAK\020\006\022\010\n\004STAR\020\007\022\010\n\004SIFT\020\010"
    "\022\010\n\004SURF\020\t\022\010\n\004GFTT\020\n\022\n\n\006HARRIS\020\013\022\t\n\005DENS"
    "E\020\014\022\t\n\005SBLOB\020\r\022\t\n\005AKAZE\020\016\"\034\n\032FeatureDesc"
    "riptorParameter\"\031\n\027SIFTDescriptorParamet"
    "er\"1\n\027SURFDescriptorParameter\022\026\n\007upright"
    "\030\001 \001(\010:\005false\"\031\n\027STARDescriptorParameter"
    "\"\032\n\030BRIEFDescriptorParameter\"\032\n\030BRISKDes"
    "criptorParameter\"\031\n\027FASTDescriptorParame"
    "ter\"\030\n\026ORBDescriptorParameter\"\031\n\027KAZEDes"
    "criptorParameter\"!\n\013BriefDespCV\022\022\n\006lengt"
    "h\030\001 \001(\005:\00232\"\313\001\n\025CVDescriptorParameter\0222\n"
    "\004type\030\001 \001(\0162$.svaf.CVDescriptorParameter"
    ".DespType\022&\n\013brief_param\030\002 \001(\0132\021.svaf.Br"
    "iefDespCV\"V\n\010DespType\022\010\n\004SIFT\020\001\022\010\n\004SURF\020"
    "\002\022\t\n\005BRIEF\020\003\022\t\n\005BRISK\020\004\022\007\n\003ORB\020\005\022\t\n\005FREA"
    "K\020\006\022\014\n\010OPPONENT\020\007\"\026\n\024VectorMatchParamete"
    "r\"\026\n\024KDTreeMatchParameter\"+\n\023EularMatchP"
    "arameter\022\024\n\006thresh\030\001 \001(\002:\0040.65\"$\n\017Ransac"
    "Parameter\022\021\n\006thresh\030\001 \001(\002:\0015\"\032\n\030BruteFor"
    "ceMatchParameter\"\025\n\023FLANNMatchParameter\""
    "\022\n\020ECMatchParameter\"\234\001\n\020CVMatchParameter"
    "\022.\n\004type\030\001 \001(\0162 .svaf.CVMatchParameter.M"
    "atchType\022\030\n\ncrosscheck\030\002 \001(\010:\004true\">\n\tMa"
    "tchType\022\010\n\004BFL1\020\001\022\010\n\004BFL2\020\002\022\010\n\004BFH1\020\003\022\010\n"
    "\004BFH2\020\004\022\t\n\005FLANN\020\005\"\026\n\024StereoMatchParamet"
    "er\"\242\001\n\021SGMMatchParameter\022\024\n\010max_disp\030\001 \001"
    "(\005:\00224\022\024\n\006factor\030\002 \001(\005:\0042560\022\021\n\006dispmr\030\003"
    " \001(\005:\0011\022\016\n\002r1\030\004 \001(\002:\00210\022\017\n\002r2\030\005 \001(\002:\003500"
    "\022\025\n\006prefix\030\006 \001(\t:\005./sgm\022\026\n\007savetxt\030\007 \001(\010"
    ":\005false\"\332\001\n\022EADPMatchParameter\022\024\n\010max_di"
    "sp\030\001 \001(\005:\00224\022\024\n\006factor\030\002 \001(\005:\0042560\022\021\n\006gu"
    "idmr\030\003 \001(\005:\0011\022\021\n\006dispmr\030\004 \001(\005:\0011\022\017\n\002sg\030\005"
    " \001(\002:\003-25\022\020\n\002sc\030\006 \001(\002:\00425.5\022\016\n\002r1\030\007 \001(\002:"
    "\00210\022\017\n\002r2\030\010 \001(\002:\003500\022\026\n\006prefix\030\t \001(\t:\006./"
    "eadp\022\026\n\007savetxt\030\n \001(\010:\005false\"\021\n\017OutputPa"
    "rameter\"\223\001\n\023TriangularParameter\022\025\n\007visib"
    "le\030\001 \001(\010:\004true\022\023\n\013toolbox_dir\030\002 \001(\t\022\024\n\014c"
    "alibmat_dir\030\003 \001(\t\022\025\n\006savepc\030\004 \001(\010:\005false"
    "\022#\n\006pcname\030\005 \001(\t:\023./ref_pointcloud.pc\"P\n"
    "\022MatrixMulParameter\022\020\n\010filename\030\001 \001(\t\022\014\n"
    "\004col0\030\002 \001(\t\022\014\n\004col1\030\003 \001(\t\022\014\n\004col2\030\004 \001(\t\""
    "\033\n\031PositionEstimateParameter\"\026\n\024CenterPo"
    "intParameter\"e\n\017CoordiParameter\022\014\n\001x\030\001 \001"
    "(\002:\0010\022\014\n\001y\030\002 \001(\002:\0010\022\014\n\001z\030\003 \001(\002:\0010\022\014\n\001a\030\004"
    " \001(\002:\0010\022\014\n\001b\030\005 \001(\002:\0010\022\014\n\001c\030\006 \001(\002:\0010\"\230\001\n\016"
    "SACIAParameter\022\026\n\010max_iter\030\001 \001(\005:\0041000\022\023"
    "\n\010min_cors\030\002 \001(\002:\0013\022\026\n\010max_cors\030\003 \001(\002:\0041"
    "000\022\025\n\nvoxel_grid\030\004 \001(\002:\0013\022\024\n\010norm_rad\030\005"
    " \001(\002:\00220\022\024\n\010feat_rad\030\006 \001(\002:\00250\"\201\001\n\026SACIA"
    "EstimateParameter\022\024\n\014pcd_filename\030\001 \001(\t\022"
    "&\n\010ia_param\030\002 \001(\0132\024.svaf.SACIAParameter\022"
    ")\n\ncoor_param\030\003 \001(\0132\025.svaf.CoordiParamet"
    "er\"K\n\014ICPParameter\022\023\n\010max_iter\030\001 \001(\005:\0012\022"
    "\024\n\010max_resp\030\002 \001(\002:\00210\022\020\n\003esp\030\003 \001(\002:\0030.1\""
    "\253\001\n\026IAICPEstimateParameter\022\024\n\014pcd_filena"
    "me\030\001 \001(\t\022)\n\013sacia_param\030\002 \001(\0132\024.svaf.SAC"
    "IAParameter\022%\n\ticp_param\030\003 \001(\0132\022.svaf.IC"
    "PParameter\022)\n\ncoor_param\030\004 \001(\0132\025.svaf.Co"
    "ordiParameter\"f\n\014NDTParameter\022\025\n\010max_ite"
    "r\030\001 \001(\005:\003100\022\025\n\tstep_size\030\002 \001(\002:\00210\022\026\n\nr"
    "esolution\030\003 \001(\002:\00210\022\020\n\003esp\030\004 \001(\002:\0030.1\"\253\001"
    "\n\026IANDTEstimateParameter\022\024\n\014pcd_filename"
    "\030\001 \001(\t\022)\n\013sacia_param\030\002 \001(\0132\024.svaf.SACIA"
    "Parameter\022%\n\tndt_param\030\003 \001(\0132\022.svaf.NDTP"
    "arameter\022)\n\ncoor_param\030\004 \001(\0132\025.svaf.Coor"
    "diParameter\"\245!\n\016LayerParameter\022\014\n\004name\030\001"
    " \001(\t\022\016\n\006bottom\030\002 \001(\t\022\013\n\003top\030\003 \001(\t\022\023\n\004sho"
    "w\030\004 \001(\010:\005false\022\023\n\004save\030\005 \001(\010:\005false\022\023\n\004l"
    "ogt\030\006 \001(\010:\005false\022\023\n\004logi\030\007 \001(\010:\005false\022,\n"
    "\004type\030\n \001(\0162\036.svaf.LayerParameter.LayerT"
    "ype\0225\n\rimageop_param\030\310\001 \001(\0132\035.svaf.Image"
    "OperationParameter\0226\n\013supix_param\030\311\001 \001(\013"
    "2 .svaf.SuperPixelSegmentParameter\0221\n\014re"
    "size_param\030\312\001 \001(\0132\032.svaf.ImageResizePara"
    "meter\022-\n\ncrop_param\030\313\001 \001(\0132\030.svaf.ImageC"
    "ropParameter\0227\n\016stereoop_param\030\360\001 \001(\0132\036."
    "svaf.StereoOperationParameter\0224\n\rrectify"
    "_param\030\361\001 \001(\0132\034.svaf.StereoRectifyParame"
    "ter\022\'\n\ndata_param\030d \001(\0132\023.svaf.DataParam"
    "eter\0221\n\017imagedata_param\030e \001(\0132\030.svaf.Ima"
    "geDataParameter\0221\n\017imagepair_param\030f \001(\013"
    "2\030.svaf.ImagePairParameter\0221\n\017videodata_"
    "param\030g \001(\0132\030.svaf.VideoDataParameter\0221\n"
    "\017videopair_param\030h \001(\0132\030.svaf.VideoPairP"
    "arameter\0223\n\020cameradata_param\030i \001(\0132\031.sva"
    "f.CameraDataParameter\0223\n\020camerapair_para"
    "m\030j \001(\0132\031.svaf.CameraPairParameter\0229\n\023ds"
    "pcameradata_param\030k \001(\0132\034.svaf.DSPCamera"
    "DataParameter\0229\n\023dspcamerapair_param\030l \001"
    "(\0132\034.svaf.DSPCameraPairParameter\0223\n\020kine"
    "ctdata_param\030m \001(\0132\031.svaf.KinectDataPara"
    "meter\0220\n\014folder_param\030o \001(\0132\032.svaf.Image"
    "FolderParameter\0228\n\020pairfolder_param\030p \001("
    "\0132\036.svaf.ImagePairFolderParameter\0221\n\017rec"
    "ognize_param\030x \001(\0132\030.svaf.RecognizeParam"
    "eter\022/\n\016adaboost_param\030y \001(\0132\027.svaf.Adab"
    "oostParameter\022*\n\013track_param\030\202\001 \001(\0132\024.sv"
    "af.TrackParameter\0220\n\016miltrack_param\030\203\001 \001"
    "(\0132\027.svaf.MilTrackParameter\0220\n\016bittrack_"
    "param\030\204\001 \001(\0132\027.svaf.MilTrackParameter\0228\n"
    "\022featurepoint_param\030\214\001 \001(\0132\033.svaf.Featur"
    "ePointParameter\0222\n\017siftpoint_param\030\215\001 \001("
    "\0132\030.svaf.SIFTPointParameter\0222\n\017surfpoint"
    "_param\030\216\001 \001(\0132\030.svaf.SURFPointParameter\022"
    "2\n\017starpoint_param\030\217\001 \001(\0132\030.svaf.STARPoi"
    "ntParameter\0224\n\020briskpoint_param\030\220\001 \001(\0132\031"
    ".svaf.BRISKPointParameter\0222\n\017fastpoint_p"
    "aram\030\221\001 \001(\0132\030.svaf.FASTPointParameter\0220\n"
    "\016orbpoint_param\030\222\001 \001(\0132\027.svaf.ORBPointPa"
    "rameter\0222\n\017kazepoint_param\030\223\001 \001(\0132\030.svaf"
    ".KAZEPointParameter\0226\n\021harrispoint_param"
    "\030\224\001 \001(\0132\032.svaf.HarrisPointParameter\022.\n\rc"
    "vpoint_param\030\225\001 \001(\0132\026.svaf.CVPointParame"
    "ter\022B\n\027featuredescriptor_param\030\226\001 \001(\0132 ."
    "svaf.FeatureDescriptorParameter\022<\n\024siftd"
    "escriptor_param\030\227\001 \001(\0132\035.svaf.SIFTDescri"
    "ptorParameter\022<\n\024surfdescriptor_param\030\230\001"
    " \001(\0132\035.svaf.SURFDescriptorParameter\022<\n\024s"
    "tardescriptor_param\030\231\001 \001(\0132\035.svaf.STARDe"
    "scriptorParameter\022>\n\025briefdescriptor_par"
    "am\030\232\001 \001(\0132\036.svaf.BRIEFDescriptorParamete"
    "r\022>\n\025briskdescriptor_param\030\233\001 \001(\0132\036.svaf"
    ".BRISKDescriptorParameter\022<\n\024fastdescrip"
    "tor_param\030\234\001 \001(\0132\035.svaf.FASTDescriptorPa"
    "rameter\022:\n\023orbdescriptor_param\030\235\001 \001(\0132\034."
    "svaf.ORBDescriptorParameter\022<\n\024kazedescr"
    "iptor_param\030\236\001 \001(\0132\035.svaf.KAZEDescriptor"
    "Parameter\0228\n\022cvdescriptor_param\030\237\001 \001(\0132\033"
    ".svaf.CVDescriptorParameter\0226\n\021vectormat"
    "ch_param\030\240\001 \001(\0132\032.svaf.VectorMatchParame"
    "ter\0226\n\021kdtreematch_param\030\241\001 \001(\0132\032.svaf.K"
    "DTreeMatchParameter\0224\n\020eularmatch_param\030"
    "\242\001 \001(\0132\031.svaf.EularMatchParameter\022,\n\014ran"
    "sac_param\030\243\001 \001(\0132\025.svaf.RansacParameter\022"
    "6\n\rbfmatch_param\030\244\001 \001(\0132\036.svaf.BruteForc"
    "eMatchParameter\0224\n\020flannmatch_param\030\245\001 \001"
    "(\0132\031.svaf.FLANNMatchParameter\022.\n\recmatch"
    "_param\030\250\001 \001(\0132\026.svaf.ECMatchParameter\022.\n"
    "\rcvmatch_param\030\251\001 \001(\0132\026.svaf.CVMatchPara"
    "meter\0226\n\021stereomatch_param\030\252\001 \001(\0132\032.svaf"
    ".StereoMatchParameter\022+\n\tsgm_param\030\253\001 \001("
    "\0132\027.svaf.SGMMatchParameter\022-\n\neadp_param"
    "\030\254\001 \001(\0132\030.svaf.EADPMatchParameter\022,\n\014out"
    "put_param\030\264\001 \001(\0132\025.svaf.OutputParameter\022"
    "0\n\014triang_param\030\265\001 \001(\0132\031.svaf.Triangular"
    "Parameter\022.\n\013mxmul_param\030\266\001 \001(\0132\030.svaf.M"
    "atrixMulParameter\0226\n\014posest_param\030\276\001 \001(\013"
    "2\037.svaf.PositionEstimateParameter\0226\n\021cen"
    "terpoint_param\030\277\001 \001(\0132\032.svaf.CenterPoint"
    "Parameter\0222\n\013sacia_param\030\302\001 \001(\0132\034.svaf.S"
    "ACIAEstimateParameter\0222\n\013iaicp_param\030\303\001 "
    "\001(\0132\034.svaf.IAICPEstimateParameter\0222\n\013ian"
    "dt_param\030\304\001 \001(\0132\034.svaf.IANDTEstimatePara"
    "meter\"\353\005\n\tLayerType\022\010\n\004NONE\020\000\022\t\n\005IMAGE\020\001"
    "\022\016\n\nIMAGE_PAIR\020\002\022\t\n\005VIDEO\020\003\022\016\n\nVIDEO_PAI"
    "R\020\004\022\n\n\006CAMERA\020\005\022\017\n\013CAMERA_PAIR\020\006\022\007\n\003DSP\020"
    "\007\022\014\n\010DSP_PAIR\020\010\022\n\n\006KINECT\020\t\022\020\n\014IMAGE_FOL"
    "DER\020\013\022\025\n\021IMAGE_PAIR_FOLDER\020\014\022\014\n\010ADABOOST"
    "\020\025\022\014\n\010MILTRACK\020\037\022\014\n\010BITTRACK\020 \022\016\n\nSIFT_P"
    "OINT\020)\022\016\n\nSURF_POINT\020*\022\016\n\nSTAR_POINT\020+\022\017"
    "\n\013BRISK_POINT\020,\022\016\n\nFAST_POINT\020-\022\r\n\tORB_P"
    "OINT\020.\022\016\n\nKAZE_POINT\020/\022\020\n\014HARRIS_POINT\0200"
    "\022\014\n\010CV_POINT\0201\022\r\n\tSIFT_DESP\0203\022\r\n\tSURF_DE"
    "SP\0204\022\r\n\tSTAR_DESP\0205\022\016\n\nBRIEF_DESP\0206\022\016\n\nB"
    "RISK_DESP\0207\022\r\n\tFAST_DESP\0208\022\014\n\010ORB_DESP\0209"
    "\022\r\n\tKAZE_DESP\020:\022\013\n\007CV_DESP\020;\022\020\n\014KDTREE_M"
    "ATCH\020=\022\017\n\013EULAR_MATCH\020>\022\n\n\006RANSAC\020\?\022\014\n\010B"
    "F_MATCH\020@\022\017\n\013FLANN_MATCH\020A\022\014\n\010EC_MATCH\020D"
    "\022\014\n\010CV_MATCH\020E\022\r\n\tSGM_MATCH\020G\022\016\n\nEADP_MA"
    "TCH\020H\022\n\n\006TRIANG\020Q\022\t\n\005MXMUL\020R\022\016\n\nCENTER_P"
    "OS\020[\022\n\n\006IA_EST\020^\022\r\n\tIAICP_EST\020_\022\r\n\tIANDT"
    "_EST\020`\022\r\n\tSUPIX_SEG\020e\022\014\n\007RECTIFY\020\215\001", 12035);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "svaf.proto", &protobuf_RegisterTypes);
  SvafTask::_default_name_ =
      new ::std::string("Untitled Algorithm", 18);
  SvafTask::default_instance_ = new SvafTask();
  ImageOperationParameter::default_instance_ = new ImageOperationParameter();
  SuperPixelSegmentParameter::_default_segname_ =
      new ::std::string("./supix.seg", 11);
  SuperPixelSegmentParameter::default_instance_ = new SuperPixelSegmentParameter();
  ImageResizeParameter::default_instance_ = new ImageResizeParameter();
  ImageCropParameter::default_instance_ = new ImageCropParameter();
  StereoOperationParameter::default_instance_ = new StereoOperationParameter();
  StereoRectifyParameter::default_instance_ = new StereoRectifyParameter();
  DataParameter::default_instance_ = new DataParameter();
  ImageDataParameter::default_instance_ = new ImageDataParameter();
  BinocularPair::default_instance_ = new BinocularPair();
  ImagePairParameter::default_instance_ = new ImagePairParameter();
  VideoDataParameter::default_instance_ = new VideoDataParameter();
  VideoPairParameter::default_instance_ = new VideoPairParameter();
  CameraDataParameter::default_instance_ = new CameraDataParameter();
  CameraPairParameter::default_instance_ = new CameraPairParameter();
  DSPCameraDataParameter::default_instance_ = new DSPCameraDataParameter();
  DSPCameraPairParameter::default_instance_ = new DSPCameraPairParameter();
  KinectDataParameter::default_instance_ = new KinectDataParameter();
  ImageFolderParameter::default_instance_ = new ImageFolderParameter();
  ImagePairFolderParameter::default_instance_ = new ImagePairFolderParameter();
  RecognizeParameter::default_instance_ = new RecognizeParameter();
  ROIExtention::default_instance_ = new ROIExtention();
  AdaboostParameter::default_instance_ = new AdaboostParameter();
  TrackParameter::default_instance_ = new TrackParameter();
  InitRectParameter::default_instance_ = new InitRectParameter();
  MilTrackParameter::default_instance_ = new MilTrackParameter();
  FeaturePointParameter::default_instance_ = new FeaturePointParameter();
  SIFTPointParameter::default_instance_ = new SIFTPointParameter();
  SURFPointParameter::default_instance_ = new SURFPointParameter();
  STARPointParameter::default_instance_ = new STARPointParameter();
  BRISKPointParameter::default_instance_ = new BRISKPointParameter();
  FASTPointParameter::default_instance_ = new FASTPointParameter();
  ORBPointParameter::default_instance_ = new ORBPointParameter();
  KAZEPointParameter::default_instance_ = new KAZEPointParameter();
  HarrisPointParameter::default_instance_ = new HarrisPointParameter();
  FastParamCP::default_instance_ = new FastParamCP();
  MSERParamCP::default_instance_ = new MSERParamCP();
  ORBParamCP::default_instance_ = new ORBParamCP();
  BriskParamCP::default_instance_ = new BriskParamCP();
  FreakParamCP::default_instance_ = new FreakParamCP();
  StarParamCP::default_instance_ = new StarParamCP();
  SiftParamCP::default_instance_ = new SiftParamCP();
  SurfParamCP::default_instance_ = new SurfParamCP();
  GFTTParamCP::default_instance_ = new GFTTParamCP();
  HarrisParamCP::default_instance_ = new HarrisParamCP();
  DenseParamCP::default_instance_ = new DenseParamCP();
  SimpleBlobParamCP::default_instance_ = new SimpleBlobParamCP();
  AkazeParamCP::default_instance_ = new AkazeParamCP();
  CVPointParameter::default_instance_ = new CVPointParameter();
  FeatureDescriptorParameter::default_instance_ = new FeatureDescriptorParameter();
  SIFTDescriptorParameter::default_instance_ = new SIFTDescriptorParameter();
  SURFDescriptorParameter::default_instance_ = new SURFDescriptorParameter();
  STARDescriptorParameter::default_instance_ = new STARDescriptorParameter();
  BRIEFDescriptorParameter::default_instance_ = new BRIEFDescriptorParameter();
  BRISKDescriptorParameter::default_instance_ = new BRISKDescriptorParameter();
  FASTDescriptorParameter::default_instance_ = new FASTDescriptorParameter();
  ORBDescriptorParameter::default_instance_ = new ORBDescriptorParameter();
  KAZEDescriptorParameter::default_instance_ = new KAZEDescriptorParameter();
  BriefDespCV::default_instance_ = new BriefDespCV();
  CVDescriptorParameter::default_instance_ = new CVDescriptorParameter();
  VectorMatchParameter::default_instance_ = new VectorMatchParameter();
  KDTreeMatchParameter::default_instance_ = new KDTreeMatchParameter();
  EularMatchParameter::default_instance_ = new EularMatchParameter();
  RansacParameter::default_instance_ = new RansacParameter();
  BruteForceMatchParameter::default_instance_ = new BruteForceMatchParameter();
  FLANNMatchParameter::default_instance_ = new FLANNMatchParameter();
  ECMatchParameter::default_instance_ = new ECMatchParameter();
  CVMatchParameter::default_instance_ = new CVMatchParameter();
  StereoMatchParameter::default_instance_ = new StereoMatchParameter();
  SGMMatchParameter::_default_prefix_ =
      new ::std::string("./sgm", 5);
  SGMMatchParameter::default_instance_ = new SGMMatchParameter();
  EADPMatchParameter::_default_prefix_ =
      new ::std::string("./eadp", 6);
  EADPMatchParameter::default_instance_ = new EADPMatchParameter();
  OutputParameter::default_instance_ = new OutputParameter();
  TriangularParameter::_default_pcname_ =
      new ::std::string("./ref_pointcloud.pc", 19);
  TriangularParameter::default_instance_ = new TriangularParameter();
  MatrixMulParameter::default_instance_ = new MatrixMulParameter();
  PositionEstimateParameter::default_instance_ = new PositionEstimateParameter();
  CenterPointParameter::default_instance_ = new CenterPointParameter();
  CoordiParameter::default_instance_ = new CoordiParameter();
  SACIAParameter::default_instance_ = new SACIAParameter();
  SACIAEstimateParameter::default_instance_ = new SACIAEstimateParameter();
  ICPParameter::default_instance_ = new ICPParameter();
  IAICPEstimateParameter::default_instance_ = new IAICPEstimateParameter();
  NDTParameter::default_instance_ = new NDTParameter();
  IANDTEstimateParameter::default_instance_ = new IANDTEstimateParameter();
  LayerParameter::default_instance_ = new LayerParameter();
  SvafTask::default_instance_->InitAsDefaultInstance();
  ImageOperationParameter::default_instance_->InitAsDefaultInstance();
  SuperPixelSegmentParameter::default_instance_->InitAsDefaultInstance();
  ImageResizeParameter::default_instance_->InitAsDefaultInstance();
  ImageCropParameter::default_instance_->InitAsDefaultInstance();
  StereoOperationParameter::default_instance_->InitAsDefaultInstance();
  StereoRectifyParameter::default_instance_->InitAsDefaultInstance();
  DataParameter::default_instance_->InitAsDefaultInstance();
  ImageDataParameter::default_instance_->InitAsDefaultInstance();
  BinocularPair::default_instance_->InitAsDefaultInstance();
  ImagePairParameter::default_instance_->InitAsDefaultInstance();
  VideoDataParameter::default_instance_->InitAsDefaultInstance();
  VideoPairParameter::default_instance_->InitAsDefaultInstance();
  CameraDataParameter::default_instance_->InitAsDefaultInstance();
  CameraPairParameter::default_instance_->InitAsDefaultInstance();
  DSPCameraDataParameter::default_instance_->InitAsDefaultInstance();
  DSPCameraPairParameter::default_instance_->InitAsDefaultInstance();
  KinectDataParameter::default_instance_->InitAsDefaultInstance();
  ImageFolderParameter::default_instance_->InitAsDefaultInstance();
  ImagePairFolderParameter::default_instance_->InitAsDefaultInstance();
  RecognizeParameter::default_instance_->InitAsDefaultInstance();
  ROIExtention::default_instance_->InitAsDefaultInstance();
  AdaboostParameter::default_instance_->InitAsDefaultInstance();
  TrackParameter::default_instance_->InitAsDefaultInstance();
  InitRectParameter::default_instance_->InitAsDefaultInstance();
  MilTrackParameter::default_instance_->InitAsDefaultInstance();
  FeaturePointParameter::default_instance_->InitAsDefaultInstance();
  SIFTPointParameter::default_instance_->InitAsDefaultInstance();
  SURFPointParameter::default_instance_->InitAsDefaultInstance();
  STARPointParameter::default_instance_->InitAsDefaultInstance();
  BRISKPointParameter::default_instance_->InitAsDefaultInstance();
  FASTPointParameter::default_instance_->InitAsDefaultInstance();
  ORBPointParameter::default_instance_->InitAsDefaultInstance();
  KAZEPointParameter::default_instance_->InitAsDefaultInstance();
  HarrisPointParameter::default_instance_->InitAsDefaultInstance();
  FastParamCP::default_instance_->InitAsDefaultInstance();
  MSERParamCP::default_instance_->InitAsDefaultInstance();
  ORBParamCP::default_instance_->InitAsDefaultInstance();
  BriskParamCP::default_instance_->InitAsDefaultInstance();
  FreakParamCP::default_instance_->InitAsDefaultInstance();
  StarParamCP::default_instance_->InitAsDefaultInstance();
  SiftParamCP::default_instance_->InitAsDefaultInstance();
  SurfParamCP::default_instance_->InitAsDefaultInstance();
  GFTTParamCP::default_instance_->InitAsDefaultInstance();
  HarrisParamCP::default_instance_->InitAsDefaultInstance();
  DenseParamCP::default_instance_->InitAsDefaultInstance();
  SimpleBlobParamCP::default_instance_->InitAsDefaultInstance();
  AkazeParamCP::default_instance_->InitAsDefaultInstance();
  CVPointParameter::default_instance_->InitAsDefaultInstance();
  FeatureDescriptorParameter::default_instance_->InitAsDefaultInstance();
  SIFTDescriptorParameter::default_instance_->InitAsDefaultInstance();
  SURFDescriptorParameter::default_instance_->InitAsDefaultInstance();
  STARDescriptorParameter::default_instance_->InitAsDefaultInstance();
  BRIEFDescriptorParameter::default_instance_->InitAsDefaultInstance();
  BRISKDescriptorParameter::default_instance_->InitAsDefaultInstance();
  FASTDescriptorParameter::default_instance_->InitAsDefaultInstance();
  ORBDescriptorParameter::default_instance_->InitAsDefaultInstance();
  KAZEDescriptorParameter::default_instance_->InitAsDefaultInstance();
  BriefDespCV::default_instance_->InitAsDefaultInstance();
  CVDescriptorParameter::default_instance_->InitAsDefaultInstance();
  VectorMatchParameter::default_instance_->InitAsDefaultInstance();
  KDTreeMatchParameter::default_instance_->InitAsDefaultInstance();
  EularMatchParameter::default_instance_->InitAsDefaultInstance();
  RansacParameter::default_instance_->InitAsDefaultInstance();
  BruteForceMatchParameter::default_instance_->InitAsDefaultInstance();
  FLANNMatchParameter::default_instance_->InitAsDefaultInstance();
  ECMatchParameter::default_instance_->InitAsDefaultInstance();
  CVMatchParameter::default_instance_->InitAsDefaultInstance();
  StereoMatchParameter::default_instance_->InitAsDefaultInstance();
  SGMMatchParameter::default_instance_->InitAsDefaultInstance();
  EADPMatchParameter::default_instance_->InitAsDefaultInstance();
  OutputParameter::default_instance_->InitAsDefaultInstance();
  TriangularParameter::default_instance_->InitAsDefaultInstance();
  MatrixMulParameter::default_instance_->InitAsDefaultInstance();
  PositionEstimateParameter::default_instance_->InitAsDefaultInstance();
  CenterPointParameter::default_instance_->InitAsDefaultInstance();
  CoordiParameter::default_instance_->InitAsDefaultInstance();
  SACIAParameter::default_instance_->InitAsDefaultInstance();
  SACIAEstimateParameter::default_instance_->InitAsDefaultInstance();
  ICPParameter::default_instance_->InitAsDefaultInstance();
  IAICPEstimateParameter::default_instance_->InitAsDefaultInstance();
  NDTParameter::default_instance_->InitAsDefaultInstance();
  IANDTEstimateParameter::default_instance_->InitAsDefaultInstance();
  LayerParameter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_svaf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_svaf_2eproto {
  StaticDescriptorInitializer_svaf_2eproto() {
    protobuf_AddDesc_svaf_2eproto();
  }
} static_descriptor_initializer_svaf_2eproto_;

// ===================================================================

::std::string* SvafTask::_default_name_ = NULL;
#ifndef _MSC_VER
const int SvafTask::kNameFieldNumber;
const int SvafTask::kVersionFieldNumber;
const int SvafTask::kLayerFieldNumber;
const int SvafTask::kPauseFieldNumber;
#endif  // !_MSC_VER

SvafTask::SvafTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.SvafTask)
}

void SvafTask::InitAsDefaultInstance() {
}

SvafTask::SvafTask(const SvafTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.SvafTask)
}

void SvafTask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(_default_name_);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pause_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SvafTask::~SvafTask() {
  // @@protoc_insertion_point(destructor:svaf.SvafTask)
  SharedDtor();
}

void SvafTask::SharedDtor() {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void SvafTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SvafTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvafTask_descriptor_;
}

const SvafTask& SvafTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

SvafTask* SvafTask::default_instance_ = NULL;

SvafTask* SvafTask::New() const {
  return new SvafTask;
}

void SvafTask::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    if (has_name()) {
      if (name_ != _default_name_) {
        name_->assign(*_default_name_);
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    pause_ = 10;
  }
  layer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SvafTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.SvafTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1 [default = "Untitled Algorithm"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional string version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_layer;
        break;
      }

      // repeated .svaf.LayerParameter layer = 3;
      case 3: {
        if (tag == 26) {
         parse_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_layer;
        if (input->ExpectTag(32)) goto parse_pause;
        break;
      }

      // optional int32 pause = 4 [default = 10];
      case 4: {
        if (tag == 32) {
         parse_pause:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pause_)));
          set_has_pause();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.SvafTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.SvafTask)
  return false;
#undef DO_
}

void SvafTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.SvafTask)
  // optional string name = 1 [default = "Untitled Algorithm"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // repeated .svaf.LayerParameter layer = 3;
  for (int i = 0; i < this->layer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->layer(i), output);
  }

  // optional int32 pause = 4 [default = 10];
  if (has_pause()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pause(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.SvafTask)
}

::google::protobuf::uint8* SvafTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.SvafTask)
  // optional string name = 1 [default = "Untitled Algorithm"];
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // repeated .svaf.LayerParameter layer = 3;
  for (int i = 0; i < this->layer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->layer(i), target);
  }

  // optional int32 pause = 4 [default = 10];
  if (has_pause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pause(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.SvafTask)
  return target;
}

int SvafTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1 [default = "Untitled Algorithm"];
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional int32 pause = 4 [default = 10];
    if (has_pause()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pause());
    }

  }
  // repeated .svaf.LayerParameter layer = 3;
  total_size += 1 * this->layer_size();
  for (int i = 0; i < this->layer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layer(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SvafTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SvafTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SvafTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SvafTask::MergeFrom(const SvafTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  layer_.MergeFrom(from.layer_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_pause()) {
      set_pause(from.pause());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SvafTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SvafTask::CopyFrom(const SvafTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvafTask::IsInitialized() const {

  return true;
}

void SvafTask::Swap(SvafTask* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(version_, other->version_);
    layer_.Swap(&other->layer_);
    std::swap(pause_, other->pause_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SvafTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SvafTask_descriptor_;
  metadata.reflection = SvafTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ImageOperationParameter::ImageOperationParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.ImageOperationParameter)
}

void ImageOperationParameter::InitAsDefaultInstance() {
}

ImageOperationParameter::ImageOperationParameter(const ImageOperationParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.ImageOperationParameter)
}

void ImageOperationParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageOperationParameter::~ImageOperationParameter() {
  // @@protoc_insertion_point(destructor:svaf.ImageOperationParameter)
  SharedDtor();
}

void ImageOperationParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImageOperationParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageOperationParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageOperationParameter_descriptor_;
}

const ImageOperationParameter& ImageOperationParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

ImageOperationParameter* ImageOperationParameter::default_instance_ = NULL;

ImageOperationParameter* ImageOperationParameter::New() const {
  return new ImageOperationParameter;
}

void ImageOperationParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageOperationParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.ImageOperationParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.ImageOperationParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.ImageOperationParameter)
  return false;
#undef DO_
}

void ImageOperationParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.ImageOperationParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.ImageOperationParameter)
}

::google::protobuf::uint8* ImageOperationParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.ImageOperationParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.ImageOperationParameter)
  return target;
}

int ImageOperationParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageOperationParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageOperationParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageOperationParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageOperationParameter::MergeFrom(const ImageOperationParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageOperationParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageOperationParameter::CopyFrom(const ImageOperationParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageOperationParameter::IsInitialized() const {

  return true;
}

void ImageOperationParameter::Swap(ImageOperationParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageOperationParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageOperationParameter_descriptor_;
  metadata.reflection = ImageOperationParameter_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SuperPixelSegmentParameter::_default_segname_ = NULL;
#ifndef _MSC_VER
const int SuperPixelSegmentParameter::kKFieldNumber;
const int SuperPixelSegmentParameter::kMFieldNumber;
const int SuperPixelSegmentParameter::kOptintFieldNumber;
const int SuperPixelSegmentParameter::kSavesegFieldNumber;
const int SuperPixelSegmentParameter::kSegnameFieldNumber;
#endif  // !_MSC_VER

SuperPixelSegmentParameter::SuperPixelSegmentParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.SuperPixelSegmentParameter)
}

void SuperPixelSegmentParameter::InitAsDefaultInstance() {
}

SuperPixelSegmentParameter::SuperPixelSegmentParameter(const SuperPixelSegmentParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.SuperPixelSegmentParameter)
}

void SuperPixelSegmentParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k_ = 400;
  m_ = 10;
  optint_ = true;
  saveseg_ = false;
  segname_ = const_cast< ::std::string*>(_default_segname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuperPixelSegmentParameter::~SuperPixelSegmentParameter() {
  // @@protoc_insertion_point(destructor:svaf.SuperPixelSegmentParameter)
  SharedDtor();
}

void SuperPixelSegmentParameter::SharedDtor() {
  if (segname_ != _default_segname_) {
    delete segname_;
  }
  if (this != default_instance_) {
  }
}

void SuperPixelSegmentParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuperPixelSegmentParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuperPixelSegmentParameter_descriptor_;
}

const SuperPixelSegmentParameter& SuperPixelSegmentParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

SuperPixelSegmentParameter* SuperPixelSegmentParameter::default_instance_ = NULL;

SuperPixelSegmentParameter* SuperPixelSegmentParameter::New() const {
  return new SuperPixelSegmentParameter;
}

void SuperPixelSegmentParameter::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    k_ = 400;
    m_ = 10;
    optint_ = true;
    saveseg_ = false;
    if (has_segname()) {
      if (segname_ != _default_segname_) {
        segname_->assign(*_default_segname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuperPixelSegmentParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.SuperPixelSegmentParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 K = 1 [default = 400];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &k_)));
          set_has_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_M;
        break;
      }

      // optional int32 M = 2 [default = 10];
      case 2: {
        if (tag == 16) {
         parse_M:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_)));
          set_has_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_optint;
        break;
      }

      // optional bool optint = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_optint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optint_)));
          set_has_optint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_saveseg;
        break;
      }

      // optional bool saveseg = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_saveseg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &saveseg_)));
          set_has_saveseg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_segname;
        break;
      }

      // optional string segname = 5 [default = "./supix.seg"];
      case 5: {
        if (tag == 42) {
         parse_segname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_segname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->segname().data(), this->segname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "segname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.SuperPixelSegmentParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.SuperPixelSegmentParameter)
  return false;
#undef DO_
}

void SuperPixelSegmentParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.SuperPixelSegmentParameter)
  // optional int32 K = 1 [default = 400];
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->k(), output);
  }

  // optional int32 M = 2 [default = 10];
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m(), output);
  }

  // optional bool optint = 3 [default = true];
  if (has_optint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->optint(), output);
  }

  // optional bool saveseg = 4 [default = false];
  if (has_saveseg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->saveseg(), output);
  }

  // optional string segname = 5 [default = "./supix.seg"];
  if (has_segname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->segname().data(), this->segname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "segname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->segname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.SuperPixelSegmentParameter)
}

::google::protobuf::uint8* SuperPixelSegmentParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.SuperPixelSegmentParameter)
  // optional int32 K = 1 [default = 400];
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->k(), target);
  }

  // optional int32 M = 2 [default = 10];
  if (has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m(), target);
  }

  // optional bool optint = 3 [default = true];
  if (has_optint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->optint(), target);
  }

  // optional bool saveseg = 4 [default = false];
  if (has_saveseg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->saveseg(), target);
  }

  // optional string segname = 5 [default = "./supix.seg"];
  if (has_segname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->segname().data(), this->segname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "segname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->segname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.SuperPixelSegmentParameter)
  return target;
}

int SuperPixelSegmentParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 K = 1 [default = 400];
    if (has_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->k());
    }

    // optional int32 M = 2 [default = 10];
    if (has_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m());
    }

    // optional bool optint = 3 [default = true];
    if (has_optint()) {
      total_size += 1 + 1;
    }

    // optional bool saveseg = 4 [default = false];
    if (has_saveseg()) {
      total_size += 1 + 1;
    }

    // optional string segname = 5 [default = "./supix.seg"];
    if (has_segname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->segname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuperPixelSegmentParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuperPixelSegmentParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuperPixelSegmentParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuperPixelSegmentParameter::MergeFrom(const SuperPixelSegmentParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k()) {
      set_k(from.k());
    }
    if (from.has_m()) {
      set_m(from.m());
    }
    if (from.has_optint()) {
      set_optint(from.optint());
    }
    if (from.has_saveseg()) {
      set_saveseg(from.saveseg());
    }
    if (from.has_segname()) {
      set_segname(from.segname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuperPixelSegmentParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperPixelSegmentParameter::CopyFrom(const SuperPixelSegmentParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperPixelSegmentParameter::IsInitialized() const {

  return true;
}

void SuperPixelSegmentParameter::Swap(SuperPixelSegmentParameter* other) {
  if (other != this) {
    std::swap(k_, other->k_);
    std::swap(m_, other->m_);
    std::swap(optint_, other->optint_);
    std::swap(saveseg_, other->saveseg_);
    std::swap(segname_, other->segname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuperPixelSegmentParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuperPixelSegmentParameter_descriptor_;
  metadata.reflection = SuperPixelSegmentParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ImageResizeParameter::ImageResizeParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.ImageResizeParameter)
}

void ImageResizeParameter::InitAsDefaultInstance() {
}

ImageResizeParameter::ImageResizeParameter(const ImageResizeParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.ImageResizeParameter)
}

void ImageResizeParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageResizeParameter::~ImageResizeParameter() {
  // @@protoc_insertion_point(destructor:svaf.ImageResizeParameter)
  SharedDtor();
}

void ImageResizeParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImageResizeParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageResizeParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageResizeParameter_descriptor_;
}

const ImageResizeParameter& ImageResizeParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

ImageResizeParameter* ImageResizeParameter::default_instance_ = NULL;

ImageResizeParameter* ImageResizeParameter::New() const {
  return new ImageResizeParameter;
}

void ImageResizeParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageResizeParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.ImageResizeParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.ImageResizeParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.ImageResizeParameter)
  return false;
#undef DO_
}

void ImageResizeParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.ImageResizeParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.ImageResizeParameter)
}

::google::protobuf::uint8* ImageResizeParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.ImageResizeParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.ImageResizeParameter)
  return target;
}

int ImageResizeParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageResizeParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageResizeParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageResizeParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageResizeParameter::MergeFrom(const ImageResizeParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageResizeParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageResizeParameter::CopyFrom(const ImageResizeParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageResizeParameter::IsInitialized() const {

  return true;
}

void ImageResizeParameter::Swap(ImageResizeParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageResizeParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageResizeParameter_descriptor_;
  metadata.reflection = ImageResizeParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ImageCropParameter::ImageCropParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.ImageCropParameter)
}

void ImageCropParameter::InitAsDefaultInstance() {
}

ImageCropParameter::ImageCropParameter(const ImageCropParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.ImageCropParameter)
}

void ImageCropParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageCropParameter::~ImageCropParameter() {
  // @@protoc_insertion_point(destructor:svaf.ImageCropParameter)
  SharedDtor();
}

void ImageCropParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImageCropParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageCropParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageCropParameter_descriptor_;
}

const ImageCropParameter& ImageCropParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

ImageCropParameter* ImageCropParameter::default_instance_ = NULL;

ImageCropParameter* ImageCropParameter::New() const {
  return new ImageCropParameter;
}

void ImageCropParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageCropParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.ImageCropParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.ImageCropParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.ImageCropParameter)
  return false;
#undef DO_
}

void ImageCropParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.ImageCropParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.ImageCropParameter)
}

::google::protobuf::uint8* ImageCropParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.ImageCropParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.ImageCropParameter)
  return target;
}

int ImageCropParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageCropParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageCropParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageCropParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageCropParameter::MergeFrom(const ImageCropParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageCropParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageCropParameter::CopyFrom(const ImageCropParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageCropParameter::IsInitialized() const {

  return true;
}

void ImageCropParameter::Swap(ImageCropParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageCropParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageCropParameter_descriptor_;
  metadata.reflection = ImageCropParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StereoOperationParameter::StereoOperationParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.StereoOperationParameter)
}

void StereoOperationParameter::InitAsDefaultInstance() {
}

StereoOperationParameter::StereoOperationParameter(const StereoOperationParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.StereoOperationParameter)
}

void StereoOperationParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StereoOperationParameter::~StereoOperationParameter() {
  // @@protoc_insertion_point(destructor:svaf.StereoOperationParameter)
  SharedDtor();
}

void StereoOperationParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StereoOperationParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StereoOperationParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StereoOperationParameter_descriptor_;
}

const StereoOperationParameter& StereoOperationParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

StereoOperationParameter* StereoOperationParameter::default_instance_ = NULL;

StereoOperationParameter* StereoOperationParameter::New() const {
  return new StereoOperationParameter;
}

void StereoOperationParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StereoOperationParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.StereoOperationParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.StereoOperationParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.StereoOperationParameter)
  return false;
#undef DO_
}

void StereoOperationParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.StereoOperationParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.StereoOperationParameter)
}

::google::protobuf::uint8* StereoOperationParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.StereoOperationParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.StereoOperationParameter)
  return target;
}

int StereoOperationParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StereoOperationParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StereoOperationParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StereoOperationParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StereoOperationParameter::MergeFrom(const StereoOperationParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StereoOperationParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StereoOperationParameter::CopyFrom(const StereoOperationParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StereoOperationParameter::IsInitialized() const {

  return true;
}

void StereoOperationParameter::Swap(StereoOperationParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StereoOperationParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StereoOperationParameter_descriptor_;
  metadata.reflection = StereoOperationParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StereoRectifyParameter::kFilenameFieldNumber;
#endif  // !_MSC_VER

StereoRectifyParameter::StereoRectifyParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.StereoRectifyParameter)
}

void StereoRectifyParameter::InitAsDefaultInstance() {
}

StereoRectifyParameter::StereoRectifyParameter(const StereoRectifyParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.StereoRectifyParameter)
}

void StereoRectifyParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StereoRectifyParameter::~StereoRectifyParameter() {
  // @@protoc_insertion_point(destructor:svaf.StereoRectifyParameter)
  SharedDtor();
}

void StereoRectifyParameter::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void StereoRectifyParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StereoRectifyParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StereoRectifyParameter_descriptor_;
}

const StereoRectifyParameter& StereoRectifyParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

StereoRectifyParameter* StereoRectifyParameter::default_instance_ = NULL;

StereoRectifyParameter* StereoRectifyParameter::New() const {
  return new StereoRectifyParameter;
}

void StereoRectifyParameter::Clear() {
  if (has_filename()) {
    if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      filename_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StereoRectifyParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.StereoRectifyParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.StereoRectifyParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.StereoRectifyParameter)
  return false;
#undef DO_
}

void StereoRectifyParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.StereoRectifyParameter)
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.StereoRectifyParameter)
}

::google::protobuf::uint8* StereoRectifyParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.StereoRectifyParameter)
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.StereoRectifyParameter)
  return target;
}

int StereoRectifyParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StereoRectifyParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StereoRectifyParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StereoRectifyParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StereoRectifyParameter::MergeFrom(const StereoRectifyParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StereoRectifyParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StereoRectifyParameter::CopyFrom(const StereoRectifyParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StereoRectifyParameter::IsInitialized() const {

  return true;
}

void StereoRectifyParameter::Swap(StereoRectifyParameter* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StereoRectifyParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StereoRectifyParameter_descriptor_;
  metadata.reflection = StereoRectifyParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DataParameter::kColorFieldNumber;
#endif  // !_MSC_VER

DataParameter::DataParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.DataParameter)
}

void DataParameter::InitAsDefaultInstance() {
}

DataParameter::DataParameter(const DataParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.DataParameter)
}

void DataParameter::SharedCtor() {
  _cached_size_ = 0;
  color_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataParameter::~DataParameter() {
  // @@protoc_insertion_point(destructor:svaf.DataParameter)
  SharedDtor();
}

void DataParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataParameter_descriptor_;
}

const DataParameter& DataParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

DataParameter* DataParameter::default_instance_ = NULL;

DataParameter* DataParameter::New() const {
  return new DataParameter;
}

void DataParameter::Clear() {
  color_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.DataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool color = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.DataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.DataParameter)
  return false;
#undef DO_
}

void DataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.DataParameter)
  // optional bool color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.DataParameter)
}

::google::protobuf::uint8* DataParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.DataParameter)
  // optional bool color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.DataParameter)
  return target;
}

int DataParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool color = 1;
    if (has_color()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataParameter::MergeFrom(const DataParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataParameter::CopyFrom(const DataParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataParameter::IsInitialized() const {

  return true;
}

void DataParameter::Swap(DataParameter* other) {
  if (other != this) {
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataParameter_descriptor_;
  metadata.reflection = DataParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageDataParameter::kNameFieldNumber;
#endif  // !_MSC_VER

ImageDataParameter::ImageDataParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.ImageDataParameter)
}

void ImageDataParameter::InitAsDefaultInstance() {
}

ImageDataParameter::ImageDataParameter(const ImageDataParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.ImageDataParameter)
}

void ImageDataParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageDataParameter::~ImageDataParameter() {
  // @@protoc_insertion_point(destructor:svaf.ImageDataParameter)
  SharedDtor();
}

void ImageDataParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImageDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageDataParameter_descriptor_;
}

const ImageDataParameter& ImageDataParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

ImageDataParameter* ImageDataParameter::default_instance_ = NULL;

ImageDataParameter* ImageDataParameter::New() const {
  return new ImageDataParameter;
}

void ImageDataParameter::Clear() {
  name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.ImageDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string name = 1;
      case 1: {
        if (tag == 10) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name(this->name_size() - 1).data(),
            this->name(this->name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_name;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.ImageDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.ImageDataParameter)
  return false;
#undef DO_
}

void ImageDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.ImageDataParameter)
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.ImageDataParameter)
}

::google::protobuf::uint8* ImageDataParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.ImageDataParameter)
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.ImageDataParameter)
  return target;
}

int ImageDataParameter::ByteSize() const {
  int total_size = 0;

  // repeated string name = 1;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageDataParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageDataParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageDataParameter::MergeFrom(const ImageDataParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageDataParameter::CopyFrom(const ImageDataParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageDataParameter::IsInitialized() const {

  return true;
}

void ImageDataParameter::Swap(ImageDataParameter* other) {
  if (other != this) {
    name_.Swap(&other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageDataParameter_descriptor_;
  metadata.reflection = ImageDataParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BinocularPair::kLeftFieldNumber;
const int BinocularPair::kRightFieldNumber;
#endif  // !_MSC_VER

BinocularPair::BinocularPair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.BinocularPair)
}

void BinocularPair::InitAsDefaultInstance() {
}

BinocularPair::BinocularPair(const BinocularPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.BinocularPair)
}

void BinocularPair::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  left_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinocularPair::~BinocularPair() {
  // @@protoc_insertion_point(destructor:svaf.BinocularPair)
  SharedDtor();
}

void BinocularPair::SharedDtor() {
  if (left_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete left_;
  }
  if (right_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete right_;
  }
  if (this != default_instance_) {
  }
}

void BinocularPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinocularPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinocularPair_descriptor_;
}

const BinocularPair& BinocularPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

BinocularPair* BinocularPair::default_instance_ = NULL;

BinocularPair* BinocularPair::New() const {
  return new BinocularPair;
}

void BinocularPair::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_left()) {
      if (left_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        left_->clear();
      }
    }
    if (has_right()) {
      if (right_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        right_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinocularPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.BinocularPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string left = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_left()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->left().data(), this->left().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "left");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_right;
        break;
      }

      // optional string right = 2;
      case 2: {
        if (tag == 18) {
         parse_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_right()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->right().data(), this->right().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "right");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.BinocularPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.BinocularPair)
  return false;
#undef DO_
}

void BinocularPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.BinocularPair)
  // optional string left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->left().data(), this->left().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "left");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->left(), output);
  }

  // optional string right = 2;
  if (has_right()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->right().data(), this->right().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "right");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->right(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.BinocularPair)
}

::google::protobuf::uint8* BinocularPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.BinocularPair)
  // optional string left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->left().data(), this->left().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "left");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->left(), target);
  }

  // optional string right = 2;
  if (has_right()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->right().data(), this->right().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "right");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->right(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.BinocularPair)
  return target;
}

int BinocularPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string left = 1;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->left());
    }

    // optional string right = 2;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->right());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinocularPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinocularPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinocularPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinocularPair::MergeFrom(const BinocularPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinocularPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinocularPair::CopyFrom(const BinocularPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinocularPair::IsInitialized() const {

  return true;
}

void BinocularPair::Swap(BinocularPair* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BinocularPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinocularPair_descriptor_;
  metadata.reflection = BinocularPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImagePairParameter::kPairFieldNumber;
const int ImagePairParameter::kPairFieldNumber_255;
#endif  // !_MSC_VER

ImagePairParameter::ImagePairParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.ImagePairParameter)
}

void ImagePairParameter::InitAsDefaultInstance() {
}

ImagePairParameter::ImagePairParameter(const ImagePairParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.ImagePairParameter)
}

void ImagePairParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImagePairParameter::~ImagePairParameter() {
  // @@protoc_insertion_point(destructor:svaf.ImagePairParameter)
  SharedDtor();
}

void ImagePairParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImagePairParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImagePairParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImagePairParameter_descriptor_;
}

const ImagePairParameter& ImagePairParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

ImagePairParameter* ImagePairParameter::default_instance_ = NULL;

ImagePairParameter* ImagePairParameter::New() const {
  return new ImagePairParameter;
}

void ImagePairParameter::Clear() {
  pair_.Clear();
  _pair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImagePairParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.ImagePairParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .svaf.BinocularPair pair = 1;
      case 1: {
        if (tag == 10) {
         parse_pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pair()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_pair;
        if (input->ExpectTag(2042)) goto parse__pair;
        break;
      }

      // repeated .svaf.BinocularPair _pair = 255;
      case 255: {
        if (tag == 2042) {
         parse__pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__pair()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2042)) goto parse__pair;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.ImagePairParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.ImagePairParameter)
  return false;
#undef DO_
}

void ImagePairParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.ImagePairParameter)
  // repeated .svaf.BinocularPair pair = 1;
  for (int i = 0; i < this->pair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pair(i), output);
  }

  // repeated .svaf.BinocularPair _pair = 255;
  for (int i = 0; i < this->_pair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      255, this->_pair(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.ImagePairParameter)
}

::google::protobuf::uint8* ImagePairParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.ImagePairParameter)
  // repeated .svaf.BinocularPair pair = 1;
  for (int i = 0; i < this->pair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pair(i), target);
  }

  // repeated .svaf.BinocularPair _pair = 255;
  for (int i = 0; i < this->_pair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        255, this->_pair(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.ImagePairParameter)
  return target;
}

int ImagePairParameter::ByteSize() const {
  int total_size = 0;

  // repeated .svaf.BinocularPair pair = 1;
  total_size += 1 * this->pair_size();
  for (int i = 0; i < this->pair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pair(i));
  }

  // repeated .svaf.BinocularPair _pair = 255;
  total_size += 2 * this->_pair_size();
  for (int i = 0; i < this->_pair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_pair(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImagePairParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImagePairParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImagePairParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImagePairParameter::MergeFrom(const ImagePairParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  pair_.MergeFrom(from.pair_);
  _pair_.MergeFrom(from._pair_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImagePairParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImagePairParameter::CopyFrom(const ImagePairParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImagePairParameter::IsInitialized() const {

  return true;
}

void ImagePairParameter::Swap(ImagePairParameter* other) {
  if (other != this) {
    pair_.Swap(&other->pair_);
    _pair_.Swap(&other->_pair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImagePairParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImagePairParameter_descriptor_;
  metadata.reflection = ImagePairParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoDataParameter::kNameFieldNumber;
#endif  // !_MSC_VER

VideoDataParameter::VideoDataParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.VideoDataParameter)
}

void VideoDataParameter::InitAsDefaultInstance() {
}

VideoDataParameter::VideoDataParameter(const VideoDataParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.VideoDataParameter)
}

void VideoDataParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoDataParameter::~VideoDataParameter() {
  // @@protoc_insertion_point(destructor:svaf.VideoDataParameter)
  SharedDtor();
}

void VideoDataParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VideoDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoDataParameter_descriptor_;
}

const VideoDataParameter& VideoDataParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

VideoDataParameter* VideoDataParameter::default_instance_ = NULL;

VideoDataParameter* VideoDataParameter::New() const {
  return new VideoDataParameter;
}

void VideoDataParameter::Clear() {
  name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.VideoDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string name = 1;
      case 1: {
        if (tag == 10) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name(this->name_size() - 1).data(),
            this->name(this->name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_name;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.VideoDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.VideoDataParameter)
  return false;
#undef DO_
}

void VideoDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.VideoDataParameter)
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.VideoDataParameter)
}

::google::protobuf::uint8* VideoDataParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.VideoDataParameter)
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.VideoDataParameter)
  return target;
}

int VideoDataParameter::ByteSize() const {
  int total_size = 0;

  // repeated string name = 1;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoDataParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoDataParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoDataParameter::MergeFrom(const VideoDataParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoDataParameter::CopyFrom(const VideoDataParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoDataParameter::IsInitialized() const {

  return true;
}

void VideoDataParameter::Swap(VideoDataParameter* other) {
  if (other != this) {
    name_.Swap(&other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoDataParameter_descriptor_;
  metadata.reflection = VideoDataParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoPairParameter::kPairFieldNumber;
const int VideoPairParameter::kPairFieldNumber_255;
#endif  // !_MSC_VER

VideoPairParameter::VideoPairParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.VideoPairParameter)
}

void VideoPairParameter::InitAsDefaultInstance() {
}

VideoPairParameter::VideoPairParameter(const VideoPairParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.VideoPairParameter)
}

void VideoPairParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoPairParameter::~VideoPairParameter() {
  // @@protoc_insertion_point(destructor:svaf.VideoPairParameter)
  SharedDtor();
}

void VideoPairParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VideoPairParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoPairParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoPairParameter_descriptor_;
}

const VideoPairParameter& VideoPairParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

VideoPairParameter* VideoPairParameter::default_instance_ = NULL;

VideoPairParameter* VideoPairParameter::New() const {
  return new VideoPairParameter;
}

void VideoPairParameter::Clear() {
  pair_.Clear();
  _pair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoPairParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.VideoPairParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .svaf.BinocularPair pair = 1;
      case 1: {
        if (tag == 10) {
         parse_pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pair()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_pair;
        if (input->ExpectTag(2042)) goto parse__pair;
        break;
      }

      // repeated .svaf.BinocularPair _pair = 255;
      case 255: {
        if (tag == 2042) {
         parse__pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__pair()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2042)) goto parse__pair;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.VideoPairParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.VideoPairParameter)
  return false;
#undef DO_
}

void VideoPairParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.VideoPairParameter)
  // repeated .svaf.BinocularPair pair = 1;
  for (int i = 0; i < this->pair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pair(i), output);
  }

  // repeated .svaf.BinocularPair _pair = 255;
  for (int i = 0; i < this->_pair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      255, this->_pair(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.VideoPairParameter)
}

::google::protobuf::uint8* VideoPairParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.VideoPairParameter)
  // repeated .svaf.BinocularPair pair = 1;
  for (int i = 0; i < this->pair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pair(i), target);
  }

  // repeated .svaf.BinocularPair _pair = 255;
  for (int i = 0; i < this->_pair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        255, this->_pair(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.VideoPairParameter)
  return target;
}

int VideoPairParameter::ByteSize() const {
  int total_size = 0;

  // repeated .svaf.BinocularPair pair = 1;
  total_size += 1 * this->pair_size();
  for (int i = 0; i < this->pair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pair(i));
  }

  // repeated .svaf.BinocularPair _pair = 255;
  total_size += 2 * this->_pair_size();
  for (int i = 0; i < this->_pair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_pair(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoPairParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoPairParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoPairParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoPairParameter::MergeFrom(const VideoPairParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  pair_.MergeFrom(from.pair_);
  _pair_.MergeFrom(from._pair_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoPairParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoPairParameter::CopyFrom(const VideoPairParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoPairParameter::IsInitialized() const {

  return true;
}

void VideoPairParameter::Swap(VideoPairParameter* other) {
  if (other != this) {
    pair_.Swap(&other->pair_);
    _pair_.Swap(&other->_pair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoPairParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoPairParameter_descriptor_;
  metadata.reflection = VideoPairParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraDataParameter::kCamereFieldNumber;
#endif  // !_MSC_VER

CameraDataParameter::CameraDataParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.CameraDataParameter)
}

void CameraDataParameter::InitAsDefaultInstance() {
}

CameraDataParameter::CameraDataParameter(const CameraDataParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.CameraDataParameter)
}

void CameraDataParameter::SharedCtor() {
  _cached_size_ = 0;
  camere_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraDataParameter::~CameraDataParameter() {
  // @@protoc_insertion_point(destructor:svaf.CameraDataParameter)
  SharedDtor();
}

void CameraDataParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraDataParameter_descriptor_;
}

const CameraDataParameter& CameraDataParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

CameraDataParameter* CameraDataParameter::default_instance_ = NULL;

CameraDataParameter* CameraDataParameter::New() const {
  return new CameraDataParameter;
}

void CameraDataParameter::Clear() {
  camere_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.CameraDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 camere = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &camere_)));
          set_has_camere();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.CameraDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.CameraDataParameter)
  return false;
#undef DO_
}

void CameraDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.CameraDataParameter)
  // optional int64 camere = 1;
  if (has_camere()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->camere(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.CameraDataParameter)
}

::google::protobuf::uint8* CameraDataParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.CameraDataParameter)
  // optional int64 camere = 1;
  if (has_camere()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->camere(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.CameraDataParameter)
  return target;
}

int CameraDataParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 camere = 1;
    if (has_camere()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->camere());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraDataParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraDataParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraDataParameter::MergeFrom(const CameraDataParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camere()) {
      set_camere(from.camere());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraDataParameter::CopyFrom(const CameraDataParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraDataParameter::IsInitialized() const {

  return true;
}

void CameraDataParameter::Swap(CameraDataParameter* other) {
  if (other != this) {
    std::swap(camere_, other->camere_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraDataParameter_descriptor_;
  metadata.reflection = CameraDataParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraPairParameter::kLeftcameraFieldNumber;
const int CameraPairParameter::kRightcameraFieldNumber;
#endif  // !_MSC_VER

CameraPairParameter::CameraPairParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.CameraPairParameter)
}

void CameraPairParameter::InitAsDefaultInstance() {
}

CameraPairParameter::CameraPairParameter(const CameraPairParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.CameraPairParameter)
}

void CameraPairParameter::SharedCtor() {
  _cached_size_ = 0;
  leftcamera_ = GOOGLE_LONGLONG(0);
  rightcamera_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraPairParameter::~CameraPairParameter() {
  // @@protoc_insertion_point(destructor:svaf.CameraPairParameter)
  SharedDtor();
}

void CameraPairParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraPairParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraPairParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraPairParameter_descriptor_;
}

const CameraPairParameter& CameraPairParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

CameraPairParameter* CameraPairParameter::default_instance_ = NULL;

CameraPairParameter* CameraPairParameter::New() const {
  return new CameraPairParameter;
}

void CameraPairParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CameraPairParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(leftcamera_, rightcamera_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraPairParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.CameraPairParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 leftcamera = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leftcamera_)));
          set_has_leftcamera();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rightcamera;
        break;
      }

      // optional int64 rightcamera = 2;
      case 2: {
        if (tag == 16) {
         parse_rightcamera:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rightcamera_)));
          set_has_rightcamera();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.CameraPairParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.CameraPairParameter)
  return false;
#undef DO_
}

void CameraPairParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.CameraPairParameter)
  // optional int64 leftcamera = 1;
  if (has_leftcamera()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->leftcamera(), output);
  }

  // optional int64 rightcamera = 2;
  if (has_rightcamera()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->rightcamera(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.CameraPairParameter)
}

::google::protobuf::uint8* CameraPairParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.CameraPairParameter)
  // optional int64 leftcamera = 1;
  if (has_leftcamera()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->leftcamera(), target);
  }

  // optional int64 rightcamera = 2;
  if (has_rightcamera()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->rightcamera(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.CameraPairParameter)
  return target;
}

int CameraPairParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 leftcamera = 1;
    if (has_leftcamera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leftcamera());
    }

    // optional int64 rightcamera = 2;
    if (has_rightcamera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rightcamera());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraPairParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraPairParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraPairParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraPairParameter::MergeFrom(const CameraPairParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leftcamera()) {
      set_leftcamera(from.leftcamera());
    }
    if (from.has_rightcamera()) {
      set_rightcamera(from.rightcamera());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraPairParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraPairParameter::CopyFrom(const CameraPairParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraPairParameter::IsInitialized() const {

  return true;
}

void CameraPairParameter::Swap(CameraPairParameter* other) {
  if (other != this) {
    std::swap(leftcamera_, other->leftcamera_);
    std::swap(rightcamera_, other->rightcamera_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraPairParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraPairParameter_descriptor_;
  metadata.reflection = CameraPairParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DSPCameraDataParameter::kChnsFieldNumber;
#endif  // !_MSC_VER

DSPCameraDataParameter::DSPCameraDataParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.DSPCameraDataParameter)
}

void DSPCameraDataParameter::InitAsDefaultInstance() {
}

DSPCameraDataParameter::DSPCameraDataParameter(const DSPCameraDataParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.DSPCameraDataParameter)
}

void DSPCameraDataParameter::SharedCtor() {
  _cached_size_ = 0;
  chns_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DSPCameraDataParameter::~DSPCameraDataParameter() {
  // @@protoc_insertion_point(destructor:svaf.DSPCameraDataParameter)
  SharedDtor();
}

void DSPCameraDataParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DSPCameraDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DSPCameraDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DSPCameraDataParameter_descriptor_;
}

const DSPCameraDataParameter& DSPCameraDataParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

DSPCameraDataParameter* DSPCameraDataParameter::default_instance_ = NULL;

DSPCameraDataParameter* DSPCameraDataParameter::New() const {
  return new DSPCameraDataParameter;
}

void DSPCameraDataParameter::Clear() {
  chns_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DSPCameraDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.DSPCameraDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chns = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chns_)));
          set_has_chns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.DSPCameraDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.DSPCameraDataParameter)
  return false;
#undef DO_
}

void DSPCameraDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.DSPCameraDataParameter)
  // optional int32 chns = 1;
  if (has_chns()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chns(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.DSPCameraDataParameter)
}

::google::protobuf::uint8* DSPCameraDataParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.DSPCameraDataParameter)
  // optional int32 chns = 1;
  if (has_chns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chns(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.DSPCameraDataParameter)
  return target;
}

int DSPCameraDataParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chns = 1;
    if (has_chns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chns());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DSPCameraDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DSPCameraDataParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DSPCameraDataParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DSPCameraDataParameter::MergeFrom(const DSPCameraDataParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chns()) {
      set_chns(from.chns());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DSPCameraDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DSPCameraDataParameter::CopyFrom(const DSPCameraDataParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DSPCameraDataParameter::IsInitialized() const {

  return true;
}

void DSPCameraDataParameter::Swap(DSPCameraDataParameter* other) {
  if (other != this) {
    std::swap(chns_, other->chns_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DSPCameraDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DSPCameraDataParameter_descriptor_;
  metadata.reflection = DSPCameraDataParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DSPCameraPairParameter::kChnsFieldNumber;
#endif  // !_MSC_VER

DSPCameraPairParameter::DSPCameraPairParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.DSPCameraPairParameter)
}

void DSPCameraPairParameter::InitAsDefaultInstance() {
}

DSPCameraPairParameter::DSPCameraPairParameter(const DSPCameraPairParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.DSPCameraPairParameter)
}

void DSPCameraPairParameter::SharedCtor() {
  _cached_size_ = 0;
  chns_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DSPCameraPairParameter::~DSPCameraPairParameter() {
  // @@protoc_insertion_point(destructor:svaf.DSPCameraPairParameter)
  SharedDtor();
}

void DSPCameraPairParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DSPCameraPairParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DSPCameraPairParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DSPCameraPairParameter_descriptor_;
}

const DSPCameraPairParameter& DSPCameraPairParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

DSPCameraPairParameter* DSPCameraPairParameter::default_instance_ = NULL;

DSPCameraPairParameter* DSPCameraPairParameter::New() const {
  return new DSPCameraPairParameter;
}

void DSPCameraPairParameter::Clear() {
  chns_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DSPCameraPairParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.DSPCameraPairParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chns = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chns_)));
          set_has_chns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.DSPCameraPairParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.DSPCameraPairParameter)
  return false;
#undef DO_
}

void DSPCameraPairParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.DSPCameraPairParameter)
  // optional int32 chns = 1;
  if (has_chns()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chns(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.DSPCameraPairParameter)
}

::google::protobuf::uint8* DSPCameraPairParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.DSPCameraPairParameter)
  // optional int32 chns = 1;
  if (has_chns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chns(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.DSPCameraPairParameter)
  return target;
}

int DSPCameraPairParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chns = 1;
    if (has_chns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chns());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DSPCameraPairParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DSPCameraPairParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DSPCameraPairParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DSPCameraPairParameter::MergeFrom(const DSPCameraPairParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chns()) {
      set_chns(from.chns());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DSPCameraPairParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DSPCameraPairParameter::CopyFrom(const DSPCameraPairParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DSPCameraPairParameter::IsInitialized() const {

  return true;
}

void DSPCameraPairParameter::Swap(DSPCameraPairParameter* other) {
  if (other != this) {
    std::swap(chns_, other->chns_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DSPCameraPairParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DSPCameraPairParameter_descriptor_;
  metadata.reflection = DSPCameraPairParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

KinectDataParameter::KinectDataParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.KinectDataParameter)
}

void KinectDataParameter::InitAsDefaultInstance() {
}

KinectDataParameter::KinectDataParameter(const KinectDataParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.KinectDataParameter)
}

void KinectDataParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KinectDataParameter::~KinectDataParameter() {
  // @@protoc_insertion_point(destructor:svaf.KinectDataParameter)
  SharedDtor();
}

void KinectDataParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KinectDataParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KinectDataParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KinectDataParameter_descriptor_;
}

const KinectDataParameter& KinectDataParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

KinectDataParameter* KinectDataParameter::default_instance_ = NULL;

KinectDataParameter* KinectDataParameter::New() const {
  return new KinectDataParameter;
}

void KinectDataParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KinectDataParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.KinectDataParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.KinectDataParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.KinectDataParameter)
  return false;
#undef DO_
}

void KinectDataParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.KinectDataParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.KinectDataParameter)
}

::google::protobuf::uint8* KinectDataParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.KinectDataParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.KinectDataParameter)
  return target;
}

int KinectDataParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KinectDataParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KinectDataParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KinectDataParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KinectDataParameter::MergeFrom(const KinectDataParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KinectDataParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KinectDataParameter::CopyFrom(const KinectDataParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KinectDataParameter::IsInitialized() const {

  return true;
}

void KinectDataParameter::Swap(KinectDataParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KinectDataParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KinectDataParameter_descriptor_;
  metadata.reflection = KinectDataParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImageFolderParameter::kNameFieldNumber;
#endif  // !_MSC_VER

ImageFolderParameter::ImageFolderParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.ImageFolderParameter)
}

void ImageFolderParameter::InitAsDefaultInstance() {
}

ImageFolderParameter::ImageFolderParameter(const ImageFolderParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.ImageFolderParameter)
}

void ImageFolderParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageFolderParameter::~ImageFolderParameter() {
  // @@protoc_insertion_point(destructor:svaf.ImageFolderParameter)
  SharedDtor();
}

void ImageFolderParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImageFolderParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageFolderParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageFolderParameter_descriptor_;
}

const ImageFolderParameter& ImageFolderParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

ImageFolderParameter* ImageFolderParameter::default_instance_ = NULL;

ImageFolderParameter* ImageFolderParameter::New() const {
  return new ImageFolderParameter;
}

void ImageFolderParameter::Clear() {
  name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImageFolderParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.ImageFolderParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string name = 1;
      case 1: {
        if (tag == 10) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name(this->name_size() - 1).data(),
            this->name(this->name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_name;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.ImageFolderParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.ImageFolderParameter)
  return false;
#undef DO_
}

void ImageFolderParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.ImageFolderParameter)
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.ImageFolderParameter)
}

::google::protobuf::uint8* ImageFolderParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.ImageFolderParameter)
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.ImageFolderParameter)
  return target;
}

int ImageFolderParameter::ByteSize() const {
  int total_size = 0;

  // repeated string name = 1;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageFolderParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImageFolderParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImageFolderParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImageFolderParameter::MergeFrom(const ImageFolderParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImageFolderParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageFolderParameter::CopyFrom(const ImageFolderParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageFolderParameter::IsInitialized() const {

  return true;
}

void ImageFolderParameter::Swap(ImageFolderParameter* other) {
  if (other != this) {
    name_.Swap(&other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImageFolderParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageFolderParameter_descriptor_;
  metadata.reflection = ImageFolderParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ImagePairFolderParameter::kPairFieldNumber;
const int ImagePairFolderParameter::kPairFieldNumber_255;
#endif  // !_MSC_VER

ImagePairFolderParameter::ImagePairFolderParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.ImagePairFolderParameter)
}

void ImagePairFolderParameter::InitAsDefaultInstance() {
}

ImagePairFolderParameter::ImagePairFolderParameter(const ImagePairFolderParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.ImagePairFolderParameter)
}

void ImagePairFolderParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImagePairFolderParameter::~ImagePairFolderParameter() {
  // @@protoc_insertion_point(destructor:svaf.ImagePairFolderParameter)
  SharedDtor();
}

void ImagePairFolderParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImagePairFolderParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImagePairFolderParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImagePairFolderParameter_descriptor_;
}

const ImagePairFolderParameter& ImagePairFolderParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

ImagePairFolderParameter* ImagePairFolderParameter::default_instance_ = NULL;

ImagePairFolderParameter* ImagePairFolderParameter::New() const {
  return new ImagePairFolderParameter;
}

void ImagePairFolderParameter::Clear() {
  pair_.Clear();
  _pair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ImagePairFolderParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.ImagePairFolderParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .svaf.BinocularPair pair = 1;
      case 1: {
        if (tag == 10) {
         parse_pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pair()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_pair;
        if (input->ExpectTag(2042)) goto parse__pair;
        break;
      }

      // repeated .svaf.BinocularPair _pair = 255;
      case 255: {
        if (tag == 2042) {
         parse__pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add__pair()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2042)) goto parse__pair;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.ImagePairFolderParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.ImagePairFolderParameter)
  return false;
#undef DO_
}

void ImagePairFolderParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.ImagePairFolderParameter)
  // repeated .svaf.BinocularPair pair = 1;
  for (int i = 0; i < this->pair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pair(i), output);
  }

  // repeated .svaf.BinocularPair _pair = 255;
  for (int i = 0; i < this->_pair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      255, this->_pair(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.ImagePairFolderParameter)
}

::google::protobuf::uint8* ImagePairFolderParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.ImagePairFolderParameter)
  // repeated .svaf.BinocularPair pair = 1;
  for (int i = 0; i < this->pair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pair(i), target);
  }

  // repeated .svaf.BinocularPair _pair = 255;
  for (int i = 0; i < this->_pair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        255, this->_pair(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.ImagePairFolderParameter)
  return target;
}

int ImagePairFolderParameter::ByteSize() const {
  int total_size = 0;

  // repeated .svaf.BinocularPair pair = 1;
  total_size += 1 * this->pair_size();
  for (int i = 0; i < this->pair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pair(i));
  }

  // repeated .svaf.BinocularPair _pair = 255;
  total_size += 2 * this->_pair_size();
  for (int i = 0; i < this->_pair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->_pair(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImagePairFolderParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ImagePairFolderParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ImagePairFolderParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ImagePairFolderParameter::MergeFrom(const ImagePairFolderParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  pair_.MergeFrom(from.pair_);
  _pair_.MergeFrom(from._pair_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ImagePairFolderParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImagePairFolderParameter::CopyFrom(const ImagePairFolderParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImagePairFolderParameter::IsInitialized() const {

  return true;
}

void ImagePairFolderParameter::Swap(ImagePairFolderParameter* other) {
  if (other != this) {
    pair_.Swap(&other->pair_);
    _pair_.Swap(&other->_pair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ImagePairFolderParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImagePairFolderParameter_descriptor_;
  metadata.reflection = ImagePairFolderParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RecognizeParameter::RecognizeParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.RecognizeParameter)
}

void RecognizeParameter::InitAsDefaultInstance() {
}

RecognizeParameter::RecognizeParameter(const RecognizeParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.RecognizeParameter)
}

void RecognizeParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecognizeParameter::~RecognizeParameter() {
  // @@protoc_insertion_point(destructor:svaf.RecognizeParameter)
  SharedDtor();
}

void RecognizeParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecognizeParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecognizeParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecognizeParameter_descriptor_;
}

const RecognizeParameter& RecognizeParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

RecognizeParameter* RecognizeParameter::default_instance_ = NULL;

RecognizeParameter* RecognizeParameter::New() const {
  return new RecognizeParameter;
}

void RecognizeParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecognizeParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.RecognizeParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.RecognizeParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.RecognizeParameter)
  return false;
#undef DO_
}

void RecognizeParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.RecognizeParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.RecognizeParameter)
}

::google::protobuf::uint8* RecognizeParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.RecognizeParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.RecognizeParameter)
  return target;
}

int RecognizeParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecognizeParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecognizeParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecognizeParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecognizeParameter::MergeFrom(const RecognizeParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecognizeParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecognizeParameter::CopyFrom(const RecognizeParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecognizeParameter::IsInitialized() const {

  return true;
}

void RecognizeParameter::Swap(RecognizeParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecognizeParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecognizeParameter_descriptor_;
  metadata.reflection = RecognizeParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ROIExtention::kLeftFieldNumber;
const int ROIExtention::kRightFieldNumber;
const int ROIExtention::kTopFieldNumber;
const int ROIExtention::kBottomFieldNumber;
const int ROIExtention::kXshiftFieldNumber;
#endif  // !_MSC_VER

ROIExtention::ROIExtention()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.ROIExtention)
}

void ROIExtention::InitAsDefaultInstance() {
}

ROIExtention::ROIExtention(const ROIExtention& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.ROIExtention)
}

void ROIExtention::SharedCtor() {
  _cached_size_ = 0;
  left_ = 0;
  right_ = 0;
  top_ = 0;
  bottom_ = 0;
  xshift_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ROIExtention::~ROIExtention() {
  // @@protoc_insertion_point(destructor:svaf.ROIExtention)
  SharedDtor();
}

void ROIExtention::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ROIExtention::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROIExtention::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROIExtention_descriptor_;
}

const ROIExtention& ROIExtention::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

ROIExtention* ROIExtention::default_instance_ = NULL;

ROIExtention* ROIExtention::New() const {
  return new ROIExtention;
}

void ROIExtention::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ROIExtention*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(left_, xshift_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ROIExtention::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.ROIExtention)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 left = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_right;
        break;
      }

      // optional int32 right = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_top;
        break;
      }

      // optional int32 top = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_)));
          set_has_top();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bottom;
        break;
      }

      // optional int32 bottom = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_bottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bottom_)));
          set_has_bottom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_xshift;
        break;
      }

      // optional int32 xshift = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_xshift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xshift_)));
          set_has_xshift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.ROIExtention)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.ROIExtention)
  return false;
#undef DO_
}

void ROIExtention::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.ROIExtention)
  // optional int32 left = 1 [default = 0];
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->left(), output);
  }

  // optional int32 right = 2 [default = 0];
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->right(), output);
  }

  // optional int32 top = 3 [default = 0];
  if (has_top()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->top(), output);
  }

  // optional int32 bottom = 4 [default = 0];
  if (has_bottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bottom(), output);
  }

  // optional int32 xshift = 5 [default = 0];
  if (has_xshift()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->xshift(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.ROIExtention)
}

::google::protobuf::uint8* ROIExtention::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.ROIExtention)
  // optional int32 left = 1 [default = 0];
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->left(), target);
  }

  // optional int32 right = 2 [default = 0];
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->right(), target);
  }

  // optional int32 top = 3 [default = 0];
  if (has_top()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->top(), target);
  }

  // optional int32 bottom = 4 [default = 0];
  if (has_bottom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bottom(), target);
  }

  // optional int32 xshift = 5 [default = 0];
  if (has_xshift()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->xshift(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.ROIExtention)
  return target;
}

int ROIExtention::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 left = 1 [default = 0];
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left());
    }

    // optional int32 right = 2 [default = 0];
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right());
    }

    // optional int32 top = 3 [default = 0];
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top());
    }

    // optional int32 bottom = 4 [default = 0];
    if (has_bottom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bottom());
    }

    // optional int32 xshift = 5 [default = 0];
    if (has_xshift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xshift());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROIExtention::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ROIExtention* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ROIExtention*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ROIExtention::MergeFrom(const ROIExtention& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
    if (from.has_xshift()) {
      set_xshift(from.xshift());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ROIExtention::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROIExtention::CopyFrom(const ROIExtention& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROIExtention::IsInitialized() const {

  return true;
}

void ROIExtention::Swap(ROIExtention* other) {
  if (other != this) {
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(top_, other->top_);
    std::swap(bottom_, other->bottom_);
    std::swap(xshift_, other->xshift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ROIExtention::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ROIExtention_descriptor_;
  metadata.reflection = ROIExtention_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdaboostParameter::kDetectorFieldNumber;
const int AdaboostParameter::kSyncFrameFieldNumber;
const int AdaboostParameter::kSyncVideoFieldNumber;
const int AdaboostParameter::kSyncEpipolarFieldNumber;
const int AdaboostParameter::kThreshFieldNumber;
const int AdaboostParameter::kNmsFieldNumber;
const int AdaboostParameter::kPadRectFieldNumber;
#endif  // !_MSC_VER

AdaboostParameter::AdaboostParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.AdaboostParameter)
}

void AdaboostParameter::InitAsDefaultInstance() {
  pad_rect_ = const_cast< ::svaf::ROIExtention*>(&::svaf::ROIExtention::default_instance());
}

AdaboostParameter::AdaboostParameter(const AdaboostParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.AdaboostParameter)
}

void AdaboostParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  detector_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sync_frame_ = false;
  sync_video_ = false;
  sync_epipolar_ = false;
  thresh_ = 0;
  nms_ = 0.65f;
  pad_rect_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdaboostParameter::~AdaboostParameter() {
  // @@protoc_insertion_point(destructor:svaf.AdaboostParameter)
  SharedDtor();
}

void AdaboostParameter::SharedDtor() {
  if (detector_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete detector_;
  }
  if (this != default_instance_) {
    delete pad_rect_;
  }
}

void AdaboostParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdaboostParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdaboostParameter_descriptor_;
}

const AdaboostParameter& AdaboostParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

AdaboostParameter* AdaboostParameter::default_instance_ = NULL;

AdaboostParameter* AdaboostParameter::New() const {
  return new AdaboostParameter;
}

void AdaboostParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AdaboostParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(sync_frame_, thresh_);
    if (has_detector()) {
      if (detector_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        detector_->clear();
      }
    }
    nms_ = 0.65f;
    if (has_pad_rect()) {
      if (pad_rect_ != NULL) pad_rect_->::svaf::ROIExtention::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdaboostParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.AdaboostParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string detector = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_detector()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->detector().data(), this->detector().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "detector");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sync_frame;
        break;
      }

      // optional bool sync_frame = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_sync_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_frame_)));
          set_has_sync_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sync_video;
        break;
      }

      // optional bool sync_video = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_sync_video:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_video_)));
          set_has_sync_video();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sync_epipolar;
        break;
      }

      // optional bool sync_epipolar = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_sync_epipolar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_epipolar_)));
          set_has_sync_epipolar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_thresh;
        break;
      }

      // optional float thresh = 5 [default = 0];
      case 5: {
        if (tag == 45) {
         parse_thresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thresh_)));
          set_has_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_nms;
        break;
      }

      // optional float nms = 6 [default = 0.65];
      case 6: {
        if (tag == 53) {
         parse_nms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nms_)));
          set_has_nms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pad_rect;
        break;
      }

      // optional .svaf.ROIExtention pad_rect = 7;
      case 7: {
        if (tag == 58) {
         parse_pad_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pad_rect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.AdaboostParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.AdaboostParameter)
  return false;
#undef DO_
}

void AdaboostParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.AdaboostParameter)
  // optional string detector = 1;
  if (has_detector()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detector().data(), this->detector().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "detector");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->detector(), output);
  }

  // optional bool sync_frame = 2 [default = false];
  if (has_sync_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->sync_frame(), output);
  }

  // optional bool sync_video = 3 [default = false];
  if (has_sync_video()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->sync_video(), output);
  }

  // optional bool sync_epipolar = 4 [default = false];
  if (has_sync_epipolar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->sync_epipolar(), output);
  }

  // optional float thresh = 5 [default = 0];
  if (has_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->thresh(), output);
  }

  // optional float nms = 6 [default = 0.65];
  if (has_nms()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->nms(), output);
  }

  // optional .svaf.ROIExtention pad_rect = 7;
  if (has_pad_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pad_rect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.AdaboostParameter)
}

::google::protobuf::uint8* AdaboostParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.AdaboostParameter)
  // optional string detector = 1;
  if (has_detector()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->detector().data(), this->detector().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "detector");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->detector(), target);
  }

  // optional bool sync_frame = 2 [default = false];
  if (has_sync_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->sync_frame(), target);
  }

  // optional bool sync_video = 3 [default = false];
  if (has_sync_video()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->sync_video(), target);
  }

  // optional bool sync_epipolar = 4 [default = false];
  if (has_sync_epipolar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->sync_epipolar(), target);
  }

  // optional float thresh = 5 [default = 0];
  if (has_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->thresh(), target);
  }

  // optional float nms = 6 [default = 0.65];
  if (has_nms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->nms(), target);
  }

  // optional .svaf.ROIExtention pad_rect = 7;
  if (has_pad_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pad_rect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.AdaboostParameter)
  return target;
}

int AdaboostParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string detector = 1;
    if (has_detector()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->detector());
    }

    // optional bool sync_frame = 2 [default = false];
    if (has_sync_frame()) {
      total_size += 1 + 1;
    }

    // optional bool sync_video = 3 [default = false];
    if (has_sync_video()) {
      total_size += 1 + 1;
    }

    // optional bool sync_epipolar = 4 [default = false];
    if (has_sync_epipolar()) {
      total_size += 1 + 1;
    }

    // optional float thresh = 5 [default = 0];
    if (has_thresh()) {
      total_size += 1 + 4;
    }

    // optional float nms = 6 [default = 0.65];
    if (has_nms()) {
      total_size += 1 + 4;
    }

    // optional .svaf.ROIExtention pad_rect = 7;
    if (has_pad_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pad_rect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdaboostParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdaboostParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdaboostParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdaboostParameter::MergeFrom(const AdaboostParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_detector()) {
      set_detector(from.detector());
    }
    if (from.has_sync_frame()) {
      set_sync_frame(from.sync_frame());
    }
    if (from.has_sync_video()) {
      set_sync_video(from.sync_video());
    }
    if (from.has_sync_epipolar()) {
      set_sync_epipolar(from.sync_epipolar());
    }
    if (from.has_thresh()) {
      set_thresh(from.thresh());
    }
    if (from.has_nms()) {
      set_nms(from.nms());
    }
    if (from.has_pad_rect()) {
      mutable_pad_rect()->::svaf::ROIExtention::MergeFrom(from.pad_rect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdaboostParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdaboostParameter::CopyFrom(const AdaboostParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdaboostParameter::IsInitialized() const {

  return true;
}

void AdaboostParameter::Swap(AdaboostParameter* other) {
  if (other != this) {
    std::swap(detector_, other->detector_);
    std::swap(sync_frame_, other->sync_frame_);
    std::swap(sync_video_, other->sync_video_);
    std::swap(sync_epipolar_, other->sync_epipolar_);
    std::swap(thresh_, other->thresh_);
    std::swap(nms_, other->nms_);
    std::swap(pad_rect_, other->pad_rect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdaboostParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdaboostParameter_descriptor_;
  metadata.reflection = AdaboostParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TrackParameter::TrackParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.TrackParameter)
}

void TrackParameter::InitAsDefaultInstance() {
}

TrackParameter::TrackParameter(const TrackParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.TrackParameter)
}

void TrackParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackParameter::~TrackParameter() {
  // @@protoc_insertion_point(destructor:svaf.TrackParameter)
  SharedDtor();
}

void TrackParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrackParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackParameter_descriptor_;
}

const TrackParameter& TrackParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

TrackParameter* TrackParameter::default_instance_ = NULL;

TrackParameter* TrackParameter::New() const {
  return new TrackParameter;
}

void TrackParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.TrackParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.TrackParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.TrackParameter)
  return false;
#undef DO_
}

void TrackParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.TrackParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.TrackParameter)
}

::google::protobuf::uint8* TrackParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.TrackParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.TrackParameter)
  return target;
}

int TrackParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackParameter::MergeFrom(const TrackParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackParameter::CopyFrom(const TrackParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackParameter::IsInitialized() const {

  return true;
}

void TrackParameter::Swap(TrackParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackParameter_descriptor_;
  metadata.reflection = TrackParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitRectParameter::kXFieldNumber;
const int InitRectParameter::kYFieldNumber;
const int InitRectParameter::kWidthFieldNumber;
const int InitRectParameter::kHeightFieldNumber;
#endif  // !_MSC_VER

InitRectParameter::InitRectParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.InitRectParameter)
}

void InitRectParameter::InitAsDefaultInstance() {
}

InitRectParameter::InitRectParameter(const InitRectParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.InitRectParameter)
}

void InitRectParameter::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  width_ = 0u;
  height_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitRectParameter::~InitRectParameter() {
  // @@protoc_insertion_point(destructor:svaf.InitRectParameter)
  SharedDtor();
}

void InitRectParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InitRectParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitRectParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitRectParameter_descriptor_;
}

const InitRectParameter& InitRectParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

InitRectParameter* InitRectParameter::default_instance_ = NULL;

InitRectParameter* InitRectParameter::New() const {
  return new InitRectParameter;
}

void InitRectParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InitRectParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, height_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitRectParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.InitRectParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional uint32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // optional uint32 width = 3;
      case 3: {
        if (tag == 24) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // optional uint32 height = 4;
      case 4: {
        if (tag == 32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.InitRectParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.InitRectParameter)
  return false;
#undef DO_
}

void InitRectParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.InitRectParameter)
  // optional uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // optional uint32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width(), output);
  }

  // optional uint32 height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.InitRectParameter)
}

::google::protobuf::uint8* InitRectParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.InitRectParameter)
  // optional uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // optional uint32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width(), target);
  }

  // optional uint32 height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.InitRectParameter)
  return target;
}

int InitRectParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional uint32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitRectParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitRectParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitRectParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitRectParameter::MergeFrom(const InitRectParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitRectParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitRectParameter::CopyFrom(const InitRectParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRectParameter::IsInitialized() const {

  return true;
}

void InitRectParameter::Swap(InitRectParameter* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitRectParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitRectParameter_descriptor_;
  metadata.reflection = InitRectParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MilTrackParameter_InitType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MilTrackParameter_InitType_descriptor_;
}
bool MilTrackParameter_InitType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MilTrackParameter_InitType MilTrackParameter::MOUSE;
const MilTrackParameter_InitType MilTrackParameter::SELECT;
const MilTrackParameter_InitType MilTrackParameter::AUTORECT;
const MilTrackParameter_InitType MilTrackParameter::ADABOOST;
const MilTrackParameter_InitType MilTrackParameter::InitType_MIN;
const MilTrackParameter_InitType MilTrackParameter::InitType_MAX;
const int MilTrackParameter::InitType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MilTrackParameter_TrackType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MilTrackParameter_TrackType_descriptor_;
}
bool MilTrackParameter_TrackType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MilTrackParameter_TrackType MilTrackParameter::MIL;
const MilTrackParameter_TrackType MilTrackParameter::ADA;
const MilTrackParameter_TrackType MilTrackParameter::MIL_GRAY;
const MilTrackParameter_TrackType MilTrackParameter::MIL_RGB;
const MilTrackParameter_TrackType MilTrackParameter::MIL_LUV;
const MilTrackParameter_TrackType MilTrackParameter::MIL_HSV;
const MilTrackParameter_TrackType MilTrackParameter::TrackType_MIN;
const MilTrackParameter_TrackType MilTrackParameter::TrackType_MAX;
const int MilTrackParameter::TrackType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MilTrackParameter::kInitTypeFieldNumber;
const int MilTrackParameter::kTrackTypeFieldNumber;
const int MilTrackParameter::kTrackCountFieldNumber;
const int MilTrackParameter::kInitRectFieldNumber;
const int MilTrackParameter::kTrWidthFieldNumber;
const int MilTrackParameter::kTrHeightFieldNumber;
const int MilTrackParameter::kScalefactorFieldNumber;
const int MilTrackParameter::kInitNegnumFieldNumber;
const int MilTrackParameter::kNegnumFieldNumber;
const int MilTrackParameter::kPosmaxFieldNumber;
const int MilTrackParameter::kSrchwinszFieldNumber;
const int MilTrackParameter::kNegsampleStratFieldNumber;
const int MilTrackParameter::kNumfeatFieldNumber;
const int MilTrackParameter::kNumselFieldNumber;
const int MilTrackParameter::kLrateFieldNumber;
const int MilTrackParameter::kPosradFieldNumber;
const int MilTrackParameter::kInitPosradFieldNumber;
const int MilTrackParameter::kHaarminRectnumFieldNumber;
const int MilTrackParameter::kHaarmaxRectnumFieldNumber;
const int MilTrackParameter::kUselogrFieldNumber;
const int MilTrackParameter::kTssFieldNumber;
const int MilTrackParameter::kPoolFieldNumber;
const int MilTrackParameter::kSyncFieldNumber;
const int MilTrackParameter::kMixfeatFieldNumber;
const int MilTrackParameter::kShowprobFieldNumber;
#endif  // !_MSC_VER

MilTrackParameter::MilTrackParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.MilTrackParameter)
}

void MilTrackParameter::InitAsDefaultInstance() {
}

MilTrackParameter::MilTrackParameter(const MilTrackParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.MilTrackParameter)
}

void MilTrackParameter::SharedCtor() {
  _cached_size_ = 0;
  init_type_ = 3;
  track_type_ = 1;
  track_count_ = 20;
  tr_width_ = 200u;
  tr_height_ = 150u;
  scalefactor_ = 0.5f;
  init_negnum_ = 65u;
  negnum_ = 65u;
  posmax_ = 100000u;
  srchwinsz_ = 25u;
  negsample_strat_ = 1u;
  numfeat_ = 250u;
  numsel_ = 50u;
  lrate_ = 0.85f;
  posrad_ = 1;
  init_posrad_ = 3;
  haarmin_rectnum_ = 2u;
  haarmax_rectnum_ = 6u;
  uselogr_ = true;
  tss_ = false;
  pool_ = false;
  sync_ = false;
  mixfeat_ = false;
  showprob_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MilTrackParameter::~MilTrackParameter() {
  // @@protoc_insertion_point(destructor:svaf.MilTrackParameter)
  SharedDtor();
}

void MilTrackParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MilTrackParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MilTrackParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MilTrackParameter_descriptor_;
}

const MilTrackParameter& MilTrackParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

MilTrackParameter* MilTrackParameter::default_instance_ = NULL;

MilTrackParameter* MilTrackParameter::New() const {
  return new MilTrackParameter;
}

void MilTrackParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MilTrackParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    init_type_ = 3;
    track_type_ = 1;
    track_count_ = 20;
    tr_width_ = 200u;
    tr_height_ = 150u;
    scalefactor_ = 0.5f;
    init_negnum_ = 65u;
  }
  if (_has_bits_[8 / 32] & 65280) {
    negnum_ = 65u;
    posmax_ = 100000u;
    srchwinsz_ = 25u;
    negsample_strat_ = 1u;
    numfeat_ = 250u;
    numsel_ = 50u;
    lrate_ = 0.85f;
    posrad_ = 1;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(tss_, mixfeat_);
    init_posrad_ = 3;
    haarmin_rectnum_ = 2u;
    haarmax_rectnum_ = 6u;
    uselogr_ = true;
  }
  showprob_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  init_rect_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MilTrackParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.MilTrackParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .svaf.MilTrackParameter.InitType init_type = 1 [default = AUTORECT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::svaf::MilTrackParameter_InitType_IsValid(value)) {
            set_init_type(static_cast< ::svaf::MilTrackParameter_InitType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_track_type;
        break;
      }

      // optional .svaf.MilTrackParameter.TrackType track_type = 2 [default = MIL];
      case 2: {
        if (tag == 16) {
         parse_track_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::svaf::MilTrackParameter_TrackType_IsValid(value)) {
            set_track_type(static_cast< ::svaf::MilTrackParameter_TrackType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_track_count;
        break;
      }

      // optional int32 track_count = 3 [default = 20];
      case 3: {
        if (tag == 24) {
         parse_track_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &track_count_)));
          set_has_track_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_init_rect;
        break;
      }

      // repeated .svaf.InitRectParameter init_rect = 4;
      case 4: {
        if (tag == 34) {
         parse_init_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_init_rect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_init_rect;
        if (input->ExpectTag(40)) goto parse_tr_width;
        break;
      }

      // optional uint32 tr_width = 5 [default = 200];
      case 5: {
        if (tag == 40) {
         parse_tr_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tr_width_)));
          set_has_tr_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tr_height;
        break;
      }

      // optional uint32 tr_height = 6 [default = 150];
      case 6: {
        if (tag == 48) {
         parse_tr_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tr_height_)));
          set_has_tr_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_scalefactor;
        break;
      }

      // optional float scalefactor = 7 [default = 0.5];
      case 7: {
        if (tag == 61) {
         parse_scalefactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scalefactor_)));
          set_has_scalefactor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_init_negnum;
        break;
      }

      // optional uint32 init_negnum = 11 [default = 65];
      case 11: {
        if (tag == 88) {
         parse_init_negnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &init_negnum_)));
          set_has_init_negnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_negnum;
        break;
      }

      // optional uint32 negnum = 12 [default = 65];
      case 12: {
        if (tag == 96) {
         parse_negnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &negnum_)));
          set_has_negnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_posmax;
        break;
      }

      // optional uint32 posmax = 13 [default = 100000];
      case 13: {
        if (tag == 104) {
         parse_posmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &posmax_)));
          set_has_posmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_srchwinsz;
        break;
      }

      // optional uint32 srchwinsz = 14 [default = 25];
      case 14: {
        if (tag == 112) {
         parse_srchwinsz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srchwinsz_)));
          set_has_srchwinsz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_negsample_strat;
        break;
      }

      // optional uint32 negsample_strat = 15 [default = 1];
      case 15: {
        if (tag == 120) {
         parse_negsample_strat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &negsample_strat_)));
          set_has_negsample_strat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_numfeat;
        break;
      }

      // optional uint32 numfeat = 16 [default = 250];
      case 16: {
        if (tag == 128) {
         parse_numfeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numfeat_)));
          set_has_numfeat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_numsel;
        break;
      }

      // optional uint32 numsel = 17 [default = 50];
      case 17: {
        if (tag == 136) {
         parse_numsel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numsel_)));
          set_has_numsel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(173)) goto parse_lrate;
        break;
      }

      // optional float lrate = 21 [default = 0.85];
      case 21: {
        if (tag == 173) {
         parse_lrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lrate_)));
          set_has_lrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_posrad;
        break;
      }

      // optional float posrad = 22 [default = 1];
      case 22: {
        if (tag == 181) {
         parse_posrad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &posrad_)));
          set_has_posrad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(189)) goto parse_init_posrad;
        break;
      }

      // optional float init_posrad = 23 [default = 3];
      case 23: {
        if (tag == 189) {
         parse_init_posrad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &init_posrad_)));
          set_has_init_posrad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_haarmin_rectnum;
        break;
      }

      // optional uint32 haarmin_rectnum = 24 [default = 2];
      case 24: {
        if (tag == 192) {
         parse_haarmin_rectnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &haarmin_rectnum_)));
          set_has_haarmin_rectnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_haarmax_rectnum;
        break;
      }

      // optional uint32 haarmax_rectnum = 25 [default = 6];
      case 25: {
        if (tag == 200) {
         parse_haarmax_rectnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &haarmax_rectnum_)));
          set_has_haarmax_rectnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_uselogr;
        break;
      }

      // optional bool uselogr = 29 [default = true];
      case 29: {
        if (tag == 232) {
         parse_uselogr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uselogr_)));
          set_has_uselogr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_tss;
        break;
      }

      // optional bool tss = 31 [default = false];
      case 31: {
        if (tag == 248) {
         parse_tss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tss_)));
          set_has_tss();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_pool;
        break;
      }

      // optional bool pool = 32 [default = false];
      case 32: {
        if (tag == 256) {
         parse_pool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pool_)));
          set_has_pool();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_sync;
        break;
      }

      // optional bool sync = 33 [default = false];
      case 33: {
        if (tag == 264) {
         parse_sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_)));
          set_has_sync();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_mixfeat;
        break;
      }

      // optional bool mixfeat = 34 [default = false];
      case 34: {
        if (tag == 272) {
         parse_mixfeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mixfeat_)));
          set_has_mixfeat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_showprob;
        break;
      }

      // optional bool showprob = 35 [default = false];
      case 35: {
        if (tag == 280) {
         parse_showprob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showprob_)));
          set_has_showprob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.MilTrackParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.MilTrackParameter)
  return false;
#undef DO_
}

void MilTrackParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.MilTrackParameter)
  // optional .svaf.MilTrackParameter.InitType init_type = 1 [default = AUTORECT];
  if (has_init_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->init_type(), output);
  }

  // optional .svaf.MilTrackParameter.TrackType track_type = 2 [default = MIL];
  if (has_track_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->track_type(), output);
  }

  // optional int32 track_count = 3 [default = 20];
  if (has_track_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->track_count(), output);
  }

  // repeated .svaf.InitRectParameter init_rect = 4;
  for (int i = 0; i < this->init_rect_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->init_rect(i), output);
  }

  // optional uint32 tr_width = 5 [default = 200];
  if (has_tr_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tr_width(), output);
  }

  // optional uint32 tr_height = 6 [default = 150];
  if (has_tr_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tr_height(), output);
  }

  // optional float scalefactor = 7 [default = 0.5];
  if (has_scalefactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->scalefactor(), output);
  }

  // optional uint32 init_negnum = 11 [default = 65];
  if (has_init_negnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->init_negnum(), output);
  }

  // optional uint32 negnum = 12 [default = 65];
  if (has_negnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->negnum(), output);
  }

  // optional uint32 posmax = 13 [default = 100000];
  if (has_posmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->posmax(), output);
  }

  // optional uint32 srchwinsz = 14 [default = 25];
  if (has_srchwinsz()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->srchwinsz(), output);
  }

  // optional uint32 negsample_strat = 15 [default = 1];
  if (has_negsample_strat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->negsample_strat(), output);
  }

  // optional uint32 numfeat = 16 [default = 250];
  if (has_numfeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->numfeat(), output);
  }

  // optional uint32 numsel = 17 [default = 50];
  if (has_numsel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->numsel(), output);
  }

  // optional float lrate = 21 [default = 0.85];
  if (has_lrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->lrate(), output);
  }

  // optional float posrad = 22 [default = 1];
  if (has_posrad()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->posrad(), output);
  }

  // optional float init_posrad = 23 [default = 3];
  if (has_init_posrad()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->init_posrad(), output);
  }

  // optional uint32 haarmin_rectnum = 24 [default = 2];
  if (has_haarmin_rectnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->haarmin_rectnum(), output);
  }

  // optional uint32 haarmax_rectnum = 25 [default = 6];
  if (has_haarmax_rectnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->haarmax_rectnum(), output);
  }

  // optional bool uselogr = 29 [default = true];
  if (has_uselogr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->uselogr(), output);
  }

  // optional bool tss = 31 [default = false];
  if (has_tss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->tss(), output);
  }

  // optional bool pool = 32 [default = false];
  if (has_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->pool(), output);
  }

  // optional bool sync = 33 [default = false];
  if (has_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->sync(), output);
  }

  // optional bool mixfeat = 34 [default = false];
  if (has_mixfeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->mixfeat(), output);
  }

  // optional bool showprob = 35 [default = false];
  if (has_showprob()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->showprob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.MilTrackParameter)
}

::google::protobuf::uint8* MilTrackParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.MilTrackParameter)
  // optional .svaf.MilTrackParameter.InitType init_type = 1 [default = AUTORECT];
  if (has_init_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->init_type(), target);
  }

  // optional .svaf.MilTrackParameter.TrackType track_type = 2 [default = MIL];
  if (has_track_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->track_type(), target);
  }

  // optional int32 track_count = 3 [default = 20];
  if (has_track_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->track_count(), target);
  }

  // repeated .svaf.InitRectParameter init_rect = 4;
  for (int i = 0; i < this->init_rect_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->init_rect(i), target);
  }

  // optional uint32 tr_width = 5 [default = 200];
  if (has_tr_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tr_width(), target);
  }

  // optional uint32 tr_height = 6 [default = 150];
  if (has_tr_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tr_height(), target);
  }

  // optional float scalefactor = 7 [default = 0.5];
  if (has_scalefactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->scalefactor(), target);
  }

  // optional uint32 init_negnum = 11 [default = 65];
  if (has_init_negnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->init_negnum(), target);
  }

  // optional uint32 negnum = 12 [default = 65];
  if (has_negnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->negnum(), target);
  }

  // optional uint32 posmax = 13 [default = 100000];
  if (has_posmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->posmax(), target);
  }

  // optional uint32 srchwinsz = 14 [default = 25];
  if (has_srchwinsz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->srchwinsz(), target);
  }

  // optional uint32 negsample_strat = 15 [default = 1];
  if (has_negsample_strat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->negsample_strat(), target);
  }

  // optional uint32 numfeat = 16 [default = 250];
  if (has_numfeat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->numfeat(), target);
  }

  // optional uint32 numsel = 17 [default = 50];
  if (has_numsel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->numsel(), target);
  }

  // optional float lrate = 21 [default = 0.85];
  if (has_lrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->lrate(), target);
  }

  // optional float posrad = 22 [default = 1];
  if (has_posrad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->posrad(), target);
  }

  // optional float init_posrad = 23 [default = 3];
  if (has_init_posrad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->init_posrad(), target);
  }

  // optional uint32 haarmin_rectnum = 24 [default = 2];
  if (has_haarmin_rectnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->haarmin_rectnum(), target);
  }

  // optional uint32 haarmax_rectnum = 25 [default = 6];
  if (has_haarmax_rectnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->haarmax_rectnum(), target);
  }

  // optional bool uselogr = 29 [default = true];
  if (has_uselogr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->uselogr(), target);
  }

  // optional bool tss = 31 [default = false];
  if (has_tss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->tss(), target);
  }

  // optional bool pool = 32 [default = false];
  if (has_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->pool(), target);
  }

  // optional bool sync = 33 [default = false];
  if (has_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->sync(), target);
  }

  // optional bool mixfeat = 34 [default = false];
  if (has_mixfeat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->mixfeat(), target);
  }

  // optional bool showprob = 35 [default = false];
  if (has_showprob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->showprob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.MilTrackParameter)
  return target;
}

int MilTrackParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .svaf.MilTrackParameter.InitType init_type = 1 [default = AUTORECT];
    if (has_init_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->init_type());
    }

    // optional .svaf.MilTrackParameter.TrackType track_type = 2 [default = MIL];
    if (has_track_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->track_type());
    }

    // optional int32 track_count = 3 [default = 20];
    if (has_track_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->track_count());
    }

    // optional uint32 tr_width = 5 [default = 200];
    if (has_tr_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tr_width());
    }

    // optional uint32 tr_height = 6 [default = 150];
    if (has_tr_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tr_height());
    }

    // optional float scalefactor = 7 [default = 0.5];
    if (has_scalefactor()) {
      total_size += 1 + 4;
    }

    // optional uint32 init_negnum = 11 [default = 65];
    if (has_init_negnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->init_negnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 negnum = 12 [default = 65];
    if (has_negnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->negnum());
    }

    // optional uint32 posmax = 13 [default = 100000];
    if (has_posmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->posmax());
    }

    // optional uint32 srchwinsz = 14 [default = 25];
    if (has_srchwinsz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srchwinsz());
    }

    // optional uint32 negsample_strat = 15 [default = 1];
    if (has_negsample_strat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->negsample_strat());
    }

    // optional uint32 numfeat = 16 [default = 250];
    if (has_numfeat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numfeat());
    }

    // optional uint32 numsel = 17 [default = 50];
    if (has_numsel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numsel());
    }

    // optional float lrate = 21 [default = 0.85];
    if (has_lrate()) {
      total_size += 2 + 4;
    }

    // optional float posrad = 22 [default = 1];
    if (has_posrad()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float init_posrad = 23 [default = 3];
    if (has_init_posrad()) {
      total_size += 2 + 4;
    }

    // optional uint32 haarmin_rectnum = 24 [default = 2];
    if (has_haarmin_rectnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->haarmin_rectnum());
    }

    // optional uint32 haarmax_rectnum = 25 [default = 6];
    if (has_haarmax_rectnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->haarmax_rectnum());
    }

    // optional bool uselogr = 29 [default = true];
    if (has_uselogr()) {
      total_size += 2 + 1;
    }

    // optional bool tss = 31 [default = false];
    if (has_tss()) {
      total_size += 2 + 1;
    }

    // optional bool pool = 32 [default = false];
    if (has_pool()) {
      total_size += 2 + 1;
    }

    // optional bool sync = 33 [default = false];
    if (has_sync()) {
      total_size += 2 + 1;
    }

    // optional bool mixfeat = 34 [default = false];
    if (has_mixfeat()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool showprob = 35 [default = false];
    if (has_showprob()) {
      total_size += 2 + 1;
    }

  }
  // repeated .svaf.InitRectParameter init_rect = 4;
  total_size += 1 * this->init_rect_size();
  for (int i = 0; i < this->init_rect_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->init_rect(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MilTrackParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MilTrackParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MilTrackParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MilTrackParameter::MergeFrom(const MilTrackParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  init_rect_.MergeFrom(from.init_rect_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_init_type()) {
      set_init_type(from.init_type());
    }
    if (from.has_track_type()) {
      set_track_type(from.track_type());
    }
    if (from.has_track_count()) {
      set_track_count(from.track_count());
    }
    if (from.has_tr_width()) {
      set_tr_width(from.tr_width());
    }
    if (from.has_tr_height()) {
      set_tr_height(from.tr_height());
    }
    if (from.has_scalefactor()) {
      set_scalefactor(from.scalefactor());
    }
    if (from.has_init_negnum()) {
      set_init_negnum(from.init_negnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_negnum()) {
      set_negnum(from.negnum());
    }
    if (from.has_posmax()) {
      set_posmax(from.posmax());
    }
    if (from.has_srchwinsz()) {
      set_srchwinsz(from.srchwinsz());
    }
    if (from.has_negsample_strat()) {
      set_negsample_strat(from.negsample_strat());
    }
    if (from.has_numfeat()) {
      set_numfeat(from.numfeat());
    }
    if (from.has_numsel()) {
      set_numsel(from.numsel());
    }
    if (from.has_lrate()) {
      set_lrate(from.lrate());
    }
    if (from.has_posrad()) {
      set_posrad(from.posrad());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_init_posrad()) {
      set_init_posrad(from.init_posrad());
    }
    if (from.has_haarmin_rectnum()) {
      set_haarmin_rectnum(from.haarmin_rectnum());
    }
    if (from.has_haarmax_rectnum()) {
      set_haarmax_rectnum(from.haarmax_rectnum());
    }
    if (from.has_uselogr()) {
      set_uselogr(from.uselogr());
    }
    if (from.has_tss()) {
      set_tss(from.tss());
    }
    if (from.has_pool()) {
      set_pool(from.pool());
    }
    if (from.has_sync()) {
      set_sync(from.sync());
    }
    if (from.has_mixfeat()) {
      set_mixfeat(from.mixfeat());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_showprob()) {
      set_showprob(from.showprob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MilTrackParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MilTrackParameter::CopyFrom(const MilTrackParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MilTrackParameter::IsInitialized() const {

  return true;
}

void MilTrackParameter::Swap(MilTrackParameter* other) {
  if (other != this) {
    std::swap(init_type_, other->init_type_);
    std::swap(track_type_, other->track_type_);
    std::swap(track_count_, other->track_count_);
    init_rect_.Swap(&other->init_rect_);
    std::swap(tr_width_, other->tr_width_);
    std::swap(tr_height_, other->tr_height_);
    std::swap(scalefactor_, other->scalefactor_);
    std::swap(init_negnum_, other->init_negnum_);
    std::swap(negnum_, other->negnum_);
    std::swap(posmax_, other->posmax_);
    std::swap(srchwinsz_, other->srchwinsz_);
    std::swap(negsample_strat_, other->negsample_strat_);
    std::swap(numfeat_, other->numfeat_);
    std::swap(numsel_, other->numsel_);
    std::swap(lrate_, other->lrate_);
    std::swap(posrad_, other->posrad_);
    std::swap(init_posrad_, other->init_posrad_);
    std::swap(haarmin_rectnum_, other->haarmin_rectnum_);
    std::swap(haarmax_rectnum_, other->haarmax_rectnum_);
    std::swap(uselogr_, other->uselogr_);
    std::swap(tss_, other->tss_);
    std::swap(pool_, other->pool_);
    std::swap(sync_, other->sync_);
    std::swap(mixfeat_, other->mixfeat_);
    std::swap(showprob_, other->showprob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MilTrackParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MilTrackParameter_descriptor_;
  metadata.reflection = MilTrackParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FeaturePointParameter::FeaturePointParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.FeaturePointParameter)
}

void FeaturePointParameter::InitAsDefaultInstance() {
}

FeaturePointParameter::FeaturePointParameter(const FeaturePointParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.FeaturePointParameter)
}

void FeaturePointParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeaturePointParameter::~FeaturePointParameter() {
  // @@protoc_insertion_point(destructor:svaf.FeaturePointParameter)
  SharedDtor();
}

void FeaturePointParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeaturePointParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeaturePointParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeaturePointParameter_descriptor_;
}

const FeaturePointParameter& FeaturePointParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

FeaturePointParameter* FeaturePointParameter::default_instance_ = NULL;

FeaturePointParameter* FeaturePointParameter::New() const {
  return new FeaturePointParameter;
}

void FeaturePointParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeaturePointParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.FeaturePointParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.FeaturePointParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.FeaturePointParameter)
  return false;
#undef DO_
}

void FeaturePointParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.FeaturePointParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.FeaturePointParameter)
}

::google::protobuf::uint8* FeaturePointParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.FeaturePointParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.FeaturePointParameter)
  return target;
}

int FeaturePointParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeaturePointParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeaturePointParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeaturePointParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeaturePointParameter::MergeFrom(const FeaturePointParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeaturePointParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeaturePointParameter::CopyFrom(const FeaturePointParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeaturePointParameter::IsInitialized() const {

  return true;
}

void FeaturePointParameter::Swap(FeaturePointParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeaturePointParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeaturePointParameter_descriptor_;
  metadata.reflection = FeaturePointParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SIFTPointParameter::SIFTPointParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.SIFTPointParameter)
}

void SIFTPointParameter::InitAsDefaultInstance() {
}

SIFTPointParameter::SIFTPointParameter(const SIFTPointParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.SIFTPointParameter)
}

void SIFTPointParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SIFTPointParameter::~SIFTPointParameter() {
  // @@protoc_insertion_point(destructor:svaf.SIFTPointParameter)
  SharedDtor();
}

void SIFTPointParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SIFTPointParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SIFTPointParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SIFTPointParameter_descriptor_;
}

const SIFTPointParameter& SIFTPointParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

SIFTPointParameter* SIFTPointParameter::default_instance_ = NULL;

SIFTPointParameter* SIFTPointParameter::New() const {
  return new SIFTPointParameter;
}

void SIFTPointParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SIFTPointParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.SIFTPointParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.SIFTPointParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.SIFTPointParameter)
  return false;
#undef DO_
}

void SIFTPointParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.SIFTPointParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.SIFTPointParameter)
}

::google::protobuf::uint8* SIFTPointParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.SIFTPointParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.SIFTPointParameter)
  return target;
}

int SIFTPointParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SIFTPointParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SIFTPointParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SIFTPointParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SIFTPointParameter::MergeFrom(const SIFTPointParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SIFTPointParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SIFTPointParameter::CopyFrom(const SIFTPointParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SIFTPointParameter::IsInitialized() const {

  return true;
}

void SIFTPointParameter::Swap(SIFTPointParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SIFTPointParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SIFTPointParameter_descriptor_;
  metadata.reflection = SIFTPointParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SURFPointParameter::kStrideFieldNumber;
const int SURFPointParameter::kOctavesFieldNumber;
const int SURFPointParameter::kIntervalsFieldNumber;
const int SURFPointParameter::kThreshFieldNumber;
#endif  // !_MSC_VER

SURFPointParameter::SURFPointParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.SURFPointParameter)
}

void SURFPointParameter::InitAsDefaultInstance() {
}

SURFPointParameter::SURFPointParameter(const SURFPointParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.SURFPointParameter)
}

void SURFPointParameter::SharedCtor() {
  _cached_size_ = 0;
  stride_ = 2;
  octaves_ = 5;
  intervals_ = 4;
  thresh_ = 0.0004f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SURFPointParameter::~SURFPointParameter() {
  // @@protoc_insertion_point(destructor:svaf.SURFPointParameter)
  SharedDtor();
}

void SURFPointParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SURFPointParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SURFPointParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SURFPointParameter_descriptor_;
}

const SURFPointParameter& SURFPointParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

SURFPointParameter* SURFPointParameter::default_instance_ = NULL;

SURFPointParameter* SURFPointParameter::New() const {
  return new SURFPointParameter;
}

void SURFPointParameter::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    stride_ = 2;
    octaves_ = 5;
    intervals_ = 4;
    thresh_ = 0.0004f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SURFPointParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.SURFPointParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 stride = 1 [default = 2];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_)));
          set_has_stride();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_octaves;
        break;
      }

      // optional int32 octaves = 2 [default = 5];
      case 2: {
        if (tag == 16) {
         parse_octaves:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &octaves_)));
          set_has_octaves();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_intervals;
        break;
      }

      // optional int32 intervals = 3 [default = 4];
      case 3: {
        if (tag == 24) {
         parse_intervals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intervals_)));
          set_has_intervals();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_thresh;
        break;
      }

      // optional float thresh = 4 [default = 0.0004];
      case 4: {
        if (tag == 37) {
         parse_thresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thresh_)));
          set_has_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.SURFPointParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.SURFPointParameter)
  return false;
#undef DO_
}

void SURFPointParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.SURFPointParameter)
  // optional int32 stride = 1 [default = 2];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stride(), output);
  }

  // optional int32 octaves = 2 [default = 5];
  if (has_octaves()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->octaves(), output);
  }

  // optional int32 intervals = 3 [default = 4];
  if (has_intervals()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->intervals(), output);
  }

  // optional float thresh = 4 [default = 0.0004];
  if (has_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->thresh(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.SURFPointParameter)
}

::google::protobuf::uint8* SURFPointParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.SURFPointParameter)
  // optional int32 stride = 1 [default = 2];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stride(), target);
  }

  // optional int32 octaves = 2 [default = 5];
  if (has_octaves()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->octaves(), target);
  }

  // optional int32 intervals = 3 [default = 4];
  if (has_intervals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->intervals(), target);
  }

  // optional float thresh = 4 [default = 0.0004];
  if (has_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->thresh(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.SURFPointParameter)
  return target;
}

int SURFPointParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 stride = 1 [default = 2];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stride());
    }

    // optional int32 octaves = 2 [default = 5];
    if (has_octaves()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->octaves());
    }

    // optional int32 intervals = 3 [default = 4];
    if (has_intervals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intervals());
    }

    // optional float thresh = 4 [default = 0.0004];
    if (has_thresh()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SURFPointParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SURFPointParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SURFPointParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SURFPointParameter::MergeFrom(const SURFPointParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_octaves()) {
      set_octaves(from.octaves());
    }
    if (from.has_intervals()) {
      set_intervals(from.intervals());
    }
    if (from.has_thresh()) {
      set_thresh(from.thresh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SURFPointParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SURFPointParameter::CopyFrom(const SURFPointParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SURFPointParameter::IsInitialized() const {

  return true;
}

void SURFPointParameter::Swap(SURFPointParameter* other) {
  if (other != this) {
    std::swap(stride_, other->stride_);
    std::swap(octaves_, other->octaves_);
    std::swap(intervals_, other->intervals_);
    std::swap(thresh_, other->thresh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SURFPointParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SURFPointParameter_descriptor_;
  metadata.reflection = SURFPointParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

STARPointParameter::STARPointParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.STARPointParameter)
}

void STARPointParameter::InitAsDefaultInstance() {
}

STARPointParameter::STARPointParameter(const STARPointParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.STARPointParameter)
}

void STARPointParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

STARPointParameter::~STARPointParameter() {
  // @@protoc_insertion_point(destructor:svaf.STARPointParameter)
  SharedDtor();
}

void STARPointParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void STARPointParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STARPointParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STARPointParameter_descriptor_;
}

const STARPointParameter& STARPointParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

STARPointParameter* STARPointParameter::default_instance_ = NULL;

STARPointParameter* STARPointParameter::New() const {
  return new STARPointParameter;
}

void STARPointParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool STARPointParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.STARPointParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.STARPointParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.STARPointParameter)
  return false;
#undef DO_
}

void STARPointParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.STARPointParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.STARPointParameter)
}

::google::protobuf::uint8* STARPointParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.STARPointParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.STARPointParameter)
  return target;
}

int STARPointParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STARPointParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const STARPointParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const STARPointParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void STARPointParameter::MergeFrom(const STARPointParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void STARPointParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STARPointParameter::CopyFrom(const STARPointParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STARPointParameter::IsInitialized() const {

  return true;
}

void STARPointParameter::Swap(STARPointParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata STARPointParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = STARPointParameter_descriptor_;
  metadata.reflection = STARPointParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BRISKPointParameter::BRISKPointParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.BRISKPointParameter)
}

void BRISKPointParameter::InitAsDefaultInstance() {
}

BRISKPointParameter::BRISKPointParameter(const BRISKPointParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.BRISKPointParameter)
}

void BRISKPointParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BRISKPointParameter::~BRISKPointParameter() {
  // @@protoc_insertion_point(destructor:svaf.BRISKPointParameter)
  SharedDtor();
}

void BRISKPointParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BRISKPointParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BRISKPointParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BRISKPointParameter_descriptor_;
}

const BRISKPointParameter& BRISKPointParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

BRISKPointParameter* BRISKPointParameter::default_instance_ = NULL;

BRISKPointParameter* BRISKPointParameter::New() const {
  return new BRISKPointParameter;
}

void BRISKPointParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BRISKPointParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.BRISKPointParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.BRISKPointParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.BRISKPointParameter)
  return false;
#undef DO_
}

void BRISKPointParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.BRISKPointParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.BRISKPointParameter)
}

::google::protobuf::uint8* BRISKPointParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.BRISKPointParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.BRISKPointParameter)
  return target;
}

int BRISKPointParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BRISKPointParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BRISKPointParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BRISKPointParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BRISKPointParameter::MergeFrom(const BRISKPointParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BRISKPointParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BRISKPointParameter::CopyFrom(const BRISKPointParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BRISKPointParameter::IsInitialized() const {

  return true;
}

void BRISKPointParameter::Swap(BRISKPointParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BRISKPointParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BRISKPointParameter_descriptor_;
  metadata.reflection = BRISKPointParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FASTPointParameter::kThreshFieldNumber;
const int FASTPointParameter::kNmsFieldNumber;
#endif  // !_MSC_VER

FASTPointParameter::FASTPointParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.FASTPointParameter)
}

void FASTPointParameter::InitAsDefaultInstance() {
}

FASTPointParameter::FASTPointParameter(const FASTPointParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.FASTPointParameter)
}

void FASTPointParameter::SharedCtor() {
  _cached_size_ = 0;
  thresh_ = 40;
  nms_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FASTPointParameter::~FASTPointParameter() {
  // @@protoc_insertion_point(destructor:svaf.FASTPointParameter)
  SharedDtor();
}

void FASTPointParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FASTPointParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FASTPointParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FASTPointParameter_descriptor_;
}

const FASTPointParameter& FASTPointParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

FASTPointParameter* FASTPointParameter::default_instance_ = NULL;

FASTPointParameter* FASTPointParameter::New() const {
  return new FASTPointParameter;
}

void FASTPointParameter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    thresh_ = 40;
    nms_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FASTPointParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.FASTPointParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 thresh = 1 [default = 40];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thresh_)));
          set_has_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nms;
        break;
      }

      // optional bool nms = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_nms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nms_)));
          set_has_nms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.FASTPointParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.FASTPointParameter)
  return false;
#undef DO_
}

void FASTPointParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.FASTPointParameter)
  // optional int32 thresh = 1 [default = 40];
  if (has_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->thresh(), output);
  }

  // optional bool nms = 2 [default = true];
  if (has_nms()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->nms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.FASTPointParameter)
}

::google::protobuf::uint8* FASTPointParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.FASTPointParameter)
  // optional int32 thresh = 1 [default = 40];
  if (has_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->thresh(), target);
  }

  // optional bool nms = 2 [default = true];
  if (has_nms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->nms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.FASTPointParameter)
  return target;
}

int FASTPointParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 thresh = 1 [default = 40];
    if (has_thresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thresh());
    }

    // optional bool nms = 2 [default = true];
    if (has_nms()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FASTPointParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FASTPointParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FASTPointParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FASTPointParameter::MergeFrom(const FASTPointParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thresh()) {
      set_thresh(from.thresh());
    }
    if (from.has_nms()) {
      set_nms(from.nms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FASTPointParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FASTPointParameter::CopyFrom(const FASTPointParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FASTPointParameter::IsInitialized() const {

  return true;
}

void FASTPointParameter::Swap(FASTPointParameter* other) {
  if (other != this) {
    std::swap(thresh_, other->thresh_);
    std::swap(nms_, other->nms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FASTPointParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FASTPointParameter_descriptor_;
  metadata.reflection = FASTPointParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ORBPointParameter::ORBPointParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.ORBPointParameter)
}

void ORBPointParameter::InitAsDefaultInstance() {
}

ORBPointParameter::ORBPointParameter(const ORBPointParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.ORBPointParameter)
}

void ORBPointParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ORBPointParameter::~ORBPointParameter() {
  // @@protoc_insertion_point(destructor:svaf.ORBPointParameter)
  SharedDtor();
}

void ORBPointParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ORBPointParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ORBPointParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ORBPointParameter_descriptor_;
}

const ORBPointParameter& ORBPointParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

ORBPointParameter* ORBPointParameter::default_instance_ = NULL;

ORBPointParameter* ORBPointParameter::New() const {
  return new ORBPointParameter;
}

void ORBPointParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ORBPointParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.ORBPointParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.ORBPointParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.ORBPointParameter)
  return false;
#undef DO_
}

void ORBPointParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.ORBPointParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.ORBPointParameter)
}

::google::protobuf::uint8* ORBPointParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.ORBPointParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.ORBPointParameter)
  return target;
}

int ORBPointParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ORBPointParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ORBPointParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ORBPointParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ORBPointParameter::MergeFrom(const ORBPointParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ORBPointParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ORBPointParameter::CopyFrom(const ORBPointParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ORBPointParameter::IsInitialized() const {

  return true;
}

void ORBPointParameter::Swap(ORBPointParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ORBPointParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ORBPointParameter_descriptor_;
  metadata.reflection = ORBPointParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

KAZEPointParameter::KAZEPointParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.KAZEPointParameter)
}

void KAZEPointParameter::InitAsDefaultInstance() {
}

KAZEPointParameter::KAZEPointParameter(const KAZEPointParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.KAZEPointParameter)
}

void KAZEPointParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KAZEPointParameter::~KAZEPointParameter() {
  // @@protoc_insertion_point(destructor:svaf.KAZEPointParameter)
  SharedDtor();
}

void KAZEPointParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KAZEPointParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KAZEPointParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KAZEPointParameter_descriptor_;
}

const KAZEPointParameter& KAZEPointParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

KAZEPointParameter* KAZEPointParameter::default_instance_ = NULL;

KAZEPointParameter* KAZEPointParameter::New() const {
  return new KAZEPointParameter;
}

void KAZEPointParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KAZEPointParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.KAZEPointParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.KAZEPointParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.KAZEPointParameter)
  return false;
#undef DO_
}

void KAZEPointParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.KAZEPointParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.KAZEPointParameter)
}

::google::protobuf::uint8* KAZEPointParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.KAZEPointParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.KAZEPointParameter)
  return target;
}

int KAZEPointParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KAZEPointParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KAZEPointParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KAZEPointParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KAZEPointParameter::MergeFrom(const KAZEPointParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KAZEPointParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KAZEPointParameter::CopyFrom(const KAZEPointParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KAZEPointParameter::IsInitialized() const {

  return true;
}

void KAZEPointParameter::Swap(KAZEPointParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KAZEPointParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KAZEPointParameter_descriptor_;
  metadata.reflection = KAZEPointParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HarrisPointParameter::HarrisPointParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.HarrisPointParameter)
}

void HarrisPointParameter::InitAsDefaultInstance() {
}

HarrisPointParameter::HarrisPointParameter(const HarrisPointParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.HarrisPointParameter)
}

void HarrisPointParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HarrisPointParameter::~HarrisPointParameter() {
  // @@protoc_insertion_point(destructor:svaf.HarrisPointParameter)
  SharedDtor();
}

void HarrisPointParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HarrisPointParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HarrisPointParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HarrisPointParameter_descriptor_;
}

const HarrisPointParameter& HarrisPointParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

HarrisPointParameter* HarrisPointParameter::default_instance_ = NULL;

HarrisPointParameter* HarrisPointParameter::New() const {
  return new HarrisPointParameter;
}

void HarrisPointParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HarrisPointParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.HarrisPointParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.HarrisPointParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.HarrisPointParameter)
  return false;
#undef DO_
}

void HarrisPointParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.HarrisPointParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.HarrisPointParameter)
}

::google::protobuf::uint8* HarrisPointParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.HarrisPointParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.HarrisPointParameter)
  return target;
}

int HarrisPointParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HarrisPointParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HarrisPointParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HarrisPointParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HarrisPointParameter::MergeFrom(const HarrisPointParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HarrisPointParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HarrisPointParameter::CopyFrom(const HarrisPointParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HarrisPointParameter::IsInitialized() const {

  return true;
}

void HarrisPointParameter::Swap(HarrisPointParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HarrisPointParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HarrisPointParameter_descriptor_;
  metadata.reflection = HarrisPointParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FastParamCP_FastType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FastParamCP_FastType_descriptor_;
}
bool FastParamCP_FastType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FastParamCP_FastType FastParamCP::T_9_16;
const FastParamCP_FastType FastParamCP::T_7_12;
const FastParamCP_FastType FastParamCP::T_5_8;
const FastParamCP_FastType FastParamCP::FastType_MIN;
const FastParamCP_FastType FastParamCP::FastType_MAX;
const int FastParamCP::FastType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FastParamCP::kThreshFieldNumber;
const int FastParamCP::kIsnmsFieldNumber;
const int FastParamCP::kFtypeFieldNumber;
#endif  // !_MSC_VER

FastParamCP::FastParamCP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.FastParamCP)
}

void FastParamCP::InitAsDefaultInstance() {
}

FastParamCP::FastParamCP(const FastParamCP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.FastParamCP)
}

void FastParamCP::SharedCtor() {
  _cached_size_ = 0;
  thresh_ = 40;
  isnms_ = true;
  ftype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FastParamCP::~FastParamCP() {
  // @@protoc_insertion_point(destructor:svaf.FastParamCP)
  SharedDtor();
}

void FastParamCP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FastParamCP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FastParamCP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FastParamCP_descriptor_;
}

const FastParamCP& FastParamCP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

FastParamCP* FastParamCP::default_instance_ = NULL;

FastParamCP* FastParamCP::New() const {
  return new FastParamCP;
}

void FastParamCP::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    thresh_ = 40;
    isnms_ = true;
    ftype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FastParamCP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.FastParamCP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 thresh = 1 [default = 40];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thresh_)));
          set_has_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isnms;
        break;
      }

      // optional bool isnms = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_isnms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnms_)));
          set_has_isnms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ftype;
        break;
      }

      // optional .svaf.FastParamCP.FastType ftype = 3 [default = T_9_16];
      case 3: {
        if (tag == 24) {
         parse_ftype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::svaf::FastParamCP_FastType_IsValid(value)) {
            set_ftype(static_cast< ::svaf::FastParamCP_FastType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.FastParamCP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.FastParamCP)
  return false;
#undef DO_
}

void FastParamCP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.FastParamCP)
  // optional int32 thresh = 1 [default = 40];
  if (has_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->thresh(), output);
  }

  // optional bool isnms = 2 [default = true];
  if (has_isnms()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isnms(), output);
  }

  // optional .svaf.FastParamCP.FastType ftype = 3 [default = T_9_16];
  if (has_ftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ftype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.FastParamCP)
}

::google::protobuf::uint8* FastParamCP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.FastParamCP)
  // optional int32 thresh = 1 [default = 40];
  if (has_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->thresh(), target);
  }

  // optional bool isnms = 2 [default = true];
  if (has_isnms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isnms(), target);
  }

  // optional .svaf.FastParamCP.FastType ftype = 3 [default = T_9_16];
  if (has_ftype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ftype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.FastParamCP)
  return target;
}

int FastParamCP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 thresh = 1 [default = 40];
    if (has_thresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thresh());
    }

    // optional bool isnms = 2 [default = true];
    if (has_isnms()) {
      total_size += 1 + 1;
    }

    // optional .svaf.FastParamCP.FastType ftype = 3 [default = T_9_16];
    if (has_ftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ftype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FastParamCP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FastParamCP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FastParamCP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FastParamCP::MergeFrom(const FastParamCP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thresh()) {
      set_thresh(from.thresh());
    }
    if (from.has_isnms()) {
      set_isnms(from.isnms());
    }
    if (from.has_ftype()) {
      set_ftype(from.ftype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FastParamCP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastParamCP::CopyFrom(const FastParamCP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastParamCP::IsInitialized() const {

  return true;
}

void FastParamCP::Swap(FastParamCP* other) {
  if (other != this) {
    std::swap(thresh_, other->thresh_);
    std::swap(isnms_, other->isnms_);
    std::swap(ftype_, other->ftype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FastParamCP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FastParamCP_descriptor_;
  metadata.reflection = FastParamCP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSERParamCP::kDeltaFieldNumber;
const int MSERParamCP::kMinAreaFieldNumber;
const int MSERParamCP::kMaxAreaFieldNumber;
const int MSERParamCP::kMaxVariaFieldNumber;
const int MSERParamCP::kMinDiversFieldNumber;
const int MSERParamCP::kMaxEvolutionFieldNumber;
const int MSERParamCP::kAreaThreshFieldNumber;
const int MSERParamCP::kMinMarginFieldNumber;
const int MSERParamCP::kEdgeblurSizeFieldNumber;
#endif  // !_MSC_VER

MSERParamCP::MSERParamCP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.MSERParamCP)
}

void MSERParamCP::InitAsDefaultInstance() {
}

MSERParamCP::MSERParamCP(const MSERParamCP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.MSERParamCP)
}

void MSERParamCP::SharedCtor() {
  _cached_size_ = 0;
  delta_ = 5;
  min_area_ = 60;
  max_area_ = 14400;
  max_varia_ = 0.25f;
  min_divers_ = 0.2f;
  max_evolution_ = 200;
  area_thresh_ = 1.01f;
  min_margin_ = 0.003f;
  edgeblur_size_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSERParamCP::~MSERParamCP() {
  // @@protoc_insertion_point(destructor:svaf.MSERParamCP)
  SharedDtor();
}

void MSERParamCP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSERParamCP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSERParamCP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSERParamCP_descriptor_;
}

const MSERParamCP& MSERParamCP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

MSERParamCP* MSERParamCP::default_instance_ = NULL;

MSERParamCP* MSERParamCP::New() const {
  return new MSERParamCP;
}

void MSERParamCP::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    delta_ = 5;
    min_area_ = 60;
    max_area_ = 14400;
    max_varia_ = 0.25f;
    min_divers_ = 0.2f;
    max_evolution_ = 200;
    area_thresh_ = 1.01f;
    min_margin_ = 0.003f;
  }
  edgeblur_size_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSERParamCP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.MSERParamCP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 delta = 1 [default = 5];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_)));
          set_has_delta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_min_area;
        break;
      }

      // optional int32 min_area = 2 [default = 60];
      case 2: {
        if (tag == 16) {
         parse_min_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_area_)));
          set_has_min_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_area;
        break;
      }

      // optional int32 max_area = 3 [default = 14400];
      case 3: {
        if (tag == 24) {
         parse_max_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_area_)));
          set_has_max_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_max_varia;
        break;
      }

      // optional float max_varia = 4 [default = 0.25];
      case 4: {
        if (tag == 37) {
         parse_max_varia:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_varia_)));
          set_has_max_varia();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_min_divers;
        break;
      }

      // optional float min_divers = 5 [default = 0.2];
      case 5: {
        if (tag == 45) {
         parse_min_divers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_divers_)));
          set_has_min_divers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_max_evolution;
        break;
      }

      // optional int32 max_evolution = 6 [default = 200];
      case 6: {
        if (tag == 48) {
         parse_max_evolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_evolution_)));
          set_has_max_evolution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_area_thresh;
        break;
      }

      // optional float area_thresh = 7 [default = 1.01];
      case 7: {
        if (tag == 61) {
         parse_area_thresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &area_thresh_)));
          set_has_area_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_min_margin;
        break;
      }

      // optional float min_margin = 8 [default = 0.003];
      case 8: {
        if (tag == 69) {
         parse_min_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_margin_)));
          set_has_min_margin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_edgeblur_size;
        break;
      }

      // optional int32 edgeblur_size = 9 [default = 5];
      case 9: {
        if (tag == 72) {
         parse_edgeblur_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edgeblur_size_)));
          set_has_edgeblur_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.MSERParamCP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.MSERParamCP)
  return false;
#undef DO_
}

void MSERParamCP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.MSERParamCP)
  // optional int32 delta = 1 [default = 5];
  if (has_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->delta(), output);
  }

  // optional int32 min_area = 2 [default = 60];
  if (has_min_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_area(), output);
  }

  // optional int32 max_area = 3 [default = 14400];
  if (has_max_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_area(), output);
  }

  // optional float max_varia = 4 [default = 0.25];
  if (has_max_varia()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max_varia(), output);
  }

  // optional float min_divers = 5 [default = 0.2];
  if (has_min_divers()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->min_divers(), output);
  }

  // optional int32 max_evolution = 6 [default = 200];
  if (has_max_evolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_evolution(), output);
  }

  // optional float area_thresh = 7 [default = 1.01];
  if (has_area_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->area_thresh(), output);
  }

  // optional float min_margin = 8 [default = 0.003];
  if (has_min_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->min_margin(), output);
  }

  // optional int32 edgeblur_size = 9 [default = 5];
  if (has_edgeblur_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->edgeblur_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.MSERParamCP)
}

::google::protobuf::uint8* MSERParamCP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.MSERParamCP)
  // optional int32 delta = 1 [default = 5];
  if (has_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->delta(), target);
  }

  // optional int32 min_area = 2 [default = 60];
  if (has_min_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_area(), target);
  }

  // optional int32 max_area = 3 [default = 14400];
  if (has_max_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_area(), target);
  }

  // optional float max_varia = 4 [default = 0.25];
  if (has_max_varia()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max_varia(), target);
  }

  // optional float min_divers = 5 [default = 0.2];
  if (has_min_divers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->min_divers(), target);
  }

  // optional int32 max_evolution = 6 [default = 200];
  if (has_max_evolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_evolution(), target);
  }

  // optional float area_thresh = 7 [default = 1.01];
  if (has_area_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->area_thresh(), target);
  }

  // optional float min_margin = 8 [default = 0.003];
  if (has_min_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->min_margin(), target);
  }

  // optional int32 edgeblur_size = 9 [default = 5];
  if (has_edgeblur_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->edgeblur_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.MSERParamCP)
  return target;
}

int MSERParamCP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 delta = 1 [default = 5];
    if (has_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delta());
    }

    // optional int32 min_area = 2 [default = 60];
    if (has_min_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_area());
    }

    // optional int32 max_area = 3 [default = 14400];
    if (has_max_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_area());
    }

    // optional float max_varia = 4 [default = 0.25];
    if (has_max_varia()) {
      total_size += 1 + 4;
    }

    // optional float min_divers = 5 [default = 0.2];
    if (has_min_divers()) {
      total_size += 1 + 4;
    }

    // optional int32 max_evolution = 6 [default = 200];
    if (has_max_evolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_evolution());
    }

    // optional float area_thresh = 7 [default = 1.01];
    if (has_area_thresh()) {
      total_size += 1 + 4;
    }

    // optional float min_margin = 8 [default = 0.003];
    if (has_min_margin()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 edgeblur_size = 9 [default = 5];
    if (has_edgeblur_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edgeblur_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSERParamCP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSERParamCP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSERParamCP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSERParamCP::MergeFrom(const MSERParamCP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_delta()) {
      set_delta(from.delta());
    }
    if (from.has_min_area()) {
      set_min_area(from.min_area());
    }
    if (from.has_max_area()) {
      set_max_area(from.max_area());
    }
    if (from.has_max_varia()) {
      set_max_varia(from.max_varia());
    }
    if (from.has_min_divers()) {
      set_min_divers(from.min_divers());
    }
    if (from.has_max_evolution()) {
      set_max_evolution(from.max_evolution());
    }
    if (from.has_area_thresh()) {
      set_area_thresh(from.area_thresh());
    }
    if (from.has_min_margin()) {
      set_min_margin(from.min_margin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_edgeblur_size()) {
      set_edgeblur_size(from.edgeblur_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSERParamCP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSERParamCP::CopyFrom(const MSERParamCP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSERParamCP::IsInitialized() const {

  return true;
}

void MSERParamCP::Swap(MSERParamCP* other) {
  if (other != this) {
    std::swap(delta_, other->delta_);
    std::swap(min_area_, other->min_area_);
    std::swap(max_area_, other->max_area_);
    std::swap(max_varia_, other->max_varia_);
    std::swap(min_divers_, other->min_divers_);
    std::swap(max_evolution_, other->max_evolution_);
    std::swap(area_thresh_, other->area_thresh_);
    std::swap(min_margin_, other->min_margin_);
    std::swap(edgeblur_size_, other->edgeblur_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSERParamCP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSERParamCP_descriptor_;
  metadata.reflection = MSERParamCP_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ORBParamCP_OBRScoreType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ORBParamCP_OBRScoreType_descriptor_;
}
bool ORBParamCP_OBRScoreType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ORBParamCP_OBRScoreType ORBParamCP::HARRIS_SCORE;
const ORBParamCP_OBRScoreType ORBParamCP::FAST_SCORE;
const ORBParamCP_OBRScoreType ORBParamCP::OBRScoreType_MIN;
const ORBParamCP_OBRScoreType ORBParamCP::OBRScoreType_MAX;
const int ORBParamCP::OBRScoreType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ORBParamCP::kNfeaturesFieldNumber;
const int ORBParamCP::kScalefactorFieldNumber;
const int ORBParamCP::kNlevelsFieldNumber;
const int ORBParamCP::kEdgethreshFieldNumber;
const int ORBParamCP::kFirstlevelFieldNumber;
const int ORBParamCP::kWtaKFieldNumber;
const int ORBParamCP::kScoretypeFieldNumber;
const int ORBParamCP::kPatchsizeFieldNumber;
#endif  // !_MSC_VER

ORBParamCP::ORBParamCP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.ORBParamCP)
}

void ORBParamCP::InitAsDefaultInstance() {
}

ORBParamCP::ORBParamCP(const ORBParamCP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.ORBParamCP)
}

void ORBParamCP::SharedCtor() {
  _cached_size_ = 0;
  nfeatures_ = 500;
  scalefactor_ = 1.2f;
  nlevels_ = 8;
  edgethresh_ = 31;
  firstlevel_ = 0;
  wta_k_ = 2;
  scoretype_ = 1;
  patchsize_ = 31;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ORBParamCP::~ORBParamCP() {
  // @@protoc_insertion_point(destructor:svaf.ORBParamCP)
  SharedDtor();
}

void ORBParamCP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ORBParamCP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ORBParamCP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ORBParamCP_descriptor_;
}

const ORBParamCP& ORBParamCP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

ORBParamCP* ORBParamCP::default_instance_ = NULL;

ORBParamCP* ORBParamCP::New() const {
  return new ORBParamCP;
}

void ORBParamCP::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    nfeatures_ = 500;
    scalefactor_ = 1.2f;
    nlevels_ = 8;
    edgethresh_ = 31;
    firstlevel_ = 0;
    wta_k_ = 2;
    scoretype_ = 1;
    patchsize_ = 31;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ORBParamCP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.ORBParamCP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nfeatures = 1 [default = 500];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nfeatures_)));
          set_has_nfeatures();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_scalefactor;
        break;
      }

      // optional float scalefactor = 2 [default = 1.2];
      case 2: {
        if (tag == 21) {
         parse_scalefactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scalefactor_)));
          set_has_scalefactor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nlevels;
        break;
      }

      // optional int32 nlevels = 3 [default = 8];
      case 3: {
        if (tag == 24) {
         parse_nlevels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlevels_)));
          set_has_nlevels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_edgethresh;
        break;
      }

      // optional int32 edgethresh = 4 [default = 31];
      case 4: {
        if (tag == 32) {
         parse_edgethresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edgethresh_)));
          set_has_edgethresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_firstlevel;
        break;
      }

      // optional int32 firstlevel = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_firstlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstlevel_)));
          set_has_firstlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_wta_k;
        break;
      }

      // optional int32 wta_k = 6 [default = 2];
      case 6: {
        if (tag == 48) {
         parse_wta_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wta_k_)));
          set_has_wta_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_scoretype;
        break;
      }

      // optional .svaf.ORBParamCP.OBRScoreType scoretype = 7 [default = HARRIS_SCORE];
      case 7: {
        if (tag == 56) {
         parse_scoretype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::svaf::ORBParamCP_OBRScoreType_IsValid(value)) {
            set_scoretype(static_cast< ::svaf::ORBParamCP_OBRScoreType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_patchsize;
        break;
      }

      // optional int32 patchsize = 8 [default = 31];
      case 8: {
        if (tag == 64) {
         parse_patchsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patchsize_)));
          set_has_patchsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.ORBParamCP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.ORBParamCP)
  return false;
#undef DO_
}

void ORBParamCP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.ORBParamCP)
  // optional int32 nfeatures = 1 [default = 500];
  if (has_nfeatures()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nfeatures(), output);
  }

  // optional float scalefactor = 2 [default = 1.2];
  if (has_scalefactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scalefactor(), output);
  }

  // optional int32 nlevels = 3 [default = 8];
  if (has_nlevels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nlevels(), output);
  }

  // optional int32 edgethresh = 4 [default = 31];
  if (has_edgethresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->edgethresh(), output);
  }

  // optional int32 firstlevel = 5 [default = 0];
  if (has_firstlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->firstlevel(), output);
  }

  // optional int32 wta_k = 6 [default = 2];
  if (has_wta_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wta_k(), output);
  }

  // optional .svaf.ORBParamCP.OBRScoreType scoretype = 7 [default = HARRIS_SCORE];
  if (has_scoretype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->scoretype(), output);
  }

  // optional int32 patchsize = 8 [default = 31];
  if (has_patchsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->patchsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.ORBParamCP)
}

::google::protobuf::uint8* ORBParamCP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.ORBParamCP)
  // optional int32 nfeatures = 1 [default = 500];
  if (has_nfeatures()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nfeatures(), target);
  }

  // optional float scalefactor = 2 [default = 1.2];
  if (has_scalefactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scalefactor(), target);
  }

  // optional int32 nlevels = 3 [default = 8];
  if (has_nlevels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nlevels(), target);
  }

  // optional int32 edgethresh = 4 [default = 31];
  if (has_edgethresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->edgethresh(), target);
  }

  // optional int32 firstlevel = 5 [default = 0];
  if (has_firstlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->firstlevel(), target);
  }

  // optional int32 wta_k = 6 [default = 2];
  if (has_wta_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wta_k(), target);
  }

  // optional .svaf.ORBParamCP.OBRScoreType scoretype = 7 [default = HARRIS_SCORE];
  if (has_scoretype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->scoretype(), target);
  }

  // optional int32 patchsize = 8 [default = 31];
  if (has_patchsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->patchsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.ORBParamCP)
  return target;
}

int ORBParamCP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nfeatures = 1 [default = 500];
    if (has_nfeatures()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nfeatures());
    }

    // optional float scalefactor = 2 [default = 1.2];
    if (has_scalefactor()) {
      total_size += 1 + 4;
    }

    // optional int32 nlevels = 3 [default = 8];
    if (has_nlevels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlevels());
    }

    // optional int32 edgethresh = 4 [default = 31];
    if (has_edgethresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edgethresh());
    }

    // optional int32 firstlevel = 5 [default = 0];
    if (has_firstlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstlevel());
    }

    // optional int32 wta_k = 6 [default = 2];
    if (has_wta_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wta_k());
    }

    // optional .svaf.ORBParamCP.OBRScoreType scoretype = 7 [default = HARRIS_SCORE];
    if (has_scoretype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->scoretype());
    }

    // optional int32 patchsize = 8 [default = 31];
    if (has_patchsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->patchsize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ORBParamCP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ORBParamCP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ORBParamCP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ORBParamCP::MergeFrom(const ORBParamCP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nfeatures()) {
      set_nfeatures(from.nfeatures());
    }
    if (from.has_scalefactor()) {
      set_scalefactor(from.scalefactor());
    }
    if (from.has_nlevels()) {
      set_nlevels(from.nlevels());
    }
    if (from.has_edgethresh()) {
      set_edgethresh(from.edgethresh());
    }
    if (from.has_firstlevel()) {
      set_firstlevel(from.firstlevel());
    }
    if (from.has_wta_k()) {
      set_wta_k(from.wta_k());
    }
    if (from.has_scoretype()) {
      set_scoretype(from.scoretype());
    }
    if (from.has_patchsize()) {
      set_patchsize(from.patchsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ORBParamCP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ORBParamCP::CopyFrom(const ORBParamCP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ORBParamCP::IsInitialized() const {

  return true;
}

void ORBParamCP::Swap(ORBParamCP* other) {
  if (other != this) {
    std::swap(nfeatures_, other->nfeatures_);
    std::swap(scalefactor_, other->scalefactor_);
    std::swap(nlevels_, other->nlevels_);
    std::swap(edgethresh_, other->edgethresh_);
    std::swap(firstlevel_, other->firstlevel_);
    std::swap(wta_k_, other->wta_k_);
    std::swap(scoretype_, other->scoretype_);
    std::swap(patchsize_, other->patchsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ORBParamCP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ORBParamCP_descriptor_;
  metadata.reflection = ORBParamCP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BriskParamCP::kThreshFieldNumber;
const int BriskParamCP::kOctavesFieldNumber;
const int BriskParamCP::kPtscaleFieldNumber;
#endif  // !_MSC_VER

BriskParamCP::BriskParamCP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.BriskParamCP)
}

void BriskParamCP::InitAsDefaultInstance() {
}

BriskParamCP::BriskParamCP(const BriskParamCP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.BriskParamCP)
}

void BriskParamCP::SharedCtor() {
  _cached_size_ = 0;
  thresh_ = 30;
  octaves_ = 3;
  ptscale_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BriskParamCP::~BriskParamCP() {
  // @@protoc_insertion_point(destructor:svaf.BriskParamCP)
  SharedDtor();
}

void BriskParamCP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BriskParamCP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BriskParamCP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BriskParamCP_descriptor_;
}

const BriskParamCP& BriskParamCP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

BriskParamCP* BriskParamCP::default_instance_ = NULL;

BriskParamCP* BriskParamCP::New() const {
  return new BriskParamCP;
}

void BriskParamCP::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    thresh_ = 30;
    octaves_ = 3;
    ptscale_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BriskParamCP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.BriskParamCP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 thresh = 1 [default = 30];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thresh_)));
          set_has_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_octaves;
        break;
      }

      // optional int32 octaves = 2 [default = 3];
      case 2: {
        if (tag == 16) {
         parse_octaves:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &octaves_)));
          set_has_octaves();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_ptscale;
        break;
      }

      // optional float ptscale = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_ptscale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ptscale_)));
          set_has_ptscale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.BriskParamCP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.BriskParamCP)
  return false;
#undef DO_
}

void BriskParamCP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.BriskParamCP)
  // optional int32 thresh = 1 [default = 30];
  if (has_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->thresh(), output);
  }

  // optional int32 octaves = 2 [default = 3];
  if (has_octaves()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->octaves(), output);
  }

  // optional float ptscale = 3 [default = 1];
  if (has_ptscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->ptscale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.BriskParamCP)
}

::google::protobuf::uint8* BriskParamCP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.BriskParamCP)
  // optional int32 thresh = 1 [default = 30];
  if (has_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->thresh(), target);
  }

  // optional int32 octaves = 2 [default = 3];
  if (has_octaves()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->octaves(), target);
  }

  // optional float ptscale = 3 [default = 1];
  if (has_ptscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->ptscale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.BriskParamCP)
  return target;
}

int BriskParamCP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 thresh = 1 [default = 30];
    if (has_thresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thresh());
    }

    // optional int32 octaves = 2 [default = 3];
    if (has_octaves()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->octaves());
    }

    // optional float ptscale = 3 [default = 1];
    if (has_ptscale()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BriskParamCP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BriskParamCP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BriskParamCP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BriskParamCP::MergeFrom(const BriskParamCP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thresh()) {
      set_thresh(from.thresh());
    }
    if (from.has_octaves()) {
      set_octaves(from.octaves());
    }
    if (from.has_ptscale()) {
      set_ptscale(from.ptscale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BriskParamCP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BriskParamCP::CopyFrom(const BriskParamCP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BriskParamCP::IsInitialized() const {

  return true;
}

void BriskParamCP::Swap(BriskParamCP* other) {
  if (other != this) {
    std::swap(thresh_, other->thresh_);
    std::swap(octaves_, other->octaves_);
    std::swap(ptscale_, other->ptscale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BriskParamCP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BriskParamCP_descriptor_;
  metadata.reflection = BriskParamCP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FreakParamCP::kOrientnormFieldNumber;
const int FreakParamCP::kScalenormFieldNumber;
const int FreakParamCP::kPtscaleFieldNumber;
const int FreakParamCP::kOctavesFieldNumber;
#endif  // !_MSC_VER

FreakParamCP::FreakParamCP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.FreakParamCP)
}

void FreakParamCP::InitAsDefaultInstance() {
}

FreakParamCP::FreakParamCP(const FreakParamCP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.FreakParamCP)
}

void FreakParamCP::SharedCtor() {
  _cached_size_ = 0;
  orientnorm_ = true;
  scalenorm_ = true;
  ptscale_ = 22;
  octaves_ = 4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FreakParamCP::~FreakParamCP() {
  // @@protoc_insertion_point(destructor:svaf.FreakParamCP)
  SharedDtor();
}

void FreakParamCP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FreakParamCP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FreakParamCP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FreakParamCP_descriptor_;
}

const FreakParamCP& FreakParamCP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

FreakParamCP* FreakParamCP::default_instance_ = NULL;

FreakParamCP* FreakParamCP::New() const {
  return new FreakParamCP;
}

void FreakParamCP::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    orientnorm_ = true;
    scalenorm_ = true;
    ptscale_ = 22;
    octaves_ = 4;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FreakParamCP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.FreakParamCP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool orientnorm = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &orientnorm_)));
          set_has_orientnorm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_scalenorm;
        break;
      }

      // optional bool scalenorm = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_scalenorm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scalenorm_)));
          set_has_scalenorm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_ptscale;
        break;
      }

      // optional float ptscale = 3 [default = 22];
      case 3: {
        if (tag == 29) {
         parse_ptscale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ptscale_)));
          set_has_ptscale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_octaves;
        break;
      }

      // optional int32 octaves = 4 [default = 4];
      case 4: {
        if (tag == 32) {
         parse_octaves:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &octaves_)));
          set_has_octaves();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.FreakParamCP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.FreakParamCP)
  return false;
#undef DO_
}

void FreakParamCP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.FreakParamCP)
  // optional bool orientnorm = 1 [default = true];
  if (has_orientnorm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->orientnorm(), output);
  }

  // optional bool scalenorm = 2 [default = true];
  if (has_scalenorm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->scalenorm(), output);
  }

  // optional float ptscale = 3 [default = 22];
  if (has_ptscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->ptscale(), output);
  }

  // optional int32 octaves = 4 [default = 4];
  if (has_octaves()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->octaves(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.FreakParamCP)
}

::google::protobuf::uint8* FreakParamCP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.FreakParamCP)
  // optional bool orientnorm = 1 [default = true];
  if (has_orientnorm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->orientnorm(), target);
  }

  // optional bool scalenorm = 2 [default = true];
  if (has_scalenorm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->scalenorm(), target);
  }

  // optional float ptscale = 3 [default = 22];
  if (has_ptscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->ptscale(), target);
  }

  // optional int32 octaves = 4 [default = 4];
  if (has_octaves()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->octaves(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.FreakParamCP)
  return target;
}

int FreakParamCP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool orientnorm = 1 [default = true];
    if (has_orientnorm()) {
      total_size += 1 + 1;
    }

    // optional bool scalenorm = 2 [default = true];
    if (has_scalenorm()) {
      total_size += 1 + 1;
    }

    // optional float ptscale = 3 [default = 22];
    if (has_ptscale()) {
      total_size += 1 + 4;
    }

    // optional int32 octaves = 4 [default = 4];
    if (has_octaves()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->octaves());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FreakParamCP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FreakParamCP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FreakParamCP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FreakParamCP::MergeFrom(const FreakParamCP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orientnorm()) {
      set_orientnorm(from.orientnorm());
    }
    if (from.has_scalenorm()) {
      set_scalenorm(from.scalenorm());
    }
    if (from.has_ptscale()) {
      set_ptscale(from.ptscale());
    }
    if (from.has_octaves()) {
      set_octaves(from.octaves());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FreakParamCP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FreakParamCP::CopyFrom(const FreakParamCP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FreakParamCP::IsInitialized() const {

  return true;
}

void FreakParamCP::Swap(FreakParamCP* other) {
  if (other != this) {
    std::swap(orientnorm_, other->orientnorm_);
    std::swap(scalenorm_, other->scalenorm_);
    std::swap(ptscale_, other->ptscale_);
    std::swap(octaves_, other->octaves_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FreakParamCP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FreakParamCP_descriptor_;
  metadata.reflection = FreakParamCP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StarParamCP::kMaxsizeFieldNumber;
const int StarParamCP::kResponseThreshFieldNumber;
const int StarParamCP::kProjectedThreshFieldNumber;
const int StarParamCP::kBinarizedThreshFieldNumber;
const int StarParamCP::kNmsSizeFieldNumber;
#endif  // !_MSC_VER

StarParamCP::StarParamCP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.StarParamCP)
}

void StarParamCP::InitAsDefaultInstance() {
}

StarParamCP::StarParamCP(const StarParamCP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.StarParamCP)
}

void StarParamCP::SharedCtor() {
  _cached_size_ = 0;
  maxsize_ = 16;
  response_thresh_ = 30;
  projected_thresh_ = 10;
  binarized_thresh_ = 8;
  nms_size_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StarParamCP::~StarParamCP() {
  // @@protoc_insertion_point(destructor:svaf.StarParamCP)
  SharedDtor();
}

void StarParamCP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StarParamCP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StarParamCP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StarParamCP_descriptor_;
}

const StarParamCP& StarParamCP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

StarParamCP* StarParamCP::default_instance_ = NULL;

StarParamCP* StarParamCP::New() const {
  return new StarParamCP;
}

void StarParamCP::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    maxsize_ = 16;
    response_thresh_ = 30;
    projected_thresh_ = 10;
    binarized_thresh_ = 8;
    nms_size_ = 5;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StarParamCP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.StarParamCP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 maxsize = 1 [default = 16];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxsize_)));
          set_has_maxsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_response_thresh;
        break;
      }

      // optional int32 response_thresh = 2 [default = 30];
      case 2: {
        if (tag == 16) {
         parse_response_thresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_thresh_)));
          set_has_response_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_projected_thresh;
        break;
      }

      // optional int32 projected_thresh = 3 [default = 10];
      case 3: {
        if (tag == 24) {
         parse_projected_thresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &projected_thresh_)));
          set_has_projected_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_binarized_thresh;
        break;
      }

      // optional int32 binarized_thresh = 4 [default = 8];
      case 4: {
        if (tag == 32) {
         parse_binarized_thresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &binarized_thresh_)));
          set_has_binarized_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nms_size;
        break;
      }

      // optional int32 nms_size = 5 [default = 5];
      case 5: {
        if (tag == 40) {
         parse_nms_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nms_size_)));
          set_has_nms_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.StarParamCP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.StarParamCP)
  return false;
#undef DO_
}

void StarParamCP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.StarParamCP)
  // optional int32 maxsize = 1 [default = 16];
  if (has_maxsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->maxsize(), output);
  }

  // optional int32 response_thresh = 2 [default = 30];
  if (has_response_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->response_thresh(), output);
  }

  // optional int32 projected_thresh = 3 [default = 10];
  if (has_projected_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->projected_thresh(), output);
  }

  // optional int32 binarized_thresh = 4 [default = 8];
  if (has_binarized_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->binarized_thresh(), output);
  }

  // optional int32 nms_size = 5 [default = 5];
  if (has_nms_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nms_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.StarParamCP)
}

::google::protobuf::uint8* StarParamCP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.StarParamCP)
  // optional int32 maxsize = 1 [default = 16];
  if (has_maxsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->maxsize(), target);
  }

  // optional int32 response_thresh = 2 [default = 30];
  if (has_response_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->response_thresh(), target);
  }

  // optional int32 projected_thresh = 3 [default = 10];
  if (has_projected_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->projected_thresh(), target);
  }

  // optional int32 binarized_thresh = 4 [default = 8];
  if (has_binarized_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->binarized_thresh(), target);
  }

  // optional int32 nms_size = 5 [default = 5];
  if (has_nms_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nms_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.StarParamCP)
  return target;
}

int StarParamCP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 maxsize = 1 [default = 16];
    if (has_maxsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxsize());
    }

    // optional int32 response_thresh = 2 [default = 30];
    if (has_response_thresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->response_thresh());
    }

    // optional int32 projected_thresh = 3 [default = 10];
    if (has_projected_thresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->projected_thresh());
    }

    // optional int32 binarized_thresh = 4 [default = 8];
    if (has_binarized_thresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->binarized_thresh());
    }

    // optional int32 nms_size = 5 [default = 5];
    if (has_nms_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nms_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StarParamCP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StarParamCP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StarParamCP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StarParamCP::MergeFrom(const StarParamCP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxsize()) {
      set_maxsize(from.maxsize());
    }
    if (from.has_response_thresh()) {
      set_response_thresh(from.response_thresh());
    }
    if (from.has_projected_thresh()) {
      set_projected_thresh(from.projected_thresh());
    }
    if (from.has_binarized_thresh()) {
      set_binarized_thresh(from.binarized_thresh());
    }
    if (from.has_nms_size()) {
      set_nms_size(from.nms_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StarParamCP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StarParamCP::CopyFrom(const StarParamCP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StarParamCP::IsInitialized() const {

  return true;
}

void StarParamCP::Swap(StarParamCP* other) {
  if (other != this) {
    std::swap(maxsize_, other->maxsize_);
    std::swap(response_thresh_, other->response_thresh_);
    std::swap(projected_thresh_, other->projected_thresh_);
    std::swap(binarized_thresh_, other->binarized_thresh_);
    std::swap(nms_size_, other->nms_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StarParamCP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StarParamCP_descriptor_;
  metadata.reflection = StarParamCP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SiftParamCP::kNfeaturesFieldNumber;
const int SiftParamCP::kOctavesFieldNumber;
const int SiftParamCP::kContrastThreshFieldNumber;
const int SiftParamCP::kEdgeThreshFieldNumber;
const int SiftParamCP::kSigmaFieldNumber;
#endif  // !_MSC_VER

SiftParamCP::SiftParamCP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.SiftParamCP)
}

void SiftParamCP::InitAsDefaultInstance() {
}

SiftParamCP::SiftParamCP(const SiftParamCP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.SiftParamCP)
}

void SiftParamCP::SharedCtor() {
  _cached_size_ = 0;
  nfeatures_ = 0;
  octaves_ = 3;
  contrast_thresh_ = 0.04f;
  edge_thresh_ = 10;
  sigma_ = 1.6f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SiftParamCP::~SiftParamCP() {
  // @@protoc_insertion_point(destructor:svaf.SiftParamCP)
  SharedDtor();
}

void SiftParamCP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SiftParamCP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SiftParamCP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SiftParamCP_descriptor_;
}

const SiftParamCP& SiftParamCP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

SiftParamCP* SiftParamCP::default_instance_ = NULL;

SiftParamCP* SiftParamCP::New() const {
  return new SiftParamCP;
}

void SiftParamCP::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    nfeatures_ = 0;
    octaves_ = 3;
    contrast_thresh_ = 0.04f;
    edge_thresh_ = 10;
    sigma_ = 1.6f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SiftParamCP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.SiftParamCP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nfeatures = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nfeatures_)));
          set_has_nfeatures();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_octaves;
        break;
      }

      // optional int32 octaves = 2 [default = 3];
      case 2: {
        if (tag == 16) {
         parse_octaves:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &octaves_)));
          set_has_octaves();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_contrast_thresh;
        break;
      }

      // optional float contrast_thresh = 3 [default = 0.04];
      case 3: {
        if (tag == 29) {
         parse_contrast_thresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &contrast_thresh_)));
          set_has_contrast_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_edge_thresh;
        break;
      }

      // optional float edge_thresh = 4 [default = 10];
      case 4: {
        if (tag == 37) {
         parse_edge_thresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &edge_thresh_)));
          set_has_edge_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_sigma;
        break;
      }

      // optional float sigma = 5 [default = 1.6];
      case 5: {
        if (tag == 45) {
         parse_sigma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigma_)));
          set_has_sigma();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.SiftParamCP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.SiftParamCP)
  return false;
#undef DO_
}

void SiftParamCP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.SiftParamCP)
  // optional int32 nfeatures = 1 [default = 0];
  if (has_nfeatures()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nfeatures(), output);
  }

  // optional int32 octaves = 2 [default = 3];
  if (has_octaves()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->octaves(), output);
  }

  // optional float contrast_thresh = 3 [default = 0.04];
  if (has_contrast_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->contrast_thresh(), output);
  }

  // optional float edge_thresh = 4 [default = 10];
  if (has_edge_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->edge_thresh(), output);
  }

  // optional float sigma = 5 [default = 1.6];
  if (has_sigma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->sigma(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.SiftParamCP)
}

::google::protobuf::uint8* SiftParamCP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.SiftParamCP)
  // optional int32 nfeatures = 1 [default = 0];
  if (has_nfeatures()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nfeatures(), target);
  }

  // optional int32 octaves = 2 [default = 3];
  if (has_octaves()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->octaves(), target);
  }

  // optional float contrast_thresh = 3 [default = 0.04];
  if (has_contrast_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->contrast_thresh(), target);
  }

  // optional float edge_thresh = 4 [default = 10];
  if (has_edge_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->edge_thresh(), target);
  }

  // optional float sigma = 5 [default = 1.6];
  if (has_sigma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->sigma(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.SiftParamCP)
  return target;
}

int SiftParamCP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nfeatures = 1 [default = 0];
    if (has_nfeatures()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nfeatures());
    }

    // optional int32 octaves = 2 [default = 3];
    if (has_octaves()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->octaves());
    }

    // optional float contrast_thresh = 3 [default = 0.04];
    if (has_contrast_thresh()) {
      total_size += 1 + 4;
    }

    // optional float edge_thresh = 4 [default = 10];
    if (has_edge_thresh()) {
      total_size += 1 + 4;
    }

    // optional float sigma = 5 [default = 1.6];
    if (has_sigma()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SiftParamCP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SiftParamCP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SiftParamCP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SiftParamCP::MergeFrom(const SiftParamCP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nfeatures()) {
      set_nfeatures(from.nfeatures());
    }
    if (from.has_octaves()) {
      set_octaves(from.octaves());
    }
    if (from.has_contrast_thresh()) {
      set_contrast_thresh(from.contrast_thresh());
    }
    if (from.has_edge_thresh()) {
      set_edge_thresh(from.edge_thresh());
    }
    if (from.has_sigma()) {
      set_sigma(from.sigma());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SiftParamCP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiftParamCP::CopyFrom(const SiftParamCP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiftParamCP::IsInitialized() const {

  return true;
}

void SiftParamCP::Swap(SiftParamCP* other) {
  if (other != this) {
    std::swap(nfeatures_, other->nfeatures_);
    std::swap(octaves_, other->octaves_);
    std::swap(contrast_thresh_, other->contrast_thresh_);
    std::swap(edge_thresh_, other->edge_thresh_);
    std::swap(sigma_, other->sigma_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SiftParamCP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SiftParamCP_descriptor_;
  metadata.reflection = SiftParamCP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SurfParamCP::kHassianThreshFieldNumber;
const int SurfParamCP::kOctavesFieldNumber;
const int SurfParamCP::kIntevalsFieldNumber;
const int SurfParamCP::kExtendedFieldNumber;
const int SurfParamCP::kUprightFieldNumber;
#endif  // !_MSC_VER

SurfParamCP::SurfParamCP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.SurfParamCP)
}

void SurfParamCP::InitAsDefaultInstance() {
}

SurfParamCP::SurfParamCP(const SurfParamCP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.SurfParamCP)
}

void SurfParamCP::SharedCtor() {
  _cached_size_ = 0;
  hassian_thresh_ = 0.0004f;
  octaves_ = 4;
  intevals_ = 2;
  extended_ = false;
  upright_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SurfParamCP::~SurfParamCP() {
  // @@protoc_insertion_point(destructor:svaf.SurfParamCP)
  SharedDtor();
}

void SurfParamCP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SurfParamCP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SurfParamCP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SurfParamCP_descriptor_;
}

const SurfParamCP& SurfParamCP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

SurfParamCP* SurfParamCP::default_instance_ = NULL;

SurfParamCP* SurfParamCP::New() const {
  return new SurfParamCP;
}

void SurfParamCP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SurfParamCP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(extended_, upright_);
    hassian_thresh_ = 0.0004f;
    octaves_ = 4;
    intevals_ = 2;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SurfParamCP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.SurfParamCP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float hassian_thresh = 1 [default = 0.0004];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hassian_thresh_)));
          set_has_hassian_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_octaves;
        break;
      }

      // optional int32 octaves = 2 [default = 4];
      case 2: {
        if (tag == 16) {
         parse_octaves:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &octaves_)));
          set_has_octaves();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_intevals;
        break;
      }

      // optional int32 intevals = 3 [default = 2];
      case 3: {
        if (tag == 24) {
         parse_intevals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intevals_)));
          set_has_intevals();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_extended;
        break;
      }

      // optional bool extended = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_extended:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extended_)));
          set_has_extended();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_upright;
        break;
      }

      // optional bool upright = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_upright:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upright_)));
          set_has_upright();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.SurfParamCP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.SurfParamCP)
  return false;
#undef DO_
}

void SurfParamCP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.SurfParamCP)
  // optional float hassian_thresh = 1 [default = 0.0004];
  if (has_hassian_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->hassian_thresh(), output);
  }

  // optional int32 octaves = 2 [default = 4];
  if (has_octaves()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->octaves(), output);
  }

  // optional int32 intevals = 3 [default = 2];
  if (has_intevals()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->intevals(), output);
  }

  // optional bool extended = 4 [default = false];
  if (has_extended()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->extended(), output);
  }

  // optional bool upright = 5 [default = false];
  if (has_upright()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->upright(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.SurfParamCP)
}

::google::protobuf::uint8* SurfParamCP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.SurfParamCP)
  // optional float hassian_thresh = 1 [default = 0.0004];
  if (has_hassian_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->hassian_thresh(), target);
  }

  // optional int32 octaves = 2 [default = 4];
  if (has_octaves()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->octaves(), target);
  }

  // optional int32 intevals = 3 [default = 2];
  if (has_intevals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->intevals(), target);
  }

  // optional bool extended = 4 [default = false];
  if (has_extended()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->extended(), target);
  }

  // optional bool upright = 5 [default = false];
  if (has_upright()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->upright(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.SurfParamCP)
  return target;
}

int SurfParamCP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float hassian_thresh = 1 [default = 0.0004];
    if (has_hassian_thresh()) {
      total_size += 1 + 4;
    }

    // optional int32 octaves = 2 [default = 4];
    if (has_octaves()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->octaves());
    }

    // optional int32 intevals = 3 [default = 2];
    if (has_intevals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intevals());
    }

    // optional bool extended = 4 [default = false];
    if (has_extended()) {
      total_size += 1 + 1;
    }

    // optional bool upright = 5 [default = false];
    if (has_upright()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurfParamCP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SurfParamCP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SurfParamCP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SurfParamCP::MergeFrom(const SurfParamCP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hassian_thresh()) {
      set_hassian_thresh(from.hassian_thresh());
    }
    if (from.has_octaves()) {
      set_octaves(from.octaves());
    }
    if (from.has_intevals()) {
      set_intevals(from.intevals());
    }
    if (from.has_extended()) {
      set_extended(from.extended());
    }
    if (from.has_upright()) {
      set_upright(from.upright());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SurfParamCP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SurfParamCP::CopyFrom(const SurfParamCP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfParamCP::IsInitialized() const {

  return true;
}

void SurfParamCP::Swap(SurfParamCP* other) {
  if (other != this) {
    std::swap(hassian_thresh_, other->hassian_thresh_);
    std::swap(octaves_, other->octaves_);
    std::swap(intevals_, other->intevals_);
    std::swap(extended_, other->extended_);
    std::swap(upright_, other->upright_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SurfParamCP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SurfParamCP_descriptor_;
  metadata.reflection = SurfParamCP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GFTTParamCP::kMaxcornnersFieldNumber;
const int GFTTParamCP::kQualityFieldNumber;
const int GFTTParamCP::kMindistFieldNumber;
const int GFTTParamCP::kBlocksizeFieldNumber;
const int GFTTParamCP::kUseharrisFieldNumber;
const int GFTTParamCP::kKFieldNumber;
#endif  // !_MSC_VER

GFTTParamCP::GFTTParamCP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.GFTTParamCP)
}

void GFTTParamCP::InitAsDefaultInstance() {
}

GFTTParamCP::GFTTParamCP(const GFTTParamCP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.GFTTParamCP)
}

void GFTTParamCP::SharedCtor() {
  _cached_size_ = 0;
  maxcornners_ = 1000;
  quality_ = 0.01f;
  mindist_ = 1;
  blocksize_ = 3;
  useharris_ = false;
  k_ = 0.04f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GFTTParamCP::~GFTTParamCP() {
  // @@protoc_insertion_point(destructor:svaf.GFTTParamCP)
  SharedDtor();
}

void GFTTParamCP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GFTTParamCP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GFTTParamCP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GFTTParamCP_descriptor_;
}

const GFTTParamCP& GFTTParamCP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

GFTTParamCP* GFTTParamCP::default_instance_ = NULL;

GFTTParamCP* GFTTParamCP::New() const {
  return new GFTTParamCP;
}

void GFTTParamCP::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    maxcornners_ = 1000;
    quality_ = 0.01f;
    mindist_ = 1;
    blocksize_ = 3;
    useharris_ = false;
    k_ = 0.04f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GFTTParamCP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.GFTTParamCP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 maxcornners = 1 [default = 1000];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcornners_)));
          set_has_maxcornners();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_quality;
        break;
      }

      // optional float quality = 2 [default = 0.01];
      case 2: {
        if (tag == 21) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_mindist;
        break;
      }

      // optional float mindist = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_mindist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mindist_)));
          set_has_mindist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_blocksize;
        break;
      }

      // optional int32 blocksize = 4 [default = 3];
      case 4: {
        if (tag == 32) {
         parse_blocksize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blocksize_)));
          set_has_blocksize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_useharris;
        break;
      }

      // optional bool useharris = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_useharris:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useharris_)));
          set_has_useharris();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_k;
        break;
      }

      // optional float k = 6 [default = 0.04];
      case 6: {
        if (tag == 53) {
         parse_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_)));
          set_has_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.GFTTParamCP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.GFTTParamCP)
  return false;
#undef DO_
}

void GFTTParamCP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.GFTTParamCP)
  // optional int32 maxcornners = 1 [default = 1000];
  if (has_maxcornners()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->maxcornners(), output);
  }

  // optional float quality = 2 [default = 0.01];
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->quality(), output);
  }

  // optional float mindist = 3 [default = 1];
  if (has_mindist()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->mindist(), output);
  }

  // optional int32 blocksize = 4 [default = 3];
  if (has_blocksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->blocksize(), output);
  }

  // optional bool useharris = 5 [default = false];
  if (has_useharris()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->useharris(), output);
  }

  // optional float k = 6 [default = 0.04];
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->k(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.GFTTParamCP)
}

::google::protobuf::uint8* GFTTParamCP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.GFTTParamCP)
  // optional int32 maxcornners = 1 [default = 1000];
  if (has_maxcornners()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->maxcornners(), target);
  }

  // optional float quality = 2 [default = 0.01];
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->quality(), target);
  }

  // optional float mindist = 3 [default = 1];
  if (has_mindist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->mindist(), target);
  }

  // optional int32 blocksize = 4 [default = 3];
  if (has_blocksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->blocksize(), target);
  }

  // optional bool useharris = 5 [default = false];
  if (has_useharris()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->useharris(), target);
  }

  // optional float k = 6 [default = 0.04];
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->k(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.GFTTParamCP)
  return target;
}

int GFTTParamCP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 maxcornners = 1 [default = 1000];
    if (has_maxcornners()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcornners());
    }

    // optional float quality = 2 [default = 0.01];
    if (has_quality()) {
      total_size += 1 + 4;
    }

    // optional float mindist = 3 [default = 1];
    if (has_mindist()) {
      total_size += 1 + 4;
    }

    // optional int32 blocksize = 4 [default = 3];
    if (has_blocksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blocksize());
    }

    // optional bool useharris = 5 [default = false];
    if (has_useharris()) {
      total_size += 1 + 1;
    }

    // optional float k = 6 [default = 0.04];
    if (has_k()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GFTTParamCP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GFTTParamCP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GFTTParamCP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GFTTParamCP::MergeFrom(const GFTTParamCP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxcornners()) {
      set_maxcornners(from.maxcornners());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_mindist()) {
      set_mindist(from.mindist());
    }
    if (from.has_blocksize()) {
      set_blocksize(from.blocksize());
    }
    if (from.has_useharris()) {
      set_useharris(from.useharris());
    }
    if (from.has_k()) {
      set_k(from.k());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GFTTParamCP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GFTTParamCP::CopyFrom(const GFTTParamCP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GFTTParamCP::IsInitialized() const {

  return true;
}

void GFTTParamCP::Swap(GFTTParamCP* other) {
  if (other != this) {
    std::swap(maxcornners_, other->maxcornners_);
    std::swap(quality_, other->quality_);
    std::swap(mindist_, other->mindist_);
    std::swap(blocksize_, other->blocksize_);
    std::swap(useharris_, other->useharris_);
    std::swap(k_, other->k_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GFTTParamCP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GFTTParamCP_descriptor_;
  metadata.reflection = GFTTParamCP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HarrisParamCP::kMaxcornnersFieldNumber;
const int HarrisParamCP::kQualityFieldNumber;
const int HarrisParamCP::kMindistFieldNumber;
const int HarrisParamCP::kBlocksizeFieldNumber;
const int HarrisParamCP::kKFieldNumber;
#endif  // !_MSC_VER

HarrisParamCP::HarrisParamCP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.HarrisParamCP)
}

void HarrisParamCP::InitAsDefaultInstance() {
}

HarrisParamCP::HarrisParamCP(const HarrisParamCP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.HarrisParamCP)
}

void HarrisParamCP::SharedCtor() {
  _cached_size_ = 0;
  maxcornners_ = 1000;
  quality_ = 0.01f;
  mindist_ = 1;
  blocksize_ = 3;
  k_ = 0.04f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HarrisParamCP::~HarrisParamCP() {
  // @@protoc_insertion_point(destructor:svaf.HarrisParamCP)
  SharedDtor();
}

void HarrisParamCP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HarrisParamCP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HarrisParamCP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HarrisParamCP_descriptor_;
}

const HarrisParamCP& HarrisParamCP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

HarrisParamCP* HarrisParamCP::default_instance_ = NULL;

HarrisParamCP* HarrisParamCP::New() const {
  return new HarrisParamCP;
}

void HarrisParamCP::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    maxcornners_ = 1000;
    quality_ = 0.01f;
    mindist_ = 1;
    blocksize_ = 3;
    k_ = 0.04f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HarrisParamCP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.HarrisParamCP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 maxcornners = 1 [default = 1000];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcornners_)));
          set_has_maxcornners();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_quality;
        break;
      }

      // optional float quality = 2 [default = 0.01];
      case 2: {
        if (tag == 21) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_mindist;
        break;
      }

      // optional float mindist = 3 [default = 1];
      case 3: {
        if (tag == 29) {
         parse_mindist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mindist_)));
          set_has_mindist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_blocksize;
        break;
      }

      // optional int32 blocksize = 4 [default = 3];
      case 4: {
        if (tag == 32) {
         parse_blocksize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blocksize_)));
          set_has_blocksize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_k;
        break;
      }

      // optional float k = 6 [default = 0.04];
      case 6: {
        if (tag == 53) {
         parse_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &k_)));
          set_has_k();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.HarrisParamCP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.HarrisParamCP)
  return false;
#undef DO_
}

void HarrisParamCP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.HarrisParamCP)
  // optional int32 maxcornners = 1 [default = 1000];
  if (has_maxcornners()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->maxcornners(), output);
  }

  // optional float quality = 2 [default = 0.01];
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->quality(), output);
  }

  // optional float mindist = 3 [default = 1];
  if (has_mindist()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->mindist(), output);
  }

  // optional int32 blocksize = 4 [default = 3];
  if (has_blocksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->blocksize(), output);
  }

  // optional float k = 6 [default = 0.04];
  if (has_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->k(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.HarrisParamCP)
}

::google::protobuf::uint8* HarrisParamCP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.HarrisParamCP)
  // optional int32 maxcornners = 1 [default = 1000];
  if (has_maxcornners()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->maxcornners(), target);
  }

  // optional float quality = 2 [default = 0.01];
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->quality(), target);
  }

  // optional float mindist = 3 [default = 1];
  if (has_mindist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->mindist(), target);
  }

  // optional int32 blocksize = 4 [default = 3];
  if (has_blocksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->blocksize(), target);
  }

  // optional float k = 6 [default = 0.04];
  if (has_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->k(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.HarrisParamCP)
  return target;
}

int HarrisParamCP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 maxcornners = 1 [default = 1000];
    if (has_maxcornners()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcornners());
    }

    // optional float quality = 2 [default = 0.01];
    if (has_quality()) {
      total_size += 1 + 4;
    }

    // optional float mindist = 3 [default = 1];
    if (has_mindist()) {
      total_size += 1 + 4;
    }

    // optional int32 blocksize = 4 [default = 3];
    if (has_blocksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blocksize());
    }

    // optional float k = 6 [default = 0.04];
    if (has_k()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HarrisParamCP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HarrisParamCP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HarrisParamCP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HarrisParamCP::MergeFrom(const HarrisParamCP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxcornners()) {
      set_maxcornners(from.maxcornners());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_mindist()) {
      set_mindist(from.mindist());
    }
    if (from.has_blocksize()) {
      set_blocksize(from.blocksize());
    }
    if (from.has_k()) {
      set_k(from.k());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HarrisParamCP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HarrisParamCP::CopyFrom(const HarrisParamCP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HarrisParamCP::IsInitialized() const {

  return true;
}

void HarrisParamCP::Swap(HarrisParamCP* other) {
  if (other != this) {
    std::swap(maxcornners_, other->maxcornners_);
    std::swap(quality_, other->quality_);
    std::swap(mindist_, other->mindist_);
    std::swap(blocksize_, other->blocksize_);
    std::swap(k_, other->k_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HarrisParamCP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HarrisParamCP_descriptor_;
  metadata.reflection = HarrisParamCP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DenseParamCP::kInitfeatscaleFieldNumber;
const int DenseParamCP::kFeatscalelevelFieldNumber;
const int DenseParamCP::kFeatscalemulFieldNumber;
const int DenseParamCP::kInitxystepFieldNumber;
const int DenseParamCP::kInitboundFieldNumber;
const int DenseParamCP::kVaryxyscaleFieldNumber;
const int DenseParamCP::kVarybdscaleFieldNumber;
#endif  // !_MSC_VER

DenseParamCP::DenseParamCP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.DenseParamCP)
}

void DenseParamCP::InitAsDefaultInstance() {
}

DenseParamCP::DenseParamCP(const DenseParamCP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.DenseParamCP)
}

void DenseParamCP::SharedCtor() {
  _cached_size_ = 0;
  initfeatscale_ = 1;
  featscalelevel_ = 1;
  featscalemul_ = 0.1f;
  initxystep_ = 6;
  initbound_ = 0;
  varyxyscale_ = true;
  varybdscale_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DenseParamCP::~DenseParamCP() {
  // @@protoc_insertion_point(destructor:svaf.DenseParamCP)
  SharedDtor();
}

void DenseParamCP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DenseParamCP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DenseParamCP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DenseParamCP_descriptor_;
}

const DenseParamCP& DenseParamCP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

DenseParamCP* DenseParamCP::default_instance_ = NULL;

DenseParamCP* DenseParamCP::New() const {
  return new DenseParamCP;
}

void DenseParamCP::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    initfeatscale_ = 1;
    featscalelevel_ = 1;
    featscalemul_ = 0.1f;
    initxystep_ = 6;
    initbound_ = 0;
    varyxyscale_ = true;
    varybdscale_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DenseParamCP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.DenseParamCP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float initfeatscale = 1 [default = 1];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &initfeatscale_)));
          set_has_initfeatscale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_featscalelevel;
        break;
      }

      // optional int32 featscalelevel = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_featscalelevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &featscalelevel_)));
          set_has_featscalelevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_featscalemul;
        break;
      }

      // optional float featscalemul = 3 [default = 0.1];
      case 3: {
        if (tag == 29) {
         parse_featscalemul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &featscalemul_)));
          set_has_featscalemul();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_initxystep;
        break;
      }

      // optional int32 initxystep = 4 [default = 6];
      case 4: {
        if (tag == 32) {
         parse_initxystep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initxystep_)));
          set_has_initxystep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_initbound;
        break;
      }

      // optional int32 initbound = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_initbound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initbound_)));
          set_has_initbound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_varyxyscale;
        break;
      }

      // optional bool varyxyscale = 6 [default = true];
      case 6: {
        if (tag == 48) {
         parse_varyxyscale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &varyxyscale_)));
          set_has_varyxyscale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_varybdscale;
        break;
      }

      // optional bool varybdscale = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_varybdscale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &varybdscale_)));
          set_has_varybdscale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.DenseParamCP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.DenseParamCP)
  return false;
#undef DO_
}

void DenseParamCP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.DenseParamCP)
  // optional float initfeatscale = 1 [default = 1];
  if (has_initfeatscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->initfeatscale(), output);
  }

  // optional int32 featscalelevel = 2 [default = 1];
  if (has_featscalelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->featscalelevel(), output);
  }

  // optional float featscalemul = 3 [default = 0.1];
  if (has_featscalemul()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->featscalemul(), output);
  }

  // optional int32 initxystep = 4 [default = 6];
  if (has_initxystep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->initxystep(), output);
  }

  // optional int32 initbound = 5 [default = 0];
  if (has_initbound()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->initbound(), output);
  }

  // optional bool varyxyscale = 6 [default = true];
  if (has_varyxyscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->varyxyscale(), output);
  }

  // optional bool varybdscale = 7 [default = false];
  if (has_varybdscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->varybdscale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.DenseParamCP)
}

::google::protobuf::uint8* DenseParamCP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.DenseParamCP)
  // optional float initfeatscale = 1 [default = 1];
  if (has_initfeatscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->initfeatscale(), target);
  }

  // optional int32 featscalelevel = 2 [default = 1];
  if (has_featscalelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->featscalelevel(), target);
  }

  // optional float featscalemul = 3 [default = 0.1];
  if (has_featscalemul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->featscalemul(), target);
  }

  // optional int32 initxystep = 4 [default = 6];
  if (has_initxystep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->initxystep(), target);
  }

  // optional int32 initbound = 5 [default = 0];
  if (has_initbound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->initbound(), target);
  }

  // optional bool varyxyscale = 6 [default = true];
  if (has_varyxyscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->varyxyscale(), target);
  }

  // optional bool varybdscale = 7 [default = false];
  if (has_varybdscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->varybdscale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.DenseParamCP)
  return target;
}

int DenseParamCP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float initfeatscale = 1 [default = 1];
    if (has_initfeatscale()) {
      total_size += 1 + 4;
    }

    // optional int32 featscalelevel = 2 [default = 1];
    if (has_featscalelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->featscalelevel());
    }

    // optional float featscalemul = 3 [default = 0.1];
    if (has_featscalemul()) {
      total_size += 1 + 4;
    }

    // optional int32 initxystep = 4 [default = 6];
    if (has_initxystep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->initxystep());
    }

    // optional int32 initbound = 5 [default = 0];
    if (has_initbound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->initbound());
    }

    // optional bool varyxyscale = 6 [default = true];
    if (has_varyxyscale()) {
      total_size += 1 + 1;
    }

    // optional bool varybdscale = 7 [default = false];
    if (has_varybdscale()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DenseParamCP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DenseParamCP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DenseParamCP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DenseParamCP::MergeFrom(const DenseParamCP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_initfeatscale()) {
      set_initfeatscale(from.initfeatscale());
    }
    if (from.has_featscalelevel()) {
      set_featscalelevel(from.featscalelevel());
    }
    if (from.has_featscalemul()) {
      set_featscalemul(from.featscalemul());
    }
    if (from.has_initxystep()) {
      set_initxystep(from.initxystep());
    }
    if (from.has_initbound()) {
      set_initbound(from.initbound());
    }
    if (from.has_varyxyscale()) {
      set_varyxyscale(from.varyxyscale());
    }
    if (from.has_varybdscale()) {
      set_varybdscale(from.varybdscale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DenseParamCP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DenseParamCP::CopyFrom(const DenseParamCP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenseParamCP::IsInitialized() const {

  return true;
}

void DenseParamCP::Swap(DenseParamCP* other) {
  if (other != this) {
    std::swap(initfeatscale_, other->initfeatscale_);
    std::swap(featscalelevel_, other->featscalelevel_);
    std::swap(featscalemul_, other->featscalemul_);
    std::swap(initxystep_, other->initxystep_);
    std::swap(initbound_, other->initbound_);
    std::swap(varyxyscale_, other->varyxyscale_);
    std::swap(varybdscale_, other->varybdscale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DenseParamCP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DenseParamCP_descriptor_;
  metadata.reflection = DenseParamCP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SimpleBlobParamCP::SimpleBlobParamCP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.SimpleBlobParamCP)
}

void SimpleBlobParamCP::InitAsDefaultInstance() {
}

SimpleBlobParamCP::SimpleBlobParamCP(const SimpleBlobParamCP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.SimpleBlobParamCP)
}

void SimpleBlobParamCP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleBlobParamCP::~SimpleBlobParamCP() {
  // @@protoc_insertion_point(destructor:svaf.SimpleBlobParamCP)
  SharedDtor();
}

void SimpleBlobParamCP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimpleBlobParamCP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleBlobParamCP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleBlobParamCP_descriptor_;
}

const SimpleBlobParamCP& SimpleBlobParamCP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

SimpleBlobParamCP* SimpleBlobParamCP::default_instance_ = NULL;

SimpleBlobParamCP* SimpleBlobParamCP::New() const {
  return new SimpleBlobParamCP;
}

void SimpleBlobParamCP::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimpleBlobParamCP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.SimpleBlobParamCP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.SimpleBlobParamCP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.SimpleBlobParamCP)
  return false;
#undef DO_
}

void SimpleBlobParamCP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.SimpleBlobParamCP)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.SimpleBlobParamCP)
}

::google::protobuf::uint8* SimpleBlobParamCP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.SimpleBlobParamCP)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.SimpleBlobParamCP)
  return target;
}

int SimpleBlobParamCP::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleBlobParamCP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimpleBlobParamCP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimpleBlobParamCP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimpleBlobParamCP::MergeFrom(const SimpleBlobParamCP& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimpleBlobParamCP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleBlobParamCP::CopyFrom(const SimpleBlobParamCP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleBlobParamCP::IsInitialized() const {

  return true;
}

void SimpleBlobParamCP::Swap(SimpleBlobParamCP* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimpleBlobParamCP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleBlobParamCP_descriptor_;
  metadata.reflection = SimpleBlobParamCP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AkazeParamCP::AkazeParamCP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.AkazeParamCP)
}

void AkazeParamCP::InitAsDefaultInstance() {
}

AkazeParamCP::AkazeParamCP(const AkazeParamCP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.AkazeParamCP)
}

void AkazeParamCP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AkazeParamCP::~AkazeParamCP() {
  // @@protoc_insertion_point(destructor:svaf.AkazeParamCP)
  SharedDtor();
}

void AkazeParamCP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AkazeParamCP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AkazeParamCP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AkazeParamCP_descriptor_;
}

const AkazeParamCP& AkazeParamCP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

AkazeParamCP* AkazeParamCP::default_instance_ = NULL;

AkazeParamCP* AkazeParamCP::New() const {
  return new AkazeParamCP;
}

void AkazeParamCP::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AkazeParamCP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.AkazeParamCP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.AkazeParamCP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.AkazeParamCP)
  return false;
#undef DO_
}

void AkazeParamCP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.AkazeParamCP)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.AkazeParamCP)
}

::google::protobuf::uint8* AkazeParamCP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.AkazeParamCP)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.AkazeParamCP)
  return target;
}

int AkazeParamCP::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AkazeParamCP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AkazeParamCP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AkazeParamCP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AkazeParamCP::MergeFrom(const AkazeParamCP& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AkazeParamCP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AkazeParamCP::CopyFrom(const AkazeParamCP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AkazeParamCP::IsInitialized() const {

  return true;
}

void AkazeParamCP::Swap(AkazeParamCP* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AkazeParamCP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AkazeParamCP_descriptor_;
  metadata.reflection = AkazeParamCP_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CVPointParameter_PointType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CVPointParameter_PointType_descriptor_;
}
bool CVPointParameter_PointType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CVPointParameter_PointType CVPointParameter::FAST;
const CVPointParameter_PointType CVPointParameter::FASTX;
const CVPointParameter_PointType CVPointParameter::MSER;
const CVPointParameter_PointType CVPointParameter::ORB;
const CVPointParameter_PointType CVPointParameter::BRISK;
const CVPointParameter_PointType CVPointParameter::FREAK;
const CVPointParameter_PointType CVPointParameter::STAR;
const CVPointParameter_PointType CVPointParameter::SIFT;
const CVPointParameter_PointType CVPointParameter::SURF;
const CVPointParameter_PointType CVPointParameter::GFTT;
const CVPointParameter_PointType CVPointParameter::HARRIS;
const CVPointParameter_PointType CVPointParameter::DENSE;
const CVPointParameter_PointType CVPointParameter::SBLOB;
const CVPointParameter_PointType CVPointParameter::AKAZE;
const CVPointParameter_PointType CVPointParameter::PointType_MIN;
const CVPointParameter_PointType CVPointParameter::PointType_MAX;
const int CVPointParameter::PointType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CVPointParameter::kTypeFieldNumber;
const int CVPointParameter::kIsaddFieldNumber;
const int CVPointParameter::kFastParamFieldNumber;
const int CVPointParameter::kMserParamFieldNumber;
const int CVPointParameter::kOrbParamFieldNumber;
const int CVPointParameter::kBriskParamFieldNumber;
const int CVPointParameter::kFreakParamFieldNumber;
const int CVPointParameter::kStarParamFieldNumber;
const int CVPointParameter::kSiftParamFieldNumber;
const int CVPointParameter::kSurfParamFieldNumber;
const int CVPointParameter::kGfttParamFieldNumber;
const int CVPointParameter::kHarrisParamFieldNumber;
const int CVPointParameter::kDenseParamFieldNumber;
const int CVPointParameter::kSbParamFieldNumber;
const int CVPointParameter::kAkazeParamFieldNumber;
#endif  // !_MSC_VER

CVPointParameter::CVPointParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.CVPointParameter)
}

void CVPointParameter::InitAsDefaultInstance() {
  fast_param_ = const_cast< ::svaf::FastParamCP*>(&::svaf::FastParamCP::default_instance());
  mser_param_ = const_cast< ::svaf::MSERParamCP*>(&::svaf::MSERParamCP::default_instance());
  orb_param_ = const_cast< ::svaf::ORBParamCP*>(&::svaf::ORBParamCP::default_instance());
  brisk_param_ = const_cast< ::svaf::BriskParamCP*>(&::svaf::BriskParamCP::default_instance());
  freak_param_ = const_cast< ::svaf::FreakParamCP*>(&::svaf::FreakParamCP::default_instance());
  star_param_ = const_cast< ::svaf::StarParamCP*>(&::svaf::StarParamCP::default_instance());
  sift_param_ = const_cast< ::svaf::SiftParamCP*>(&::svaf::SiftParamCP::default_instance());
  surf_param_ = const_cast< ::svaf::SurfParamCP*>(&::svaf::SurfParamCP::default_instance());
  gftt_param_ = const_cast< ::svaf::GFTTParamCP*>(&::svaf::GFTTParamCP::default_instance());
  harris_param_ = const_cast< ::svaf::HarrisParamCP*>(&::svaf::HarrisParamCP::default_instance());
  dense_param_ = const_cast< ::svaf::DenseParamCP*>(&::svaf::DenseParamCP::default_instance());
  sb_param_ = const_cast< ::svaf::SimpleBlobParamCP*>(&::svaf::SimpleBlobParamCP::default_instance());
  akaze_param_ = const_cast< ::svaf::AkazeParamCP*>(&::svaf::AkazeParamCP::default_instance());
}

CVPointParameter::CVPointParameter(const CVPointParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.CVPointParameter)
}

void CVPointParameter::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  isadd_ = false;
  fast_param_ = NULL;
  mser_param_ = NULL;
  orb_param_ = NULL;
  brisk_param_ = NULL;
  freak_param_ = NULL;
  star_param_ = NULL;
  sift_param_ = NULL;
  surf_param_ = NULL;
  gftt_param_ = NULL;
  harris_param_ = NULL;
  dense_param_ = NULL;
  sb_param_ = NULL;
  akaze_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CVPointParameter::~CVPointParameter() {
  // @@protoc_insertion_point(destructor:svaf.CVPointParameter)
  SharedDtor();
}

void CVPointParameter::SharedDtor() {
  if (this != default_instance_) {
    delete fast_param_;
    delete mser_param_;
    delete orb_param_;
    delete brisk_param_;
    delete freak_param_;
    delete star_param_;
    delete sift_param_;
    delete surf_param_;
    delete gftt_param_;
    delete harris_param_;
    delete dense_param_;
    delete sb_param_;
    delete akaze_param_;
  }
}

void CVPointParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CVPointParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CVPointParameter_descriptor_;
}

const CVPointParameter& CVPointParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

CVPointParameter* CVPointParameter::default_instance_ = NULL;

CVPointParameter* CVPointParameter::New() const {
  return new CVPointParameter;
}

void CVPointParameter::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    type_ = 1;
    isadd_ = false;
    if (has_fast_param()) {
      if (fast_param_ != NULL) fast_param_->::svaf::FastParamCP::Clear();
    }
    if (has_mser_param()) {
      if (mser_param_ != NULL) mser_param_->::svaf::MSERParamCP::Clear();
    }
    if (has_orb_param()) {
      if (orb_param_ != NULL) orb_param_->::svaf::ORBParamCP::Clear();
    }
    if (has_brisk_param()) {
      if (brisk_param_ != NULL) brisk_param_->::svaf::BriskParamCP::Clear();
    }
    if (has_freak_param()) {
      if (freak_param_ != NULL) freak_param_->::svaf::FreakParamCP::Clear();
    }
    if (has_star_param()) {
      if (star_param_ != NULL) star_param_->::svaf::StarParamCP::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    if (has_sift_param()) {
      if (sift_param_ != NULL) sift_param_->::svaf::SiftParamCP::Clear();
    }
    if (has_surf_param()) {
      if (surf_param_ != NULL) surf_param_->::svaf::SurfParamCP::Clear();
    }
    if (has_gftt_param()) {
      if (gftt_param_ != NULL) gftt_param_->::svaf::GFTTParamCP::Clear();
    }
    if (has_harris_param()) {
      if (harris_param_ != NULL) harris_param_->::svaf::HarrisParamCP::Clear();
    }
    if (has_dense_param()) {
      if (dense_param_ != NULL) dense_param_->::svaf::DenseParamCP::Clear();
    }
    if (has_sb_param()) {
      if (sb_param_ != NULL) sb_param_->::svaf::SimpleBlobParamCP::Clear();
    }
    if (has_akaze_param()) {
      if (akaze_param_ != NULL) akaze_param_->::svaf::AkazeParamCP::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CVPointParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.CVPointParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .svaf.CVPointParameter.PointType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::svaf::CVPointParameter_PointType_IsValid(value)) {
            set_type(static_cast< ::svaf::CVPointParameter_PointType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isadd;
        break;
      }

      // optional bool isadd = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_isadd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isadd_)));
          set_has_isadd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_fast_param;
        break;
      }

      // optional .svaf.FastParamCP fast_param = 11;
      case 11: {
        if (tag == 90) {
         parse_fast_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fast_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_mser_param;
        break;
      }

      // optional .svaf.MSERParamCP mser_param = 13;
      case 13: {
        if (tag == 106) {
         parse_mser_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mser_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_orb_param;
        break;
      }

      // optional .svaf.ORBParamCP orb_param = 14;
      case 14: {
        if (tag == 114) {
         parse_orb_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orb_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_brisk_param;
        break;
      }

      // optional .svaf.BriskParamCP brisk_param = 15;
      case 15: {
        if (tag == 122) {
         parse_brisk_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brisk_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_freak_param;
        break;
      }

      // optional .svaf.FreakParamCP freak_param = 16;
      case 16: {
        if (tag == 130) {
         parse_freak_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_freak_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_star_param;
        break;
      }

      // optional .svaf.StarParamCP star_param = 17;
      case 17: {
        if (tag == 138) {
         parse_star_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_star_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_sift_param;
        break;
      }

      // optional .svaf.SiftParamCP sift_param = 18;
      case 18: {
        if (tag == 146) {
         parse_sift_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sift_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_surf_param;
        break;
      }

      // optional .svaf.SurfParamCP surf_param = 19;
      case 19: {
        if (tag == 154) {
         parse_surf_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_surf_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_gftt_param;
        break;
      }

      // optional .svaf.GFTTParamCP gftt_param = 20;
      case 20: {
        if (tag == 162) {
         parse_gftt_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gftt_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_harris_param;
        break;
      }

      // optional .svaf.HarrisParamCP harris_param = 21;
      case 21: {
        if (tag == 170) {
         parse_harris_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_harris_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_dense_param;
        break;
      }

      // optional .svaf.DenseParamCP dense_param = 22;
      case 22: {
        if (tag == 178) {
         parse_dense_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dense_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_sb_param;
        break;
      }

      // optional .svaf.SimpleBlobParamCP sb_param = 23;
      case 23: {
        if (tag == 186) {
         parse_sb_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sb_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_akaze_param;
        break;
      }

      // optional .svaf.AkazeParamCP akaze_param = 24;
      case 24: {
        if (tag == 194) {
         parse_akaze_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_akaze_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.CVPointParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.CVPointParameter)
  return false;
#undef DO_
}

void CVPointParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.CVPointParameter)
  // optional .svaf.CVPointParameter.PointType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bool isadd = 2 [default = false];
  if (has_isadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isadd(), output);
  }

  // optional .svaf.FastParamCP fast_param = 11;
  if (has_fast_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->fast_param(), output);
  }

  // optional .svaf.MSERParamCP mser_param = 13;
  if (has_mser_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->mser_param(), output);
  }

  // optional .svaf.ORBParamCP orb_param = 14;
  if (has_orb_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->orb_param(), output);
  }

  // optional .svaf.BriskParamCP brisk_param = 15;
  if (has_brisk_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->brisk_param(), output);
  }

  // optional .svaf.FreakParamCP freak_param = 16;
  if (has_freak_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->freak_param(), output);
  }

  // optional .svaf.StarParamCP star_param = 17;
  if (has_star_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->star_param(), output);
  }

  // optional .svaf.SiftParamCP sift_param = 18;
  if (has_sift_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->sift_param(), output);
  }

  // optional .svaf.SurfParamCP surf_param = 19;
  if (has_surf_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->surf_param(), output);
  }

  // optional .svaf.GFTTParamCP gftt_param = 20;
  if (has_gftt_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->gftt_param(), output);
  }

  // optional .svaf.HarrisParamCP harris_param = 21;
  if (has_harris_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->harris_param(), output);
  }

  // optional .svaf.DenseParamCP dense_param = 22;
  if (has_dense_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->dense_param(), output);
  }

  // optional .svaf.SimpleBlobParamCP sb_param = 23;
  if (has_sb_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->sb_param(), output);
  }

  // optional .svaf.AkazeParamCP akaze_param = 24;
  if (has_akaze_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->akaze_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.CVPointParameter)
}

::google::protobuf::uint8* CVPointParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.CVPointParameter)
  // optional .svaf.CVPointParameter.PointType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bool isadd = 2 [default = false];
  if (has_isadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isadd(), target);
  }

  // optional .svaf.FastParamCP fast_param = 11;
  if (has_fast_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->fast_param(), target);
  }

  // optional .svaf.MSERParamCP mser_param = 13;
  if (has_mser_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->mser_param(), target);
  }

  // optional .svaf.ORBParamCP orb_param = 14;
  if (has_orb_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->orb_param(), target);
  }

  // optional .svaf.BriskParamCP brisk_param = 15;
  if (has_brisk_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->brisk_param(), target);
  }

  // optional .svaf.FreakParamCP freak_param = 16;
  if (has_freak_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->freak_param(), target);
  }

  // optional .svaf.StarParamCP star_param = 17;
  if (has_star_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->star_param(), target);
  }

  // optional .svaf.SiftParamCP sift_param = 18;
  if (has_sift_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->sift_param(), target);
  }

  // optional .svaf.SurfParamCP surf_param = 19;
  if (has_surf_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->surf_param(), target);
  }

  // optional .svaf.GFTTParamCP gftt_param = 20;
  if (has_gftt_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->gftt_param(), target);
  }

  // optional .svaf.HarrisParamCP harris_param = 21;
  if (has_harris_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->harris_param(), target);
  }

  // optional .svaf.DenseParamCP dense_param = 22;
  if (has_dense_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->dense_param(), target);
  }

  // optional .svaf.SimpleBlobParamCP sb_param = 23;
  if (has_sb_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->sb_param(), target);
  }

  // optional .svaf.AkazeParamCP akaze_param = 24;
  if (has_akaze_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->akaze_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.CVPointParameter)
  return target;
}

int CVPointParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .svaf.CVPointParameter.PointType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool isadd = 2 [default = false];
    if (has_isadd()) {
      total_size += 1 + 1;
    }

    // optional .svaf.FastParamCP fast_param = 11;
    if (has_fast_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fast_param());
    }

    // optional .svaf.MSERParamCP mser_param = 13;
    if (has_mser_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mser_param());
    }

    // optional .svaf.ORBParamCP orb_param = 14;
    if (has_orb_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orb_param());
    }

    // optional .svaf.BriskParamCP brisk_param = 15;
    if (has_brisk_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->brisk_param());
    }

    // optional .svaf.FreakParamCP freak_param = 16;
    if (has_freak_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->freak_param());
    }

    // optional .svaf.StarParamCP star_param = 17;
    if (has_star_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->star_param());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .svaf.SiftParamCP sift_param = 18;
    if (has_sift_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sift_param());
    }

    // optional .svaf.SurfParamCP surf_param = 19;
    if (has_surf_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->surf_param());
    }

    // optional .svaf.GFTTParamCP gftt_param = 20;
    if (has_gftt_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gftt_param());
    }

    // optional .svaf.HarrisParamCP harris_param = 21;
    if (has_harris_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->harris_param());
    }

    // optional .svaf.DenseParamCP dense_param = 22;
    if (has_dense_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dense_param());
    }

    // optional .svaf.SimpleBlobParamCP sb_param = 23;
    if (has_sb_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sb_param());
    }

    // optional .svaf.AkazeParamCP akaze_param = 24;
    if (has_akaze_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->akaze_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CVPointParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CVPointParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CVPointParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CVPointParameter::MergeFrom(const CVPointParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_isadd()) {
      set_isadd(from.isadd());
    }
    if (from.has_fast_param()) {
      mutable_fast_param()->::svaf::FastParamCP::MergeFrom(from.fast_param());
    }
    if (from.has_mser_param()) {
      mutable_mser_param()->::svaf::MSERParamCP::MergeFrom(from.mser_param());
    }
    if (from.has_orb_param()) {
      mutable_orb_param()->::svaf::ORBParamCP::MergeFrom(from.orb_param());
    }
    if (from.has_brisk_param()) {
      mutable_brisk_param()->::svaf::BriskParamCP::MergeFrom(from.brisk_param());
    }
    if (from.has_freak_param()) {
      mutable_freak_param()->::svaf::FreakParamCP::MergeFrom(from.freak_param());
    }
    if (from.has_star_param()) {
      mutable_star_param()->::svaf::StarParamCP::MergeFrom(from.star_param());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sift_param()) {
      mutable_sift_param()->::svaf::SiftParamCP::MergeFrom(from.sift_param());
    }
    if (from.has_surf_param()) {
      mutable_surf_param()->::svaf::SurfParamCP::MergeFrom(from.surf_param());
    }
    if (from.has_gftt_param()) {
      mutable_gftt_param()->::svaf::GFTTParamCP::MergeFrom(from.gftt_param());
    }
    if (from.has_harris_param()) {
      mutable_harris_param()->::svaf::HarrisParamCP::MergeFrom(from.harris_param());
    }
    if (from.has_dense_param()) {
      mutable_dense_param()->::svaf::DenseParamCP::MergeFrom(from.dense_param());
    }
    if (from.has_sb_param()) {
      mutable_sb_param()->::svaf::SimpleBlobParamCP::MergeFrom(from.sb_param());
    }
    if (from.has_akaze_param()) {
      mutable_akaze_param()->::svaf::AkazeParamCP::MergeFrom(from.akaze_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CVPointParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVPointParameter::CopyFrom(const CVPointParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVPointParameter::IsInitialized() const {

  return true;
}

void CVPointParameter::Swap(CVPointParameter* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(isadd_, other->isadd_);
    std::swap(fast_param_, other->fast_param_);
    std::swap(mser_param_, other->mser_param_);
    std::swap(orb_param_, other->orb_param_);
    std::swap(brisk_param_, other->brisk_param_);
    std::swap(freak_param_, other->freak_param_);
    std::swap(star_param_, other->star_param_);
    std::swap(sift_param_, other->sift_param_);
    std::swap(surf_param_, other->surf_param_);
    std::swap(gftt_param_, other->gftt_param_);
    std::swap(harris_param_, other->harris_param_);
    std::swap(dense_param_, other->dense_param_);
    std::swap(sb_param_, other->sb_param_);
    std::swap(akaze_param_, other->akaze_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CVPointParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CVPointParameter_descriptor_;
  metadata.reflection = CVPointParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FeatureDescriptorParameter::FeatureDescriptorParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.FeatureDescriptorParameter)
}

void FeatureDescriptorParameter::InitAsDefaultInstance() {
}

FeatureDescriptorParameter::FeatureDescriptorParameter(const FeatureDescriptorParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.FeatureDescriptorParameter)
}

void FeatureDescriptorParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureDescriptorParameter::~FeatureDescriptorParameter() {
  // @@protoc_insertion_point(destructor:svaf.FeatureDescriptorParameter)
  SharedDtor();
}

void FeatureDescriptorParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeatureDescriptorParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureDescriptorParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureDescriptorParameter_descriptor_;
}

const FeatureDescriptorParameter& FeatureDescriptorParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

FeatureDescriptorParameter* FeatureDescriptorParameter::default_instance_ = NULL;

FeatureDescriptorParameter* FeatureDescriptorParameter::New() const {
  return new FeatureDescriptorParameter;
}

void FeatureDescriptorParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeatureDescriptorParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.FeatureDescriptorParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.FeatureDescriptorParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.FeatureDescriptorParameter)
  return false;
#undef DO_
}

void FeatureDescriptorParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.FeatureDescriptorParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.FeatureDescriptorParameter)
}

::google::protobuf::uint8* FeatureDescriptorParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.FeatureDescriptorParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.FeatureDescriptorParameter)
  return target;
}

int FeatureDescriptorParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureDescriptorParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeatureDescriptorParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeatureDescriptorParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeatureDescriptorParameter::MergeFrom(const FeatureDescriptorParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeatureDescriptorParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureDescriptorParameter::CopyFrom(const FeatureDescriptorParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureDescriptorParameter::IsInitialized() const {

  return true;
}

void FeatureDescriptorParameter::Swap(FeatureDescriptorParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeatureDescriptorParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureDescriptorParameter_descriptor_;
  metadata.reflection = FeatureDescriptorParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SIFTDescriptorParameter::SIFTDescriptorParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.SIFTDescriptorParameter)
}

void SIFTDescriptorParameter::InitAsDefaultInstance() {
}

SIFTDescriptorParameter::SIFTDescriptorParameter(const SIFTDescriptorParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.SIFTDescriptorParameter)
}

void SIFTDescriptorParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SIFTDescriptorParameter::~SIFTDescriptorParameter() {
  // @@protoc_insertion_point(destructor:svaf.SIFTDescriptorParameter)
  SharedDtor();
}

void SIFTDescriptorParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SIFTDescriptorParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SIFTDescriptorParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SIFTDescriptorParameter_descriptor_;
}

const SIFTDescriptorParameter& SIFTDescriptorParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

SIFTDescriptorParameter* SIFTDescriptorParameter::default_instance_ = NULL;

SIFTDescriptorParameter* SIFTDescriptorParameter::New() const {
  return new SIFTDescriptorParameter;
}

void SIFTDescriptorParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SIFTDescriptorParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.SIFTDescriptorParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.SIFTDescriptorParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.SIFTDescriptorParameter)
  return false;
#undef DO_
}

void SIFTDescriptorParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.SIFTDescriptorParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.SIFTDescriptorParameter)
}

::google::protobuf::uint8* SIFTDescriptorParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.SIFTDescriptorParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.SIFTDescriptorParameter)
  return target;
}

int SIFTDescriptorParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SIFTDescriptorParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SIFTDescriptorParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SIFTDescriptorParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SIFTDescriptorParameter::MergeFrom(const SIFTDescriptorParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SIFTDescriptorParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SIFTDescriptorParameter::CopyFrom(const SIFTDescriptorParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SIFTDescriptorParameter::IsInitialized() const {

  return true;
}

void SIFTDescriptorParameter::Swap(SIFTDescriptorParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SIFTDescriptorParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SIFTDescriptorParameter_descriptor_;
  metadata.reflection = SIFTDescriptorParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SURFDescriptorParameter::kUprightFieldNumber;
#endif  // !_MSC_VER

SURFDescriptorParameter::SURFDescriptorParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.SURFDescriptorParameter)
}

void SURFDescriptorParameter::InitAsDefaultInstance() {
}

SURFDescriptorParameter::SURFDescriptorParameter(const SURFDescriptorParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.SURFDescriptorParameter)
}

void SURFDescriptorParameter::SharedCtor() {
  _cached_size_ = 0;
  upright_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SURFDescriptorParameter::~SURFDescriptorParameter() {
  // @@protoc_insertion_point(destructor:svaf.SURFDescriptorParameter)
  SharedDtor();
}

void SURFDescriptorParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SURFDescriptorParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SURFDescriptorParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SURFDescriptorParameter_descriptor_;
}

const SURFDescriptorParameter& SURFDescriptorParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

SURFDescriptorParameter* SURFDescriptorParameter::default_instance_ = NULL;

SURFDescriptorParameter* SURFDescriptorParameter::New() const {
  return new SURFDescriptorParameter;
}

void SURFDescriptorParameter::Clear() {
  upright_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SURFDescriptorParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.SURFDescriptorParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool upright = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upright_)));
          set_has_upright();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.SURFDescriptorParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.SURFDescriptorParameter)
  return false;
#undef DO_
}

void SURFDescriptorParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.SURFDescriptorParameter)
  // optional bool upright = 1 [default = false];
  if (has_upright()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->upright(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.SURFDescriptorParameter)
}

::google::protobuf::uint8* SURFDescriptorParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.SURFDescriptorParameter)
  // optional bool upright = 1 [default = false];
  if (has_upright()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->upright(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.SURFDescriptorParameter)
  return target;
}

int SURFDescriptorParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool upright = 1 [default = false];
    if (has_upright()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SURFDescriptorParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SURFDescriptorParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SURFDescriptorParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SURFDescriptorParameter::MergeFrom(const SURFDescriptorParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upright()) {
      set_upright(from.upright());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SURFDescriptorParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SURFDescriptorParameter::CopyFrom(const SURFDescriptorParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SURFDescriptorParameter::IsInitialized() const {

  return true;
}

void SURFDescriptorParameter::Swap(SURFDescriptorParameter* other) {
  if (other != this) {
    std::swap(upright_, other->upright_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SURFDescriptorParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SURFDescriptorParameter_descriptor_;
  metadata.reflection = SURFDescriptorParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

STARDescriptorParameter::STARDescriptorParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.STARDescriptorParameter)
}

void STARDescriptorParameter::InitAsDefaultInstance() {
}

STARDescriptorParameter::STARDescriptorParameter(const STARDescriptorParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.STARDescriptorParameter)
}

void STARDescriptorParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

STARDescriptorParameter::~STARDescriptorParameter() {
  // @@protoc_insertion_point(destructor:svaf.STARDescriptorParameter)
  SharedDtor();
}

void STARDescriptorParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void STARDescriptorParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STARDescriptorParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STARDescriptorParameter_descriptor_;
}

const STARDescriptorParameter& STARDescriptorParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

STARDescriptorParameter* STARDescriptorParameter::default_instance_ = NULL;

STARDescriptorParameter* STARDescriptorParameter::New() const {
  return new STARDescriptorParameter;
}

void STARDescriptorParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool STARDescriptorParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.STARDescriptorParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.STARDescriptorParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.STARDescriptorParameter)
  return false;
#undef DO_
}

void STARDescriptorParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.STARDescriptorParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.STARDescriptorParameter)
}

::google::protobuf::uint8* STARDescriptorParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.STARDescriptorParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.STARDescriptorParameter)
  return target;
}

int STARDescriptorParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STARDescriptorParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const STARDescriptorParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const STARDescriptorParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void STARDescriptorParameter::MergeFrom(const STARDescriptorParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void STARDescriptorParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STARDescriptorParameter::CopyFrom(const STARDescriptorParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STARDescriptorParameter::IsInitialized() const {

  return true;
}

void STARDescriptorParameter::Swap(STARDescriptorParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata STARDescriptorParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = STARDescriptorParameter_descriptor_;
  metadata.reflection = STARDescriptorParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BRIEFDescriptorParameter::BRIEFDescriptorParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.BRIEFDescriptorParameter)
}

void BRIEFDescriptorParameter::InitAsDefaultInstance() {
}

BRIEFDescriptorParameter::BRIEFDescriptorParameter(const BRIEFDescriptorParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.BRIEFDescriptorParameter)
}

void BRIEFDescriptorParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BRIEFDescriptorParameter::~BRIEFDescriptorParameter() {
  // @@protoc_insertion_point(destructor:svaf.BRIEFDescriptorParameter)
  SharedDtor();
}

void BRIEFDescriptorParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BRIEFDescriptorParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BRIEFDescriptorParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BRIEFDescriptorParameter_descriptor_;
}

const BRIEFDescriptorParameter& BRIEFDescriptorParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

BRIEFDescriptorParameter* BRIEFDescriptorParameter::default_instance_ = NULL;

BRIEFDescriptorParameter* BRIEFDescriptorParameter::New() const {
  return new BRIEFDescriptorParameter;
}

void BRIEFDescriptorParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BRIEFDescriptorParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.BRIEFDescriptorParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.BRIEFDescriptorParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.BRIEFDescriptorParameter)
  return false;
#undef DO_
}

void BRIEFDescriptorParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.BRIEFDescriptorParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.BRIEFDescriptorParameter)
}

::google::protobuf::uint8* BRIEFDescriptorParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.BRIEFDescriptorParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.BRIEFDescriptorParameter)
  return target;
}

int BRIEFDescriptorParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BRIEFDescriptorParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BRIEFDescriptorParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BRIEFDescriptorParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BRIEFDescriptorParameter::MergeFrom(const BRIEFDescriptorParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BRIEFDescriptorParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BRIEFDescriptorParameter::CopyFrom(const BRIEFDescriptorParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BRIEFDescriptorParameter::IsInitialized() const {

  return true;
}

void BRIEFDescriptorParameter::Swap(BRIEFDescriptorParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BRIEFDescriptorParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BRIEFDescriptorParameter_descriptor_;
  metadata.reflection = BRIEFDescriptorParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BRISKDescriptorParameter::BRISKDescriptorParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.BRISKDescriptorParameter)
}

void BRISKDescriptorParameter::InitAsDefaultInstance() {
}

BRISKDescriptorParameter::BRISKDescriptorParameter(const BRISKDescriptorParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.BRISKDescriptorParameter)
}

void BRISKDescriptorParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BRISKDescriptorParameter::~BRISKDescriptorParameter() {
  // @@protoc_insertion_point(destructor:svaf.BRISKDescriptorParameter)
  SharedDtor();
}

void BRISKDescriptorParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BRISKDescriptorParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BRISKDescriptorParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BRISKDescriptorParameter_descriptor_;
}

const BRISKDescriptorParameter& BRISKDescriptorParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

BRISKDescriptorParameter* BRISKDescriptorParameter::default_instance_ = NULL;

BRISKDescriptorParameter* BRISKDescriptorParameter::New() const {
  return new BRISKDescriptorParameter;
}

void BRISKDescriptorParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BRISKDescriptorParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.BRISKDescriptorParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.BRISKDescriptorParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.BRISKDescriptorParameter)
  return false;
#undef DO_
}

void BRISKDescriptorParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.BRISKDescriptorParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.BRISKDescriptorParameter)
}

::google::protobuf::uint8* BRISKDescriptorParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.BRISKDescriptorParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.BRISKDescriptorParameter)
  return target;
}

int BRISKDescriptorParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BRISKDescriptorParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BRISKDescriptorParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BRISKDescriptorParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BRISKDescriptorParameter::MergeFrom(const BRISKDescriptorParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BRISKDescriptorParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BRISKDescriptorParameter::CopyFrom(const BRISKDescriptorParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BRISKDescriptorParameter::IsInitialized() const {

  return true;
}

void BRISKDescriptorParameter::Swap(BRISKDescriptorParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BRISKDescriptorParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BRISKDescriptorParameter_descriptor_;
  metadata.reflection = BRISKDescriptorParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FASTDescriptorParameter::FASTDescriptorParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.FASTDescriptorParameter)
}

void FASTDescriptorParameter::InitAsDefaultInstance() {
}

FASTDescriptorParameter::FASTDescriptorParameter(const FASTDescriptorParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.FASTDescriptorParameter)
}

void FASTDescriptorParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FASTDescriptorParameter::~FASTDescriptorParameter() {
  // @@protoc_insertion_point(destructor:svaf.FASTDescriptorParameter)
  SharedDtor();
}

void FASTDescriptorParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FASTDescriptorParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FASTDescriptorParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FASTDescriptorParameter_descriptor_;
}

const FASTDescriptorParameter& FASTDescriptorParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

FASTDescriptorParameter* FASTDescriptorParameter::default_instance_ = NULL;

FASTDescriptorParameter* FASTDescriptorParameter::New() const {
  return new FASTDescriptorParameter;
}

void FASTDescriptorParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FASTDescriptorParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.FASTDescriptorParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.FASTDescriptorParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.FASTDescriptorParameter)
  return false;
#undef DO_
}

void FASTDescriptorParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.FASTDescriptorParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.FASTDescriptorParameter)
}

::google::protobuf::uint8* FASTDescriptorParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.FASTDescriptorParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.FASTDescriptorParameter)
  return target;
}

int FASTDescriptorParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FASTDescriptorParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FASTDescriptorParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FASTDescriptorParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FASTDescriptorParameter::MergeFrom(const FASTDescriptorParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FASTDescriptorParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FASTDescriptorParameter::CopyFrom(const FASTDescriptorParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FASTDescriptorParameter::IsInitialized() const {

  return true;
}

void FASTDescriptorParameter::Swap(FASTDescriptorParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FASTDescriptorParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FASTDescriptorParameter_descriptor_;
  metadata.reflection = FASTDescriptorParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ORBDescriptorParameter::ORBDescriptorParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.ORBDescriptorParameter)
}

void ORBDescriptorParameter::InitAsDefaultInstance() {
}

ORBDescriptorParameter::ORBDescriptorParameter(const ORBDescriptorParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.ORBDescriptorParameter)
}

void ORBDescriptorParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ORBDescriptorParameter::~ORBDescriptorParameter() {
  // @@protoc_insertion_point(destructor:svaf.ORBDescriptorParameter)
  SharedDtor();
}

void ORBDescriptorParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ORBDescriptorParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ORBDescriptorParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ORBDescriptorParameter_descriptor_;
}

const ORBDescriptorParameter& ORBDescriptorParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

ORBDescriptorParameter* ORBDescriptorParameter::default_instance_ = NULL;

ORBDescriptorParameter* ORBDescriptorParameter::New() const {
  return new ORBDescriptorParameter;
}

void ORBDescriptorParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ORBDescriptorParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.ORBDescriptorParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.ORBDescriptorParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.ORBDescriptorParameter)
  return false;
#undef DO_
}

void ORBDescriptorParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.ORBDescriptorParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.ORBDescriptorParameter)
}

::google::protobuf::uint8* ORBDescriptorParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.ORBDescriptorParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.ORBDescriptorParameter)
  return target;
}

int ORBDescriptorParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ORBDescriptorParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ORBDescriptorParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ORBDescriptorParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ORBDescriptorParameter::MergeFrom(const ORBDescriptorParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ORBDescriptorParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ORBDescriptorParameter::CopyFrom(const ORBDescriptorParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ORBDescriptorParameter::IsInitialized() const {

  return true;
}

void ORBDescriptorParameter::Swap(ORBDescriptorParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ORBDescriptorParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ORBDescriptorParameter_descriptor_;
  metadata.reflection = ORBDescriptorParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

KAZEDescriptorParameter::KAZEDescriptorParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.KAZEDescriptorParameter)
}

void KAZEDescriptorParameter::InitAsDefaultInstance() {
}

KAZEDescriptorParameter::KAZEDescriptorParameter(const KAZEDescriptorParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.KAZEDescriptorParameter)
}

void KAZEDescriptorParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KAZEDescriptorParameter::~KAZEDescriptorParameter() {
  // @@protoc_insertion_point(destructor:svaf.KAZEDescriptorParameter)
  SharedDtor();
}

void KAZEDescriptorParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KAZEDescriptorParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KAZEDescriptorParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KAZEDescriptorParameter_descriptor_;
}

const KAZEDescriptorParameter& KAZEDescriptorParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

KAZEDescriptorParameter* KAZEDescriptorParameter::default_instance_ = NULL;

KAZEDescriptorParameter* KAZEDescriptorParameter::New() const {
  return new KAZEDescriptorParameter;
}

void KAZEDescriptorParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KAZEDescriptorParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.KAZEDescriptorParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.KAZEDescriptorParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.KAZEDescriptorParameter)
  return false;
#undef DO_
}

void KAZEDescriptorParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.KAZEDescriptorParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.KAZEDescriptorParameter)
}

::google::protobuf::uint8* KAZEDescriptorParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.KAZEDescriptorParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.KAZEDescriptorParameter)
  return target;
}

int KAZEDescriptorParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KAZEDescriptorParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KAZEDescriptorParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KAZEDescriptorParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KAZEDescriptorParameter::MergeFrom(const KAZEDescriptorParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KAZEDescriptorParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KAZEDescriptorParameter::CopyFrom(const KAZEDescriptorParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KAZEDescriptorParameter::IsInitialized() const {

  return true;
}

void KAZEDescriptorParameter::Swap(KAZEDescriptorParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KAZEDescriptorParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KAZEDescriptorParameter_descriptor_;
  metadata.reflection = KAZEDescriptorParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BriefDespCV::kLengthFieldNumber;
#endif  // !_MSC_VER

BriefDespCV::BriefDespCV()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.BriefDespCV)
}

void BriefDespCV::InitAsDefaultInstance() {
}

BriefDespCV::BriefDespCV(const BriefDespCV& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.BriefDespCV)
}

void BriefDespCV::SharedCtor() {
  _cached_size_ = 0;
  length_ = 32;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BriefDespCV::~BriefDespCV() {
  // @@protoc_insertion_point(destructor:svaf.BriefDespCV)
  SharedDtor();
}

void BriefDespCV::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BriefDespCV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BriefDespCV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BriefDespCV_descriptor_;
}

const BriefDespCV& BriefDespCV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

BriefDespCV* BriefDespCV::default_instance_ = NULL;

BriefDespCV* BriefDespCV::New() const {
  return new BriefDespCV;
}

void BriefDespCV::Clear() {
  length_ = 32;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BriefDespCV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.BriefDespCV)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 length = 1 [default = 32];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.BriefDespCV)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.BriefDespCV)
  return false;
#undef DO_
}

void BriefDespCV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.BriefDespCV)
  // optional int32 length = 1 [default = 32];
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.BriefDespCV)
}

::google::protobuf::uint8* BriefDespCV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.BriefDespCV)
  // optional int32 length = 1 [default = 32];
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.BriefDespCV)
  return target;
}

int BriefDespCV::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 length = 1 [default = 32];
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BriefDespCV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BriefDespCV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BriefDespCV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BriefDespCV::MergeFrom(const BriefDespCV& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BriefDespCV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BriefDespCV::CopyFrom(const BriefDespCV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BriefDespCV::IsInitialized() const {

  return true;
}

void BriefDespCV::Swap(BriefDespCV* other) {
  if (other != this) {
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BriefDespCV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BriefDespCV_descriptor_;
  metadata.reflection = BriefDespCV_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CVDescriptorParameter_DespType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CVDescriptorParameter_DespType_descriptor_;
}
bool CVDescriptorParameter_DespType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CVDescriptorParameter_DespType CVDescriptorParameter::SIFT;
const CVDescriptorParameter_DespType CVDescriptorParameter::SURF;
const CVDescriptorParameter_DespType CVDescriptorParameter::BRIEF;
const CVDescriptorParameter_DespType CVDescriptorParameter::BRISK;
const CVDescriptorParameter_DespType CVDescriptorParameter::ORB;
const CVDescriptorParameter_DespType CVDescriptorParameter::FREAK;
const CVDescriptorParameter_DespType CVDescriptorParameter::OPPONENT;
const CVDescriptorParameter_DespType CVDescriptorParameter::DespType_MIN;
const CVDescriptorParameter_DespType CVDescriptorParameter::DespType_MAX;
const int CVDescriptorParameter::DespType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CVDescriptorParameter::kTypeFieldNumber;
const int CVDescriptorParameter::kBriefParamFieldNumber;
#endif  // !_MSC_VER

CVDescriptorParameter::CVDescriptorParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.CVDescriptorParameter)
}

void CVDescriptorParameter::InitAsDefaultInstance() {
  brief_param_ = const_cast< ::svaf::BriefDespCV*>(&::svaf::BriefDespCV::default_instance());
}

CVDescriptorParameter::CVDescriptorParameter(const CVDescriptorParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.CVDescriptorParameter)
}

void CVDescriptorParameter::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  brief_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CVDescriptorParameter::~CVDescriptorParameter() {
  // @@protoc_insertion_point(destructor:svaf.CVDescriptorParameter)
  SharedDtor();
}

void CVDescriptorParameter::SharedDtor() {
  if (this != default_instance_) {
    delete brief_param_;
  }
}

void CVDescriptorParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CVDescriptorParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CVDescriptorParameter_descriptor_;
}

const CVDescriptorParameter& CVDescriptorParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

CVDescriptorParameter* CVDescriptorParameter::default_instance_ = NULL;

CVDescriptorParameter* CVDescriptorParameter::New() const {
  return new CVDescriptorParameter;
}

void CVDescriptorParameter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    if (has_brief_param()) {
      if (brief_param_ != NULL) brief_param_->::svaf::BriefDespCV::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CVDescriptorParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.CVDescriptorParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .svaf.CVDescriptorParameter.DespType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::svaf::CVDescriptorParameter_DespType_IsValid(value)) {
            set_type(static_cast< ::svaf::CVDescriptorParameter_DespType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_brief_param;
        break;
      }

      // optional .svaf.BriefDespCV brief_param = 2;
      case 2: {
        if (tag == 18) {
         parse_brief_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brief_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.CVDescriptorParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.CVDescriptorParameter)
  return false;
#undef DO_
}

void CVDescriptorParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.CVDescriptorParameter)
  // optional .svaf.CVDescriptorParameter.DespType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .svaf.BriefDespCV brief_param = 2;
  if (has_brief_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->brief_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.CVDescriptorParameter)
}

::google::protobuf::uint8* CVDescriptorParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.CVDescriptorParameter)
  // optional .svaf.CVDescriptorParameter.DespType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .svaf.BriefDespCV brief_param = 2;
  if (has_brief_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->brief_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.CVDescriptorParameter)
  return target;
}

int CVDescriptorParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .svaf.CVDescriptorParameter.DespType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .svaf.BriefDespCV brief_param = 2;
    if (has_brief_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->brief_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CVDescriptorParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CVDescriptorParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CVDescriptorParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CVDescriptorParameter::MergeFrom(const CVDescriptorParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_brief_param()) {
      mutable_brief_param()->::svaf::BriefDespCV::MergeFrom(from.brief_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CVDescriptorParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVDescriptorParameter::CopyFrom(const CVDescriptorParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVDescriptorParameter::IsInitialized() const {

  return true;
}

void CVDescriptorParameter::Swap(CVDescriptorParameter* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(brief_param_, other->brief_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CVDescriptorParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CVDescriptorParameter_descriptor_;
  metadata.reflection = CVDescriptorParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

VectorMatchParameter::VectorMatchParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.VectorMatchParameter)
}

void VectorMatchParameter::InitAsDefaultInstance() {
}

VectorMatchParameter::VectorMatchParameter(const VectorMatchParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.VectorMatchParameter)
}

void VectorMatchParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VectorMatchParameter::~VectorMatchParameter() {
  // @@protoc_insertion_point(destructor:svaf.VectorMatchParameter)
  SharedDtor();
}

void VectorMatchParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VectorMatchParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VectorMatchParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VectorMatchParameter_descriptor_;
}

const VectorMatchParameter& VectorMatchParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

VectorMatchParameter* VectorMatchParameter::default_instance_ = NULL;

VectorMatchParameter* VectorMatchParameter::New() const {
  return new VectorMatchParameter;
}

void VectorMatchParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VectorMatchParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.VectorMatchParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.VectorMatchParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.VectorMatchParameter)
  return false;
#undef DO_
}

void VectorMatchParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.VectorMatchParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.VectorMatchParameter)
}

::google::protobuf::uint8* VectorMatchParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.VectorMatchParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.VectorMatchParameter)
  return target;
}

int VectorMatchParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VectorMatchParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VectorMatchParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VectorMatchParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VectorMatchParameter::MergeFrom(const VectorMatchParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VectorMatchParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorMatchParameter::CopyFrom(const VectorMatchParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorMatchParameter::IsInitialized() const {

  return true;
}

void VectorMatchParameter::Swap(VectorMatchParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VectorMatchParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VectorMatchParameter_descriptor_;
  metadata.reflection = VectorMatchParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

KDTreeMatchParameter::KDTreeMatchParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.KDTreeMatchParameter)
}

void KDTreeMatchParameter::InitAsDefaultInstance() {
}

KDTreeMatchParameter::KDTreeMatchParameter(const KDTreeMatchParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.KDTreeMatchParameter)
}

void KDTreeMatchParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KDTreeMatchParameter::~KDTreeMatchParameter() {
  // @@protoc_insertion_point(destructor:svaf.KDTreeMatchParameter)
  SharedDtor();
}

void KDTreeMatchParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KDTreeMatchParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KDTreeMatchParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KDTreeMatchParameter_descriptor_;
}

const KDTreeMatchParameter& KDTreeMatchParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

KDTreeMatchParameter* KDTreeMatchParameter::default_instance_ = NULL;

KDTreeMatchParameter* KDTreeMatchParameter::New() const {
  return new KDTreeMatchParameter;
}

void KDTreeMatchParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KDTreeMatchParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.KDTreeMatchParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.KDTreeMatchParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.KDTreeMatchParameter)
  return false;
#undef DO_
}

void KDTreeMatchParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.KDTreeMatchParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.KDTreeMatchParameter)
}

::google::protobuf::uint8* KDTreeMatchParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.KDTreeMatchParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.KDTreeMatchParameter)
  return target;
}

int KDTreeMatchParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KDTreeMatchParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KDTreeMatchParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KDTreeMatchParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KDTreeMatchParameter::MergeFrom(const KDTreeMatchParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KDTreeMatchParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KDTreeMatchParameter::CopyFrom(const KDTreeMatchParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KDTreeMatchParameter::IsInitialized() const {

  return true;
}

void KDTreeMatchParameter::Swap(KDTreeMatchParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KDTreeMatchParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KDTreeMatchParameter_descriptor_;
  metadata.reflection = KDTreeMatchParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EularMatchParameter::kThreshFieldNumber;
#endif  // !_MSC_VER

EularMatchParameter::EularMatchParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.EularMatchParameter)
}

void EularMatchParameter::InitAsDefaultInstance() {
}

EularMatchParameter::EularMatchParameter(const EularMatchParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.EularMatchParameter)
}

void EularMatchParameter::SharedCtor() {
  _cached_size_ = 0;
  thresh_ = 0.65f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EularMatchParameter::~EularMatchParameter() {
  // @@protoc_insertion_point(destructor:svaf.EularMatchParameter)
  SharedDtor();
}

void EularMatchParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EularMatchParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EularMatchParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EularMatchParameter_descriptor_;
}

const EularMatchParameter& EularMatchParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

EularMatchParameter* EularMatchParameter::default_instance_ = NULL;

EularMatchParameter* EularMatchParameter::New() const {
  return new EularMatchParameter;
}

void EularMatchParameter::Clear() {
  thresh_ = 0.65f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EularMatchParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.EularMatchParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float thresh = 1 [default = 0.65];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thresh_)));
          set_has_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.EularMatchParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.EularMatchParameter)
  return false;
#undef DO_
}

void EularMatchParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.EularMatchParameter)
  // optional float thresh = 1 [default = 0.65];
  if (has_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->thresh(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.EularMatchParameter)
}

::google::protobuf::uint8* EularMatchParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.EularMatchParameter)
  // optional float thresh = 1 [default = 0.65];
  if (has_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->thresh(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.EularMatchParameter)
  return target;
}

int EularMatchParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float thresh = 1 [default = 0.65];
    if (has_thresh()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EularMatchParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EularMatchParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EularMatchParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EularMatchParameter::MergeFrom(const EularMatchParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thresh()) {
      set_thresh(from.thresh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EularMatchParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EularMatchParameter::CopyFrom(const EularMatchParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EularMatchParameter::IsInitialized() const {

  return true;
}

void EularMatchParameter::Swap(EularMatchParameter* other) {
  if (other != this) {
    std::swap(thresh_, other->thresh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EularMatchParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EularMatchParameter_descriptor_;
  metadata.reflection = EularMatchParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RansacParameter::kThreshFieldNumber;
#endif  // !_MSC_VER

RansacParameter::RansacParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.RansacParameter)
}

void RansacParameter::InitAsDefaultInstance() {
}

RansacParameter::RansacParameter(const RansacParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.RansacParameter)
}

void RansacParameter::SharedCtor() {
  _cached_size_ = 0;
  thresh_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RansacParameter::~RansacParameter() {
  // @@protoc_insertion_point(destructor:svaf.RansacParameter)
  SharedDtor();
}

void RansacParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RansacParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RansacParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RansacParameter_descriptor_;
}

const RansacParameter& RansacParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

RansacParameter* RansacParameter::default_instance_ = NULL;

RansacParameter* RansacParameter::New() const {
  return new RansacParameter;
}

void RansacParameter::Clear() {
  thresh_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RansacParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.RansacParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float thresh = 1 [default = 5];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thresh_)));
          set_has_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.RansacParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.RansacParameter)
  return false;
#undef DO_
}

void RansacParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.RansacParameter)
  // optional float thresh = 1 [default = 5];
  if (has_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->thresh(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.RansacParameter)
}

::google::protobuf::uint8* RansacParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.RansacParameter)
  // optional float thresh = 1 [default = 5];
  if (has_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->thresh(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.RansacParameter)
  return target;
}

int RansacParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float thresh = 1 [default = 5];
    if (has_thresh()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RansacParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RansacParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RansacParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RansacParameter::MergeFrom(const RansacParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thresh()) {
      set_thresh(from.thresh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RansacParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RansacParameter::CopyFrom(const RansacParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RansacParameter::IsInitialized() const {

  return true;
}

void RansacParameter::Swap(RansacParameter* other) {
  if (other != this) {
    std::swap(thresh_, other->thresh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RansacParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RansacParameter_descriptor_;
  metadata.reflection = RansacParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BruteForceMatchParameter::BruteForceMatchParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.BruteForceMatchParameter)
}

void BruteForceMatchParameter::InitAsDefaultInstance() {
}

BruteForceMatchParameter::BruteForceMatchParameter(const BruteForceMatchParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.BruteForceMatchParameter)
}

void BruteForceMatchParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BruteForceMatchParameter::~BruteForceMatchParameter() {
  // @@protoc_insertion_point(destructor:svaf.BruteForceMatchParameter)
  SharedDtor();
}

void BruteForceMatchParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BruteForceMatchParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BruteForceMatchParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BruteForceMatchParameter_descriptor_;
}

const BruteForceMatchParameter& BruteForceMatchParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

BruteForceMatchParameter* BruteForceMatchParameter::default_instance_ = NULL;

BruteForceMatchParameter* BruteForceMatchParameter::New() const {
  return new BruteForceMatchParameter;
}

void BruteForceMatchParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BruteForceMatchParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.BruteForceMatchParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.BruteForceMatchParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.BruteForceMatchParameter)
  return false;
#undef DO_
}

void BruteForceMatchParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.BruteForceMatchParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.BruteForceMatchParameter)
}

::google::protobuf::uint8* BruteForceMatchParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.BruteForceMatchParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.BruteForceMatchParameter)
  return target;
}

int BruteForceMatchParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BruteForceMatchParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BruteForceMatchParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BruteForceMatchParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BruteForceMatchParameter::MergeFrom(const BruteForceMatchParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BruteForceMatchParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BruteForceMatchParameter::CopyFrom(const BruteForceMatchParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BruteForceMatchParameter::IsInitialized() const {

  return true;
}

void BruteForceMatchParameter::Swap(BruteForceMatchParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BruteForceMatchParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BruteForceMatchParameter_descriptor_;
  metadata.reflection = BruteForceMatchParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FLANNMatchParameter::FLANNMatchParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.FLANNMatchParameter)
}

void FLANNMatchParameter::InitAsDefaultInstance() {
}

FLANNMatchParameter::FLANNMatchParameter(const FLANNMatchParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.FLANNMatchParameter)
}

void FLANNMatchParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FLANNMatchParameter::~FLANNMatchParameter() {
  // @@protoc_insertion_point(destructor:svaf.FLANNMatchParameter)
  SharedDtor();
}

void FLANNMatchParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FLANNMatchParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FLANNMatchParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FLANNMatchParameter_descriptor_;
}

const FLANNMatchParameter& FLANNMatchParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

FLANNMatchParameter* FLANNMatchParameter::default_instance_ = NULL;

FLANNMatchParameter* FLANNMatchParameter::New() const {
  return new FLANNMatchParameter;
}

void FLANNMatchParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FLANNMatchParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.FLANNMatchParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.FLANNMatchParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.FLANNMatchParameter)
  return false;
#undef DO_
}

void FLANNMatchParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.FLANNMatchParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.FLANNMatchParameter)
}

::google::protobuf::uint8* FLANNMatchParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.FLANNMatchParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.FLANNMatchParameter)
  return target;
}

int FLANNMatchParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FLANNMatchParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FLANNMatchParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FLANNMatchParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FLANNMatchParameter::MergeFrom(const FLANNMatchParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FLANNMatchParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FLANNMatchParameter::CopyFrom(const FLANNMatchParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FLANNMatchParameter::IsInitialized() const {

  return true;
}

void FLANNMatchParameter::Swap(FLANNMatchParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FLANNMatchParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FLANNMatchParameter_descriptor_;
  metadata.reflection = FLANNMatchParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ECMatchParameter::ECMatchParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.ECMatchParameter)
}

void ECMatchParameter::InitAsDefaultInstance() {
}

ECMatchParameter::ECMatchParameter(const ECMatchParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.ECMatchParameter)
}

void ECMatchParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ECMatchParameter::~ECMatchParameter() {
  // @@protoc_insertion_point(destructor:svaf.ECMatchParameter)
  SharedDtor();
}

void ECMatchParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ECMatchParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ECMatchParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECMatchParameter_descriptor_;
}

const ECMatchParameter& ECMatchParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

ECMatchParameter* ECMatchParameter::default_instance_ = NULL;

ECMatchParameter* ECMatchParameter::New() const {
  return new ECMatchParameter;
}

void ECMatchParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ECMatchParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.ECMatchParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.ECMatchParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.ECMatchParameter)
  return false;
#undef DO_
}

void ECMatchParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.ECMatchParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.ECMatchParameter)
}

::google::protobuf::uint8* ECMatchParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.ECMatchParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.ECMatchParameter)
  return target;
}

int ECMatchParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ECMatchParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ECMatchParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ECMatchParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ECMatchParameter::MergeFrom(const ECMatchParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ECMatchParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ECMatchParameter::CopyFrom(const ECMatchParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECMatchParameter::IsInitialized() const {

  return true;
}

void ECMatchParameter::Swap(ECMatchParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ECMatchParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ECMatchParameter_descriptor_;
  metadata.reflection = ECMatchParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CVMatchParameter_MatchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CVMatchParameter_MatchType_descriptor_;
}
bool CVMatchParameter_MatchType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CVMatchParameter_MatchType CVMatchParameter::BFL1;
const CVMatchParameter_MatchType CVMatchParameter::BFL2;
const CVMatchParameter_MatchType CVMatchParameter::BFH1;
const CVMatchParameter_MatchType CVMatchParameter::BFH2;
const CVMatchParameter_MatchType CVMatchParameter::FLANN;
const CVMatchParameter_MatchType CVMatchParameter::MatchType_MIN;
const CVMatchParameter_MatchType CVMatchParameter::MatchType_MAX;
const int CVMatchParameter::MatchType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CVMatchParameter::kTypeFieldNumber;
const int CVMatchParameter::kCrosscheckFieldNumber;
#endif  // !_MSC_VER

CVMatchParameter::CVMatchParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.CVMatchParameter)
}

void CVMatchParameter::InitAsDefaultInstance() {
}

CVMatchParameter::CVMatchParameter(const CVMatchParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.CVMatchParameter)
}

void CVMatchParameter::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  crosscheck_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CVMatchParameter::~CVMatchParameter() {
  // @@protoc_insertion_point(destructor:svaf.CVMatchParameter)
  SharedDtor();
}

void CVMatchParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CVMatchParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CVMatchParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CVMatchParameter_descriptor_;
}

const CVMatchParameter& CVMatchParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

CVMatchParameter* CVMatchParameter::default_instance_ = NULL;

CVMatchParameter* CVMatchParameter::New() const {
  return new CVMatchParameter;
}

void CVMatchParameter::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    crosscheck_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CVMatchParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.CVMatchParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .svaf.CVMatchParameter.MatchType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::svaf::CVMatchParameter_MatchType_IsValid(value)) {
            set_type(static_cast< ::svaf::CVMatchParameter_MatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_crosscheck;
        break;
      }

      // optional bool crosscheck = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_crosscheck:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &crosscheck_)));
          set_has_crosscheck();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.CVMatchParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.CVMatchParameter)
  return false;
#undef DO_
}

void CVMatchParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.CVMatchParameter)
  // optional .svaf.CVMatchParameter.MatchType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bool crosscheck = 2 [default = true];
  if (has_crosscheck()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->crosscheck(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.CVMatchParameter)
}

::google::protobuf::uint8* CVMatchParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.CVMatchParameter)
  // optional .svaf.CVMatchParameter.MatchType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bool crosscheck = 2 [default = true];
  if (has_crosscheck()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->crosscheck(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.CVMatchParameter)
  return target;
}

int CVMatchParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .svaf.CVMatchParameter.MatchType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool crosscheck = 2 [default = true];
    if (has_crosscheck()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CVMatchParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CVMatchParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CVMatchParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CVMatchParameter::MergeFrom(const CVMatchParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_crosscheck()) {
      set_crosscheck(from.crosscheck());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CVMatchParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CVMatchParameter::CopyFrom(const CVMatchParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVMatchParameter::IsInitialized() const {

  return true;
}

void CVMatchParameter::Swap(CVMatchParameter* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(crosscheck_, other->crosscheck_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CVMatchParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CVMatchParameter_descriptor_;
  metadata.reflection = CVMatchParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StereoMatchParameter::StereoMatchParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.StereoMatchParameter)
}

void StereoMatchParameter::InitAsDefaultInstance() {
}

StereoMatchParameter::StereoMatchParameter(const StereoMatchParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.StereoMatchParameter)
}

void StereoMatchParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StereoMatchParameter::~StereoMatchParameter() {
  // @@protoc_insertion_point(destructor:svaf.StereoMatchParameter)
  SharedDtor();
}

void StereoMatchParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StereoMatchParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StereoMatchParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StereoMatchParameter_descriptor_;
}

const StereoMatchParameter& StereoMatchParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

StereoMatchParameter* StereoMatchParameter::default_instance_ = NULL;

StereoMatchParameter* StereoMatchParameter::New() const {
  return new StereoMatchParameter;
}

void StereoMatchParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StereoMatchParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.StereoMatchParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.StereoMatchParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.StereoMatchParameter)
  return false;
#undef DO_
}

void StereoMatchParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.StereoMatchParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.StereoMatchParameter)
}

::google::protobuf::uint8* StereoMatchParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.StereoMatchParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.StereoMatchParameter)
  return target;
}

int StereoMatchParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StereoMatchParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StereoMatchParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StereoMatchParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StereoMatchParameter::MergeFrom(const StereoMatchParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StereoMatchParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StereoMatchParameter::CopyFrom(const StereoMatchParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StereoMatchParameter::IsInitialized() const {

  return true;
}

void StereoMatchParameter::Swap(StereoMatchParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StereoMatchParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StereoMatchParameter_descriptor_;
  metadata.reflection = StereoMatchParameter_reflection_;
  return metadata;
}


// ===================================================================

::std::string* SGMMatchParameter::_default_prefix_ = NULL;
#ifndef _MSC_VER
const int SGMMatchParameter::kMaxDispFieldNumber;
const int SGMMatchParameter::kFactorFieldNumber;
const int SGMMatchParameter::kDispmrFieldNumber;
const int SGMMatchParameter::kR1FieldNumber;
const int SGMMatchParameter::kR2FieldNumber;
const int SGMMatchParameter::kPrefixFieldNumber;
const int SGMMatchParameter::kSavetxtFieldNumber;
#endif  // !_MSC_VER

SGMMatchParameter::SGMMatchParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.SGMMatchParameter)
}

void SGMMatchParameter::InitAsDefaultInstance() {
}

SGMMatchParameter::SGMMatchParameter(const SGMMatchParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.SGMMatchParameter)
}

void SGMMatchParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  max_disp_ = 24;
  factor_ = 2560;
  dispmr_ = 1;
  r1_ = 10;
  r2_ = 500;
  prefix_ = const_cast< ::std::string*>(_default_prefix_);
  savetxt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SGMMatchParameter::~SGMMatchParameter() {
  // @@protoc_insertion_point(destructor:svaf.SGMMatchParameter)
  SharedDtor();
}

void SGMMatchParameter::SharedDtor() {
  if (prefix_ != _default_prefix_) {
    delete prefix_;
  }
  if (this != default_instance_) {
  }
}

void SGMMatchParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SGMMatchParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SGMMatchParameter_descriptor_;
}

const SGMMatchParameter& SGMMatchParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

SGMMatchParameter* SGMMatchParameter::default_instance_ = NULL;

SGMMatchParameter* SGMMatchParameter::New() const {
  return new SGMMatchParameter;
}

void SGMMatchParameter::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    max_disp_ = 24;
    factor_ = 2560;
    dispmr_ = 1;
    r1_ = 10;
    r2_ = 500;
    if (has_prefix()) {
      if (prefix_ != _default_prefix_) {
        prefix_->assign(*_default_prefix_);
      }
    }
    savetxt_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SGMMatchParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.SGMMatchParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_disp = 1 [default = 24];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_disp_)));
          set_has_max_disp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_factor;
        break;
      }

      // optional int32 factor = 2 [default = 2560];
      case 2: {
        if (tag == 16) {
         parse_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factor_)));
          set_has_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dispmr;
        break;
      }

      // optional int32 dispmr = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_dispmr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dispmr_)));
          set_has_dispmr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_r1;
        break;
      }

      // optional float r1 = 4 [default = 10];
      case 4: {
        if (tag == 37) {
         parse_r1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r1_)));
          set_has_r1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_r2;
        break;
      }

      // optional float r2 = 5 [default = 500];
      case 5: {
        if (tag == 45) {
         parse_r2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r2_)));
          set_has_r2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_prefix;
        break;
      }

      // optional string prefix = 6 [default = "./sgm"];
      case 6: {
        if (tag == 50) {
         parse_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prefix().data(), this->prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "prefix");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_savetxt;
        break;
      }

      // optional bool savetxt = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_savetxt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &savetxt_)));
          set_has_savetxt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.SGMMatchParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.SGMMatchParameter)
  return false;
#undef DO_
}

void SGMMatchParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.SGMMatchParameter)
  // optional int32 max_disp = 1 [default = 24];
  if (has_max_disp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_disp(), output);
  }

  // optional int32 factor = 2 [default = 2560];
  if (has_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->factor(), output);
  }

  // optional int32 dispmr = 3 [default = 1];
  if (has_dispmr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dispmr(), output);
  }

  // optional float r1 = 4 [default = 10];
  if (has_r1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->r1(), output);
  }

  // optional float r2 = 5 [default = 500];
  if (has_r2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->r2(), output);
  }

  // optional string prefix = 6 [default = "./sgm"];
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->prefix(), output);
  }

  // optional bool savetxt = 7 [default = false];
  if (has_savetxt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->savetxt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.SGMMatchParameter)
}

::google::protobuf::uint8* SGMMatchParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.SGMMatchParameter)
  // optional int32 max_disp = 1 [default = 24];
  if (has_max_disp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_disp(), target);
  }

  // optional int32 factor = 2 [default = 2560];
  if (has_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->factor(), target);
  }

  // optional int32 dispmr = 3 [default = 1];
  if (has_dispmr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dispmr(), target);
  }

  // optional float r1 = 4 [default = 10];
  if (has_r1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->r1(), target);
  }

  // optional float r2 = 5 [default = 500];
  if (has_r2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->r2(), target);
  }

  // optional string prefix = 6 [default = "./sgm"];
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->prefix(), target);
  }

  // optional bool savetxt = 7 [default = false];
  if (has_savetxt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->savetxt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.SGMMatchParameter)
  return target;
}

int SGMMatchParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 max_disp = 1 [default = 24];
    if (has_max_disp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_disp());
    }

    // optional int32 factor = 2 [default = 2560];
    if (has_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factor());
    }

    // optional int32 dispmr = 3 [default = 1];
    if (has_dispmr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dispmr());
    }

    // optional float r1 = 4 [default = 10];
    if (has_r1()) {
      total_size += 1 + 4;
    }

    // optional float r2 = 5 [default = 500];
    if (has_r2()) {
      total_size += 1 + 4;
    }

    // optional string prefix = 6 [default = "./sgm"];
    if (has_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix());
    }

    // optional bool savetxt = 7 [default = false];
    if (has_savetxt()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SGMMatchParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SGMMatchParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SGMMatchParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SGMMatchParameter::MergeFrom(const SGMMatchParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_disp()) {
      set_max_disp(from.max_disp());
    }
    if (from.has_factor()) {
      set_factor(from.factor());
    }
    if (from.has_dispmr()) {
      set_dispmr(from.dispmr());
    }
    if (from.has_r1()) {
      set_r1(from.r1());
    }
    if (from.has_r2()) {
      set_r2(from.r2());
    }
    if (from.has_prefix()) {
      set_prefix(from.prefix());
    }
    if (from.has_savetxt()) {
      set_savetxt(from.savetxt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SGMMatchParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SGMMatchParameter::CopyFrom(const SGMMatchParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SGMMatchParameter::IsInitialized() const {

  return true;
}

void SGMMatchParameter::Swap(SGMMatchParameter* other) {
  if (other != this) {
    std::swap(max_disp_, other->max_disp_);
    std::swap(factor_, other->factor_);
    std::swap(dispmr_, other->dispmr_);
    std::swap(r1_, other->r1_);
    std::swap(r2_, other->r2_);
    std::swap(prefix_, other->prefix_);
    std::swap(savetxt_, other->savetxt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SGMMatchParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SGMMatchParameter_descriptor_;
  metadata.reflection = SGMMatchParameter_reflection_;
  return metadata;
}


// ===================================================================

::std::string* EADPMatchParameter::_default_prefix_ = NULL;
#ifndef _MSC_VER
const int EADPMatchParameter::kMaxDispFieldNumber;
const int EADPMatchParameter::kFactorFieldNumber;
const int EADPMatchParameter::kGuidmrFieldNumber;
const int EADPMatchParameter::kDispmrFieldNumber;
const int EADPMatchParameter::kSgFieldNumber;
const int EADPMatchParameter::kScFieldNumber;
const int EADPMatchParameter::kR1FieldNumber;
const int EADPMatchParameter::kR2FieldNumber;
const int EADPMatchParameter::kPrefixFieldNumber;
const int EADPMatchParameter::kSavetxtFieldNumber;
#endif  // !_MSC_VER

EADPMatchParameter::EADPMatchParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.EADPMatchParameter)
}

void EADPMatchParameter::InitAsDefaultInstance() {
}

EADPMatchParameter::EADPMatchParameter(const EADPMatchParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.EADPMatchParameter)
}

void EADPMatchParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  max_disp_ = 24;
  factor_ = 2560;
  guidmr_ = 1;
  dispmr_ = 1;
  sg_ = -25;
  sc_ = 25.5f;
  r1_ = 10;
  r2_ = 500;
  prefix_ = const_cast< ::std::string*>(_default_prefix_);
  savetxt_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EADPMatchParameter::~EADPMatchParameter() {
  // @@protoc_insertion_point(destructor:svaf.EADPMatchParameter)
  SharedDtor();
}

void EADPMatchParameter::SharedDtor() {
  if (prefix_ != _default_prefix_) {
    delete prefix_;
  }
  if (this != default_instance_) {
  }
}

void EADPMatchParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EADPMatchParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EADPMatchParameter_descriptor_;
}

const EADPMatchParameter& EADPMatchParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

EADPMatchParameter* EADPMatchParameter::default_instance_ = NULL;

EADPMatchParameter* EADPMatchParameter::New() const {
  return new EADPMatchParameter;
}

void EADPMatchParameter::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    max_disp_ = 24;
    factor_ = 2560;
    guidmr_ = 1;
    dispmr_ = 1;
    sg_ = -25;
    sc_ = 25.5f;
    r1_ = 10;
    r2_ = 500;
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_prefix()) {
      if (prefix_ != _default_prefix_) {
        prefix_->assign(*_default_prefix_);
      }
    }
    savetxt_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EADPMatchParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.EADPMatchParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_disp = 1 [default = 24];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_disp_)));
          set_has_max_disp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_factor;
        break;
      }

      // optional int32 factor = 2 [default = 2560];
      case 2: {
        if (tag == 16) {
         parse_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factor_)));
          set_has_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guidmr;
        break;
      }

      // optional int32 guidmr = 3 [default = 1];
      case 3: {
        if (tag == 24) {
         parse_guidmr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guidmr_)));
          set_has_guidmr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dispmr;
        break;
      }

      // optional int32 dispmr = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_dispmr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dispmr_)));
          set_has_dispmr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_sg;
        break;
      }

      // optional float sg = 5 [default = -25];
      case 5: {
        if (tag == 45) {
         parse_sg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sg_)));
          set_has_sg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_sc;
        break;
      }

      // optional float sc = 6 [default = 25.5];
      case 6: {
        if (tag == 53) {
         parse_sc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sc_)));
          set_has_sc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_r1;
        break;
      }

      // optional float r1 = 7 [default = 10];
      case 7: {
        if (tag == 61) {
         parse_r1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r1_)));
          set_has_r1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_r2;
        break;
      }

      // optional float r2 = 8 [default = 500];
      case 8: {
        if (tag == 69) {
         parse_r2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r2_)));
          set_has_r2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_prefix;
        break;
      }

      // optional string prefix = 9 [default = "./eadp"];
      case 9: {
        if (tag == 74) {
         parse_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->prefix().data(), this->prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "prefix");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_savetxt;
        break;
      }

      // optional bool savetxt = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_savetxt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &savetxt_)));
          set_has_savetxt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.EADPMatchParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.EADPMatchParameter)
  return false;
#undef DO_
}

void EADPMatchParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.EADPMatchParameter)
  // optional int32 max_disp = 1 [default = 24];
  if (has_max_disp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_disp(), output);
  }

  // optional int32 factor = 2 [default = 2560];
  if (has_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->factor(), output);
  }

  // optional int32 guidmr = 3 [default = 1];
  if (has_guidmr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->guidmr(), output);
  }

  // optional int32 dispmr = 4 [default = 1];
  if (has_dispmr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dispmr(), output);
  }

  // optional float sg = 5 [default = -25];
  if (has_sg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->sg(), output);
  }

  // optional float sc = 6 [default = 25.5];
  if (has_sc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->sc(), output);
  }

  // optional float r1 = 7 [default = 10];
  if (has_r1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->r1(), output);
  }

  // optional float r2 = 8 [default = 500];
  if (has_r2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->r2(), output);
  }

  // optional string prefix = 9 [default = "./eadp"];
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->prefix(), output);
  }

  // optional bool savetxt = 10 [default = false];
  if (has_savetxt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->savetxt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.EADPMatchParameter)
}

::google::protobuf::uint8* EADPMatchParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.EADPMatchParameter)
  // optional int32 max_disp = 1 [default = 24];
  if (has_max_disp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_disp(), target);
  }

  // optional int32 factor = 2 [default = 2560];
  if (has_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->factor(), target);
  }

  // optional int32 guidmr = 3 [default = 1];
  if (has_guidmr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->guidmr(), target);
  }

  // optional int32 dispmr = 4 [default = 1];
  if (has_dispmr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dispmr(), target);
  }

  // optional float sg = 5 [default = -25];
  if (has_sg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->sg(), target);
  }

  // optional float sc = 6 [default = 25.5];
  if (has_sc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->sc(), target);
  }

  // optional float r1 = 7 [default = 10];
  if (has_r1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->r1(), target);
  }

  // optional float r2 = 8 [default = 500];
  if (has_r2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->r2(), target);
  }

  // optional string prefix = 9 [default = "./eadp"];
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->prefix(), target);
  }

  // optional bool savetxt = 10 [default = false];
  if (has_savetxt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->savetxt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.EADPMatchParameter)
  return target;
}

int EADPMatchParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 max_disp = 1 [default = 24];
    if (has_max_disp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_disp());
    }

    // optional int32 factor = 2 [default = 2560];
    if (has_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factor());
    }

    // optional int32 guidmr = 3 [default = 1];
    if (has_guidmr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guidmr());
    }

    // optional int32 dispmr = 4 [default = 1];
    if (has_dispmr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dispmr());
    }

    // optional float sg = 5 [default = -25];
    if (has_sg()) {
      total_size += 1 + 4;
    }

    // optional float sc = 6 [default = 25.5];
    if (has_sc()) {
      total_size += 1 + 4;
    }

    // optional float r1 = 7 [default = 10];
    if (has_r1()) {
      total_size += 1 + 4;
    }

    // optional float r2 = 8 [default = 500];
    if (has_r2()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string prefix = 9 [default = "./eadp"];
    if (has_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix());
    }

    // optional bool savetxt = 10 [default = false];
    if (has_savetxt()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EADPMatchParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EADPMatchParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EADPMatchParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EADPMatchParameter::MergeFrom(const EADPMatchParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_disp()) {
      set_max_disp(from.max_disp());
    }
    if (from.has_factor()) {
      set_factor(from.factor());
    }
    if (from.has_guidmr()) {
      set_guidmr(from.guidmr());
    }
    if (from.has_dispmr()) {
      set_dispmr(from.dispmr());
    }
    if (from.has_sg()) {
      set_sg(from.sg());
    }
    if (from.has_sc()) {
      set_sc(from.sc());
    }
    if (from.has_r1()) {
      set_r1(from.r1());
    }
    if (from.has_r2()) {
      set_r2(from.r2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_prefix()) {
      set_prefix(from.prefix());
    }
    if (from.has_savetxt()) {
      set_savetxt(from.savetxt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EADPMatchParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EADPMatchParameter::CopyFrom(const EADPMatchParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EADPMatchParameter::IsInitialized() const {

  return true;
}

void EADPMatchParameter::Swap(EADPMatchParameter* other) {
  if (other != this) {
    std::swap(max_disp_, other->max_disp_);
    std::swap(factor_, other->factor_);
    std::swap(guidmr_, other->guidmr_);
    std::swap(dispmr_, other->dispmr_);
    std::swap(sg_, other->sg_);
    std::swap(sc_, other->sc_);
    std::swap(r1_, other->r1_);
    std::swap(r2_, other->r2_);
    std::swap(prefix_, other->prefix_);
    std::swap(savetxt_, other->savetxt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EADPMatchParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EADPMatchParameter_descriptor_;
  metadata.reflection = EADPMatchParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OutputParameter::OutputParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.OutputParameter)
}

void OutputParameter::InitAsDefaultInstance() {
}

OutputParameter::OutputParameter(const OutputParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.OutputParameter)
}

void OutputParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OutputParameter::~OutputParameter() {
  // @@protoc_insertion_point(destructor:svaf.OutputParameter)
  SharedDtor();
}

void OutputParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OutputParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutputParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutputParameter_descriptor_;
}

const OutputParameter& OutputParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

OutputParameter* OutputParameter::default_instance_ = NULL;

OutputParameter* OutputParameter::New() const {
  return new OutputParameter;
}

void OutputParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OutputParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.OutputParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.OutputParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.OutputParameter)
  return false;
#undef DO_
}

void OutputParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.OutputParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.OutputParameter)
}

::google::protobuf::uint8* OutputParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.OutputParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.OutputParameter)
  return target;
}

int OutputParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutputParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OutputParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OutputParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OutputParameter::MergeFrom(const OutputParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OutputParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputParameter::CopyFrom(const OutputParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputParameter::IsInitialized() const {

  return true;
}

void OutputParameter::Swap(OutputParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OutputParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OutputParameter_descriptor_;
  metadata.reflection = OutputParameter_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TriangularParameter::_default_pcname_ = NULL;
#ifndef _MSC_VER
const int TriangularParameter::kVisibleFieldNumber;
const int TriangularParameter::kToolboxDirFieldNumber;
const int TriangularParameter::kCalibmatDirFieldNumber;
const int TriangularParameter::kSavepcFieldNumber;
const int TriangularParameter::kPcnameFieldNumber;
#endif  // !_MSC_VER

TriangularParameter::TriangularParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.TriangularParameter)
}

void TriangularParameter::InitAsDefaultInstance() {
}

TriangularParameter::TriangularParameter(const TriangularParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.TriangularParameter)
}

void TriangularParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  visible_ = true;
  toolbox_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  calibmat_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  savepc_ = false;
  pcname_ = const_cast< ::std::string*>(_default_pcname_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TriangularParameter::~TriangularParameter() {
  // @@protoc_insertion_point(destructor:svaf.TriangularParameter)
  SharedDtor();
}

void TriangularParameter::SharedDtor() {
  if (toolbox_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete toolbox_dir_;
  }
  if (calibmat_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete calibmat_dir_;
  }
  if (pcname_ != _default_pcname_) {
    delete pcname_;
  }
  if (this != default_instance_) {
  }
}

void TriangularParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TriangularParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TriangularParameter_descriptor_;
}

const TriangularParameter& TriangularParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

TriangularParameter* TriangularParameter::default_instance_ = NULL;

TriangularParameter* TriangularParameter::New() const {
  return new TriangularParameter;
}

void TriangularParameter::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    visible_ = true;
    if (has_toolbox_dir()) {
      if (toolbox_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        toolbox_dir_->clear();
      }
    }
    if (has_calibmat_dir()) {
      if (calibmat_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        calibmat_dir_->clear();
      }
    }
    savepc_ = false;
    if (has_pcname()) {
      if (pcname_ != _default_pcname_) {
        pcname_->assign(*_default_pcname_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TriangularParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.TriangularParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool visible = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_toolbox_dir;
        break;
      }

      // optional string toolbox_dir = 2;
      case 2: {
        if (tag == 18) {
         parse_toolbox_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_toolbox_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->toolbox_dir().data(), this->toolbox_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "toolbox_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_calibmat_dir;
        break;
      }

      // optional string calibmat_dir = 3;
      case 3: {
        if (tag == 26) {
         parse_calibmat_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_calibmat_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->calibmat_dir().data(), this->calibmat_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "calibmat_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_savepc;
        break;
      }

      // optional bool savepc = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_savepc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &savepc_)));
          set_has_savepc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pcname;
        break;
      }

      // optional string pcname = 5 [default = "./ref_pointcloud.pc"];
      case 5: {
        if (tag == 42) {
         parse_pcname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pcname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pcname().data(), this->pcname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pcname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.TriangularParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.TriangularParameter)
  return false;
#undef DO_
}

void TriangularParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.TriangularParameter)
  // optional bool visible = 1 [default = true];
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->visible(), output);
  }

  // optional string toolbox_dir = 2;
  if (has_toolbox_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->toolbox_dir().data(), this->toolbox_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "toolbox_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->toolbox_dir(), output);
  }

  // optional string calibmat_dir = 3;
  if (has_calibmat_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calibmat_dir().data(), this->calibmat_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "calibmat_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->calibmat_dir(), output);
  }

  // optional bool savepc = 4 [default = false];
  if (has_savepc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->savepc(), output);
  }

  // optional string pcname = 5 [default = "./ref_pointcloud.pc"];
  if (has_pcname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcname().data(), this->pcname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pcname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->pcname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.TriangularParameter)
}

::google::protobuf::uint8* TriangularParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.TriangularParameter)
  // optional bool visible = 1 [default = true];
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->visible(), target);
  }

  // optional string toolbox_dir = 2;
  if (has_toolbox_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->toolbox_dir().data(), this->toolbox_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "toolbox_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->toolbox_dir(), target);
  }

  // optional string calibmat_dir = 3;
  if (has_calibmat_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calibmat_dir().data(), this->calibmat_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "calibmat_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->calibmat_dir(), target);
  }

  // optional bool savepc = 4 [default = false];
  if (has_savepc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->savepc(), target);
  }

  // optional string pcname = 5 [default = "./ref_pointcloud.pc"];
  if (has_pcname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcname().data(), this->pcname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pcname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pcname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.TriangularParameter)
  return target;
}

int TriangularParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool visible = 1 [default = true];
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional string toolbox_dir = 2;
    if (has_toolbox_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->toolbox_dir());
    }

    // optional string calibmat_dir = 3;
    if (has_calibmat_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->calibmat_dir());
    }

    // optional bool savepc = 4 [default = false];
    if (has_savepc()) {
      total_size += 1 + 1;
    }

    // optional string pcname = 5 [default = "./ref_pointcloud.pc"];
    if (has_pcname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pcname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TriangularParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TriangularParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TriangularParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TriangularParameter::MergeFrom(const TriangularParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_toolbox_dir()) {
      set_toolbox_dir(from.toolbox_dir());
    }
    if (from.has_calibmat_dir()) {
      set_calibmat_dir(from.calibmat_dir());
    }
    if (from.has_savepc()) {
      set_savepc(from.savepc());
    }
    if (from.has_pcname()) {
      set_pcname(from.pcname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TriangularParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriangularParameter::CopyFrom(const TriangularParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriangularParameter::IsInitialized() const {

  return true;
}

void TriangularParameter::Swap(TriangularParameter* other) {
  if (other != this) {
    std::swap(visible_, other->visible_);
    std::swap(toolbox_dir_, other->toolbox_dir_);
    std::swap(calibmat_dir_, other->calibmat_dir_);
    std::swap(savepc_, other->savepc_);
    std::swap(pcname_, other->pcname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TriangularParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TriangularParameter_descriptor_;
  metadata.reflection = TriangularParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatrixMulParameter::kFilenameFieldNumber;
const int MatrixMulParameter::kCol0FieldNumber;
const int MatrixMulParameter::kCol1FieldNumber;
const int MatrixMulParameter::kCol2FieldNumber;
#endif  // !_MSC_VER

MatrixMulParameter::MatrixMulParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.MatrixMulParameter)
}

void MatrixMulParameter::InitAsDefaultInstance() {
}

MatrixMulParameter::MatrixMulParameter(const MatrixMulParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.MatrixMulParameter)
}

void MatrixMulParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  col0_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  col1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  col2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatrixMulParameter::~MatrixMulParameter() {
  // @@protoc_insertion_point(destructor:svaf.MatrixMulParameter)
  SharedDtor();
}

void MatrixMulParameter::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (col0_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete col0_;
  }
  if (col1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete col1_;
  }
  if (col2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete col2_;
  }
  if (this != default_instance_) {
  }
}

void MatrixMulParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatrixMulParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatrixMulParameter_descriptor_;
}

const MatrixMulParameter& MatrixMulParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

MatrixMulParameter* MatrixMulParameter::default_instance_ = NULL;

MatrixMulParameter* MatrixMulParameter::New() const {
  return new MatrixMulParameter;
}

void MatrixMulParameter::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_col0()) {
      if (col0_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        col0_->clear();
      }
    }
    if (has_col1()) {
      if (col1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        col1_->clear();
      }
    }
    if (has_col2()) {
      if (col2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        col2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatrixMulParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.MatrixMulParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_col0;
        break;
      }

      // optional string col0 = 2;
      case 2: {
        if (tag == 18) {
         parse_col0:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_col0()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->col0().data(), this->col0().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "col0");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_col1;
        break;
      }

      // optional string col1 = 3;
      case 3: {
        if (tag == 26) {
         parse_col1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_col1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->col1().data(), this->col1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "col1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_col2;
        break;
      }

      // optional string col2 = 4;
      case 4: {
        if (tag == 34) {
         parse_col2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_col2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->col2().data(), this->col2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "col2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.MatrixMulParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.MatrixMulParameter)
  return false;
#undef DO_
}

void MatrixMulParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.MatrixMulParameter)
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // optional string col0 = 2;
  if (has_col0()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->col0().data(), this->col0().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "col0");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->col0(), output);
  }

  // optional string col1 = 3;
  if (has_col1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->col1().data(), this->col1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "col1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->col1(), output);
  }

  // optional string col2 = 4;
  if (has_col2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->col2().data(), this->col2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "col2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->col2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.MatrixMulParameter)
}

::google::protobuf::uint8* MatrixMulParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.MatrixMulParameter)
  // optional string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional string col0 = 2;
  if (has_col0()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->col0().data(), this->col0().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "col0");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->col0(), target);
  }

  // optional string col1 = 3;
  if (has_col1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->col1().data(), this->col1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "col1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->col1(), target);
  }

  // optional string col2 = 4;
  if (has_col2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->col2().data(), this->col2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "col2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->col2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.MatrixMulParameter)
  return target;
}

int MatrixMulParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string col0 = 2;
    if (has_col0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->col0());
    }

    // optional string col1 = 3;
    if (has_col1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->col1());
    }

    // optional string col2 = 4;
    if (has_col2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->col2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatrixMulParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatrixMulParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatrixMulParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatrixMulParameter::MergeFrom(const MatrixMulParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_col0()) {
      set_col0(from.col0());
    }
    if (from.has_col1()) {
      set_col1(from.col1());
    }
    if (from.has_col2()) {
      set_col2(from.col2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatrixMulParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatrixMulParameter::CopyFrom(const MatrixMulParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatrixMulParameter::IsInitialized() const {

  return true;
}

void MatrixMulParameter::Swap(MatrixMulParameter* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(col0_, other->col0_);
    std::swap(col1_, other->col1_);
    std::swap(col2_, other->col2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatrixMulParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatrixMulParameter_descriptor_;
  metadata.reflection = MatrixMulParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PositionEstimateParameter::PositionEstimateParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.PositionEstimateParameter)
}

void PositionEstimateParameter::InitAsDefaultInstance() {
}

PositionEstimateParameter::PositionEstimateParameter(const PositionEstimateParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.PositionEstimateParameter)
}

void PositionEstimateParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PositionEstimateParameter::~PositionEstimateParameter() {
  // @@protoc_insertion_point(destructor:svaf.PositionEstimateParameter)
  SharedDtor();
}

void PositionEstimateParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PositionEstimateParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PositionEstimateParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionEstimateParameter_descriptor_;
}

const PositionEstimateParameter& PositionEstimateParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

PositionEstimateParameter* PositionEstimateParameter::default_instance_ = NULL;

PositionEstimateParameter* PositionEstimateParameter::New() const {
  return new PositionEstimateParameter;
}

void PositionEstimateParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PositionEstimateParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.PositionEstimateParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.PositionEstimateParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.PositionEstimateParameter)
  return false;
#undef DO_
}

void PositionEstimateParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.PositionEstimateParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.PositionEstimateParameter)
}

::google::protobuf::uint8* PositionEstimateParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.PositionEstimateParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.PositionEstimateParameter)
  return target;
}

int PositionEstimateParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PositionEstimateParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PositionEstimateParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PositionEstimateParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PositionEstimateParameter::MergeFrom(const PositionEstimateParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PositionEstimateParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionEstimateParameter::CopyFrom(const PositionEstimateParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionEstimateParameter::IsInitialized() const {

  return true;
}

void PositionEstimateParameter::Swap(PositionEstimateParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PositionEstimateParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PositionEstimateParameter_descriptor_;
  metadata.reflection = PositionEstimateParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CenterPointParameter::CenterPointParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.CenterPointParameter)
}

void CenterPointParameter::InitAsDefaultInstance() {
}

CenterPointParameter::CenterPointParameter(const CenterPointParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.CenterPointParameter)
}

void CenterPointParameter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterPointParameter::~CenterPointParameter() {
  // @@protoc_insertion_point(destructor:svaf.CenterPointParameter)
  SharedDtor();
}

void CenterPointParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CenterPointParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterPointParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterPointParameter_descriptor_;
}

const CenterPointParameter& CenterPointParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

CenterPointParameter* CenterPointParameter::default_instance_ = NULL;

CenterPointParameter* CenterPointParameter::New() const {
  return new CenterPointParameter;
}

void CenterPointParameter::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterPointParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.CenterPointParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.CenterPointParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.CenterPointParameter)
  return false;
#undef DO_
}

void CenterPointParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.CenterPointParameter)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.CenterPointParameter)
}

::google::protobuf::uint8* CenterPointParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.CenterPointParameter)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.CenterPointParameter)
  return target;
}

int CenterPointParameter::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterPointParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterPointParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterPointParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterPointParameter::MergeFrom(const CenterPointParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterPointParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterPointParameter::CopyFrom(const CenterPointParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterPointParameter::IsInitialized() const {

  return true;
}

void CenterPointParameter::Swap(CenterPointParameter* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterPointParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterPointParameter_descriptor_;
  metadata.reflection = CenterPointParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CoordiParameter::kXFieldNumber;
const int CoordiParameter::kYFieldNumber;
const int CoordiParameter::kZFieldNumber;
const int CoordiParameter::kAFieldNumber;
const int CoordiParameter::kBFieldNumber;
const int CoordiParameter::kCFieldNumber;
#endif  // !_MSC_VER

CoordiParameter::CoordiParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.CoordiParameter)
}

void CoordiParameter::InitAsDefaultInstance() {
}

CoordiParameter::CoordiParameter(const CoordiParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.CoordiParameter)
}

void CoordiParameter::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  a_ = 0;
  b_ = 0;
  c_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CoordiParameter::~CoordiParameter() {
  // @@protoc_insertion_point(destructor:svaf.CoordiParameter)
  SharedDtor();
}

void CoordiParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CoordiParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoordiParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoordiParameter_descriptor_;
}

const CoordiParameter& CoordiParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

CoordiParameter* CoordiParameter::default_instance_ = NULL;

CoordiParameter* CoordiParameter::New() const {
  return new CoordiParameter;
}

void CoordiParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CoordiParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(x_, c_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CoordiParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.CoordiParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_a;
        break;
      }

      // optional float a = 4 [default = 0];
      case 4: {
        if (tag == 37) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_b;
        break;
      }

      // optional float b = 5 [default = 0];
      case 5: {
        if (tag == 45) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_c;
        break;
      }

      // optional float c = 6 [default = 0];
      case 6: {
        if (tag == 53) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &c_)));
          set_has_c();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.CoordiParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.CoordiParameter)
  return false;
#undef DO_
}

void CoordiParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.CoordiParameter)
  // optional float x = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional float a = 4 [default = 0];
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->a(), output);
  }

  // optional float b = 5 [default = 0];
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->b(), output);
  }

  // optional float c = 6 [default = 0];
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->c(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.CoordiParameter)
}

::google::protobuf::uint8* CoordiParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.CoordiParameter)
  // optional float x = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional float a = 4 [default = 0];
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->a(), target);
  }

  // optional float b = 5 [default = 0];
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->b(), target);
  }

  // optional float c = 6 [default = 0];
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->c(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.CoordiParameter)
  return target;
}

int CoordiParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 4;
    }

    // optional float a = 4 [default = 0];
    if (has_a()) {
      total_size += 1 + 4;
    }

    // optional float b = 5 [default = 0];
    if (has_b()) {
      total_size += 1 + 4;
    }

    // optional float c = 6 [default = 0];
    if (has_c()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoordiParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CoordiParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CoordiParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CoordiParameter::MergeFrom(const CoordiParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CoordiParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoordiParameter::CopyFrom(const CoordiParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordiParameter::IsInitialized() const {

  return true;
}

void CoordiParameter::Swap(CoordiParameter* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(c_, other->c_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CoordiParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoordiParameter_descriptor_;
  metadata.reflection = CoordiParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SACIAParameter::kMaxIterFieldNumber;
const int SACIAParameter::kMinCorsFieldNumber;
const int SACIAParameter::kMaxCorsFieldNumber;
const int SACIAParameter::kVoxelGridFieldNumber;
const int SACIAParameter::kNormRadFieldNumber;
const int SACIAParameter::kFeatRadFieldNumber;
#endif  // !_MSC_VER

SACIAParameter::SACIAParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.SACIAParameter)
}

void SACIAParameter::InitAsDefaultInstance() {
}

SACIAParameter::SACIAParameter(const SACIAParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.SACIAParameter)
}

void SACIAParameter::SharedCtor() {
  _cached_size_ = 0;
  max_iter_ = 1000;
  min_cors_ = 3;
  max_cors_ = 1000;
  voxel_grid_ = 3;
  norm_rad_ = 20;
  feat_rad_ = 50;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SACIAParameter::~SACIAParameter() {
  // @@protoc_insertion_point(destructor:svaf.SACIAParameter)
  SharedDtor();
}

void SACIAParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SACIAParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SACIAParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SACIAParameter_descriptor_;
}

const SACIAParameter& SACIAParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

SACIAParameter* SACIAParameter::default_instance_ = NULL;

SACIAParameter* SACIAParameter::New() const {
  return new SACIAParameter;
}

void SACIAParameter::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    max_iter_ = 1000;
    min_cors_ = 3;
    max_cors_ = 1000;
    voxel_grid_ = 3;
    norm_rad_ = 20;
    feat_rad_ = 50;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SACIAParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.SACIAParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_iter = 1 [default = 1000];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iter_)));
          set_has_max_iter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_min_cors;
        break;
      }

      // optional float min_cors = 2 [default = 3];
      case 2: {
        if (tag == 21) {
         parse_min_cors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_cors_)));
          set_has_min_cors();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_max_cors;
        break;
      }

      // optional float max_cors = 3 [default = 1000];
      case 3: {
        if (tag == 29) {
         parse_max_cors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_cors_)));
          set_has_max_cors();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_voxel_grid;
        break;
      }

      // optional float voxel_grid = 4 [default = 3];
      case 4: {
        if (tag == 37) {
         parse_voxel_grid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voxel_grid_)));
          set_has_voxel_grid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_norm_rad;
        break;
      }

      // optional float norm_rad = 5 [default = 20];
      case 5: {
        if (tag == 45) {
         parse_norm_rad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &norm_rad_)));
          set_has_norm_rad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_feat_rad;
        break;
      }

      // optional float feat_rad = 6 [default = 50];
      case 6: {
        if (tag == 53) {
         parse_feat_rad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &feat_rad_)));
          set_has_feat_rad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.SACIAParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.SACIAParameter)
  return false;
#undef DO_
}

void SACIAParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.SACIAParameter)
  // optional int32 max_iter = 1 [default = 1000];
  if (has_max_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_iter(), output);
  }

  // optional float min_cors = 2 [default = 3];
  if (has_min_cors()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->min_cors(), output);
  }

  // optional float max_cors = 3 [default = 1000];
  if (has_max_cors()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_cors(), output);
  }

  // optional float voxel_grid = 4 [default = 3];
  if (has_voxel_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->voxel_grid(), output);
  }

  // optional float norm_rad = 5 [default = 20];
  if (has_norm_rad()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->norm_rad(), output);
  }

  // optional float feat_rad = 6 [default = 50];
  if (has_feat_rad()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->feat_rad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.SACIAParameter)
}

::google::protobuf::uint8* SACIAParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.SACIAParameter)
  // optional int32 max_iter = 1 [default = 1000];
  if (has_max_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_iter(), target);
  }

  // optional float min_cors = 2 [default = 3];
  if (has_min_cors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->min_cors(), target);
  }

  // optional float max_cors = 3 [default = 1000];
  if (has_max_cors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_cors(), target);
  }

  // optional float voxel_grid = 4 [default = 3];
  if (has_voxel_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->voxel_grid(), target);
  }

  // optional float norm_rad = 5 [default = 20];
  if (has_norm_rad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->norm_rad(), target);
  }

  // optional float feat_rad = 6 [default = 50];
  if (has_feat_rad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->feat_rad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.SACIAParameter)
  return target;
}

int SACIAParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 max_iter = 1 [default = 1000];
    if (has_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iter());
    }

    // optional float min_cors = 2 [default = 3];
    if (has_min_cors()) {
      total_size += 1 + 4;
    }

    // optional float max_cors = 3 [default = 1000];
    if (has_max_cors()) {
      total_size += 1 + 4;
    }

    // optional float voxel_grid = 4 [default = 3];
    if (has_voxel_grid()) {
      total_size += 1 + 4;
    }

    // optional float norm_rad = 5 [default = 20];
    if (has_norm_rad()) {
      total_size += 1 + 4;
    }

    // optional float feat_rad = 6 [default = 50];
    if (has_feat_rad()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SACIAParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SACIAParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SACIAParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SACIAParameter::MergeFrom(const SACIAParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_iter()) {
      set_max_iter(from.max_iter());
    }
    if (from.has_min_cors()) {
      set_min_cors(from.min_cors());
    }
    if (from.has_max_cors()) {
      set_max_cors(from.max_cors());
    }
    if (from.has_voxel_grid()) {
      set_voxel_grid(from.voxel_grid());
    }
    if (from.has_norm_rad()) {
      set_norm_rad(from.norm_rad());
    }
    if (from.has_feat_rad()) {
      set_feat_rad(from.feat_rad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SACIAParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SACIAParameter::CopyFrom(const SACIAParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SACIAParameter::IsInitialized() const {

  return true;
}

void SACIAParameter::Swap(SACIAParameter* other) {
  if (other != this) {
    std::swap(max_iter_, other->max_iter_);
    std::swap(min_cors_, other->min_cors_);
    std::swap(max_cors_, other->max_cors_);
    std::swap(voxel_grid_, other->voxel_grid_);
    std::swap(norm_rad_, other->norm_rad_);
    std::swap(feat_rad_, other->feat_rad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SACIAParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SACIAParameter_descriptor_;
  metadata.reflection = SACIAParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SACIAEstimateParameter::kPcdFilenameFieldNumber;
const int SACIAEstimateParameter::kIaParamFieldNumber;
const int SACIAEstimateParameter::kCoorParamFieldNumber;
#endif  // !_MSC_VER

SACIAEstimateParameter::SACIAEstimateParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.SACIAEstimateParameter)
}

void SACIAEstimateParameter::InitAsDefaultInstance() {
  ia_param_ = const_cast< ::svaf::SACIAParameter*>(&::svaf::SACIAParameter::default_instance());
  coor_param_ = const_cast< ::svaf::CoordiParameter*>(&::svaf::CoordiParameter::default_instance());
}

SACIAEstimateParameter::SACIAEstimateParameter(const SACIAEstimateParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.SACIAEstimateParameter)
}

void SACIAEstimateParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pcd_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ia_param_ = NULL;
  coor_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SACIAEstimateParameter::~SACIAEstimateParameter() {
  // @@protoc_insertion_point(destructor:svaf.SACIAEstimateParameter)
  SharedDtor();
}

void SACIAEstimateParameter::SharedDtor() {
  if (pcd_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pcd_filename_;
  }
  if (this != default_instance_) {
    delete ia_param_;
    delete coor_param_;
  }
}

void SACIAEstimateParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SACIAEstimateParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SACIAEstimateParameter_descriptor_;
}

const SACIAEstimateParameter& SACIAEstimateParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

SACIAEstimateParameter* SACIAEstimateParameter::default_instance_ = NULL;

SACIAEstimateParameter* SACIAEstimateParameter::New() const {
  return new SACIAEstimateParameter;
}

void SACIAEstimateParameter::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_pcd_filename()) {
      if (pcd_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pcd_filename_->clear();
      }
    }
    if (has_ia_param()) {
      if (ia_param_ != NULL) ia_param_->::svaf::SACIAParameter::Clear();
    }
    if (has_coor_param()) {
      if (coor_param_ != NULL) coor_param_->::svaf::CoordiParameter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SACIAEstimateParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.SACIAEstimateParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pcd_filename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pcd_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pcd_filename().data(), this->pcd_filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pcd_filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ia_param;
        break;
      }

      // optional .svaf.SACIAParameter ia_param = 2;
      case 2: {
        if (tag == 18) {
         parse_ia_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ia_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_coor_param;
        break;
      }

      // optional .svaf.CoordiParameter coor_param = 3;
      case 3: {
        if (tag == 26) {
         parse_coor_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coor_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.SACIAEstimateParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.SACIAEstimateParameter)
  return false;
#undef DO_
}

void SACIAEstimateParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.SACIAEstimateParameter)
  // optional string pcd_filename = 1;
  if (has_pcd_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcd_filename().data(), this->pcd_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pcd_filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pcd_filename(), output);
  }

  // optional .svaf.SACIAParameter ia_param = 2;
  if (has_ia_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ia_param(), output);
  }

  // optional .svaf.CoordiParameter coor_param = 3;
  if (has_coor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->coor_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.SACIAEstimateParameter)
}

::google::protobuf::uint8* SACIAEstimateParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.SACIAEstimateParameter)
  // optional string pcd_filename = 1;
  if (has_pcd_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcd_filename().data(), this->pcd_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pcd_filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pcd_filename(), target);
  }

  // optional .svaf.SACIAParameter ia_param = 2;
  if (has_ia_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ia_param(), target);
  }

  // optional .svaf.CoordiParameter coor_param = 3;
  if (has_coor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->coor_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.SACIAEstimateParameter)
  return target;
}

int SACIAEstimateParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pcd_filename = 1;
    if (has_pcd_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pcd_filename());
    }

    // optional .svaf.SACIAParameter ia_param = 2;
    if (has_ia_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ia_param());
    }

    // optional .svaf.CoordiParameter coor_param = 3;
    if (has_coor_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coor_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SACIAEstimateParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SACIAEstimateParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SACIAEstimateParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SACIAEstimateParameter::MergeFrom(const SACIAEstimateParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pcd_filename()) {
      set_pcd_filename(from.pcd_filename());
    }
    if (from.has_ia_param()) {
      mutable_ia_param()->::svaf::SACIAParameter::MergeFrom(from.ia_param());
    }
    if (from.has_coor_param()) {
      mutable_coor_param()->::svaf::CoordiParameter::MergeFrom(from.coor_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SACIAEstimateParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SACIAEstimateParameter::CopyFrom(const SACIAEstimateParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SACIAEstimateParameter::IsInitialized() const {

  return true;
}

void SACIAEstimateParameter::Swap(SACIAEstimateParameter* other) {
  if (other != this) {
    std::swap(pcd_filename_, other->pcd_filename_);
    std::swap(ia_param_, other->ia_param_);
    std::swap(coor_param_, other->coor_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SACIAEstimateParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SACIAEstimateParameter_descriptor_;
  metadata.reflection = SACIAEstimateParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ICPParameter::kMaxIterFieldNumber;
const int ICPParameter::kMaxRespFieldNumber;
const int ICPParameter::kEspFieldNumber;
#endif  // !_MSC_VER

ICPParameter::ICPParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.ICPParameter)
}

void ICPParameter::InitAsDefaultInstance() {
}

ICPParameter::ICPParameter(const ICPParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.ICPParameter)
}

void ICPParameter::SharedCtor() {
  _cached_size_ = 0;
  max_iter_ = 2;
  max_resp_ = 10;
  esp_ = 0.1f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ICPParameter::~ICPParameter() {
  // @@protoc_insertion_point(destructor:svaf.ICPParameter)
  SharedDtor();
}

void ICPParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ICPParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ICPParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ICPParameter_descriptor_;
}

const ICPParameter& ICPParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

ICPParameter* ICPParameter::default_instance_ = NULL;

ICPParameter* ICPParameter::New() const {
  return new ICPParameter;
}

void ICPParameter::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    max_iter_ = 2;
    max_resp_ = 10;
    esp_ = 0.1f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ICPParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.ICPParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_iter = 1 [default = 2];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iter_)));
          set_has_max_iter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_max_resp;
        break;
      }

      // optional float max_resp = 2 [default = 10];
      case 2: {
        if (tag == 21) {
         parse_max_resp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_resp_)));
          set_has_max_resp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_esp;
        break;
      }

      // optional float esp = 3 [default = 0.1];
      case 3: {
        if (tag == 29) {
         parse_esp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &esp_)));
          set_has_esp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.ICPParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.ICPParameter)
  return false;
#undef DO_
}

void ICPParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.ICPParameter)
  // optional int32 max_iter = 1 [default = 2];
  if (has_max_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_iter(), output);
  }

  // optional float max_resp = 2 [default = 10];
  if (has_max_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_resp(), output);
  }

  // optional float esp = 3 [default = 0.1];
  if (has_esp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->esp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.ICPParameter)
}

::google::protobuf::uint8* ICPParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.ICPParameter)
  // optional int32 max_iter = 1 [default = 2];
  if (has_max_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_iter(), target);
  }

  // optional float max_resp = 2 [default = 10];
  if (has_max_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_resp(), target);
  }

  // optional float esp = 3 [default = 0.1];
  if (has_esp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->esp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.ICPParameter)
  return target;
}

int ICPParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 max_iter = 1 [default = 2];
    if (has_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iter());
    }

    // optional float max_resp = 2 [default = 10];
    if (has_max_resp()) {
      total_size += 1 + 4;
    }

    // optional float esp = 3 [default = 0.1];
    if (has_esp()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ICPParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ICPParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ICPParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ICPParameter::MergeFrom(const ICPParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_iter()) {
      set_max_iter(from.max_iter());
    }
    if (from.has_max_resp()) {
      set_max_resp(from.max_resp());
    }
    if (from.has_esp()) {
      set_esp(from.esp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ICPParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ICPParameter::CopyFrom(const ICPParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ICPParameter::IsInitialized() const {

  return true;
}

void ICPParameter::Swap(ICPParameter* other) {
  if (other != this) {
    std::swap(max_iter_, other->max_iter_);
    std::swap(max_resp_, other->max_resp_);
    std::swap(esp_, other->esp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ICPParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ICPParameter_descriptor_;
  metadata.reflection = ICPParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IAICPEstimateParameter::kPcdFilenameFieldNumber;
const int IAICPEstimateParameter::kSaciaParamFieldNumber;
const int IAICPEstimateParameter::kIcpParamFieldNumber;
const int IAICPEstimateParameter::kCoorParamFieldNumber;
#endif  // !_MSC_VER

IAICPEstimateParameter::IAICPEstimateParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.IAICPEstimateParameter)
}

void IAICPEstimateParameter::InitAsDefaultInstance() {
  sacia_param_ = const_cast< ::svaf::SACIAParameter*>(&::svaf::SACIAParameter::default_instance());
  icp_param_ = const_cast< ::svaf::ICPParameter*>(&::svaf::ICPParameter::default_instance());
  coor_param_ = const_cast< ::svaf::CoordiParameter*>(&::svaf::CoordiParameter::default_instance());
}

IAICPEstimateParameter::IAICPEstimateParameter(const IAICPEstimateParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.IAICPEstimateParameter)
}

void IAICPEstimateParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pcd_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sacia_param_ = NULL;
  icp_param_ = NULL;
  coor_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IAICPEstimateParameter::~IAICPEstimateParameter() {
  // @@protoc_insertion_point(destructor:svaf.IAICPEstimateParameter)
  SharedDtor();
}

void IAICPEstimateParameter::SharedDtor() {
  if (pcd_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pcd_filename_;
  }
  if (this != default_instance_) {
    delete sacia_param_;
    delete icp_param_;
    delete coor_param_;
  }
}

void IAICPEstimateParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IAICPEstimateParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IAICPEstimateParameter_descriptor_;
}

const IAICPEstimateParameter& IAICPEstimateParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

IAICPEstimateParameter* IAICPEstimateParameter::default_instance_ = NULL;

IAICPEstimateParameter* IAICPEstimateParameter::New() const {
  return new IAICPEstimateParameter;
}

void IAICPEstimateParameter::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_pcd_filename()) {
      if (pcd_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pcd_filename_->clear();
      }
    }
    if (has_sacia_param()) {
      if (sacia_param_ != NULL) sacia_param_->::svaf::SACIAParameter::Clear();
    }
    if (has_icp_param()) {
      if (icp_param_ != NULL) icp_param_->::svaf::ICPParameter::Clear();
    }
    if (has_coor_param()) {
      if (coor_param_ != NULL) coor_param_->::svaf::CoordiParameter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IAICPEstimateParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.IAICPEstimateParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pcd_filename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pcd_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pcd_filename().data(), this->pcd_filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pcd_filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sacia_param;
        break;
      }

      // optional .svaf.SACIAParameter sacia_param = 2;
      case 2: {
        if (tag == 18) {
         parse_sacia_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sacia_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_icp_param;
        break;
      }

      // optional .svaf.ICPParameter icp_param = 3;
      case 3: {
        if (tag == 26) {
         parse_icp_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_icp_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_coor_param;
        break;
      }

      // optional .svaf.CoordiParameter coor_param = 4;
      case 4: {
        if (tag == 34) {
         parse_coor_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coor_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.IAICPEstimateParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.IAICPEstimateParameter)
  return false;
#undef DO_
}

void IAICPEstimateParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.IAICPEstimateParameter)
  // optional string pcd_filename = 1;
  if (has_pcd_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcd_filename().data(), this->pcd_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pcd_filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pcd_filename(), output);
  }

  // optional .svaf.SACIAParameter sacia_param = 2;
  if (has_sacia_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sacia_param(), output);
  }

  // optional .svaf.ICPParameter icp_param = 3;
  if (has_icp_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->icp_param(), output);
  }

  // optional .svaf.CoordiParameter coor_param = 4;
  if (has_coor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->coor_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.IAICPEstimateParameter)
}

::google::protobuf::uint8* IAICPEstimateParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.IAICPEstimateParameter)
  // optional string pcd_filename = 1;
  if (has_pcd_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcd_filename().data(), this->pcd_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pcd_filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pcd_filename(), target);
  }

  // optional .svaf.SACIAParameter sacia_param = 2;
  if (has_sacia_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sacia_param(), target);
  }

  // optional .svaf.ICPParameter icp_param = 3;
  if (has_icp_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->icp_param(), target);
  }

  // optional .svaf.CoordiParameter coor_param = 4;
  if (has_coor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->coor_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.IAICPEstimateParameter)
  return target;
}

int IAICPEstimateParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pcd_filename = 1;
    if (has_pcd_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pcd_filename());
    }

    // optional .svaf.SACIAParameter sacia_param = 2;
    if (has_sacia_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sacia_param());
    }

    // optional .svaf.ICPParameter icp_param = 3;
    if (has_icp_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->icp_param());
    }

    // optional .svaf.CoordiParameter coor_param = 4;
    if (has_coor_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coor_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IAICPEstimateParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IAICPEstimateParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IAICPEstimateParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IAICPEstimateParameter::MergeFrom(const IAICPEstimateParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pcd_filename()) {
      set_pcd_filename(from.pcd_filename());
    }
    if (from.has_sacia_param()) {
      mutable_sacia_param()->::svaf::SACIAParameter::MergeFrom(from.sacia_param());
    }
    if (from.has_icp_param()) {
      mutable_icp_param()->::svaf::ICPParameter::MergeFrom(from.icp_param());
    }
    if (from.has_coor_param()) {
      mutable_coor_param()->::svaf::CoordiParameter::MergeFrom(from.coor_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IAICPEstimateParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IAICPEstimateParameter::CopyFrom(const IAICPEstimateParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IAICPEstimateParameter::IsInitialized() const {

  return true;
}

void IAICPEstimateParameter::Swap(IAICPEstimateParameter* other) {
  if (other != this) {
    std::swap(pcd_filename_, other->pcd_filename_);
    std::swap(sacia_param_, other->sacia_param_);
    std::swap(icp_param_, other->icp_param_);
    std::swap(coor_param_, other->coor_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IAICPEstimateParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IAICPEstimateParameter_descriptor_;
  metadata.reflection = IAICPEstimateParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NDTParameter::kMaxIterFieldNumber;
const int NDTParameter::kStepSizeFieldNumber;
const int NDTParameter::kResolutionFieldNumber;
const int NDTParameter::kEspFieldNumber;
#endif  // !_MSC_VER

NDTParameter::NDTParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.NDTParameter)
}

void NDTParameter::InitAsDefaultInstance() {
}

NDTParameter::NDTParameter(const NDTParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.NDTParameter)
}

void NDTParameter::SharedCtor() {
  _cached_size_ = 0;
  max_iter_ = 100;
  step_size_ = 10;
  resolution_ = 10;
  esp_ = 0.1f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NDTParameter::~NDTParameter() {
  // @@protoc_insertion_point(destructor:svaf.NDTParameter)
  SharedDtor();
}

void NDTParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NDTParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NDTParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NDTParameter_descriptor_;
}

const NDTParameter& NDTParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

NDTParameter* NDTParameter::default_instance_ = NULL;

NDTParameter* NDTParameter::New() const {
  return new NDTParameter;
}

void NDTParameter::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    max_iter_ = 100;
    step_size_ = 10;
    resolution_ = 10;
    esp_ = 0.1f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NDTParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.NDTParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_iter = 1 [default = 100];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iter_)));
          set_has_max_iter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_step_size;
        break;
      }

      // optional float step_size = 2 [default = 10];
      case 2: {
        if (tag == 21) {
         parse_step_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &step_size_)));
          set_has_step_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_resolution;
        break;
      }

      // optional float resolution = 3 [default = 10];
      case 3: {
        if (tag == 29) {
         parse_resolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &resolution_)));
          set_has_resolution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_esp;
        break;
      }

      // optional float esp = 4 [default = 0.1];
      case 4: {
        if (tag == 37) {
         parse_esp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &esp_)));
          set_has_esp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.NDTParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.NDTParameter)
  return false;
#undef DO_
}

void NDTParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.NDTParameter)
  // optional int32 max_iter = 1 [default = 100];
  if (has_max_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_iter(), output);
  }

  // optional float step_size = 2 [default = 10];
  if (has_step_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->step_size(), output);
  }

  // optional float resolution = 3 [default = 10];
  if (has_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->resolution(), output);
  }

  // optional float esp = 4 [default = 0.1];
  if (has_esp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->esp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.NDTParameter)
}

::google::protobuf::uint8* NDTParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.NDTParameter)
  // optional int32 max_iter = 1 [default = 100];
  if (has_max_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_iter(), target);
  }

  // optional float step_size = 2 [default = 10];
  if (has_step_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->step_size(), target);
  }

  // optional float resolution = 3 [default = 10];
  if (has_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->resolution(), target);
  }

  // optional float esp = 4 [default = 0.1];
  if (has_esp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->esp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.NDTParameter)
  return target;
}

int NDTParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 max_iter = 1 [default = 100];
    if (has_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iter());
    }

    // optional float step_size = 2 [default = 10];
    if (has_step_size()) {
      total_size += 1 + 4;
    }

    // optional float resolution = 3 [default = 10];
    if (has_resolution()) {
      total_size += 1 + 4;
    }

    // optional float esp = 4 [default = 0.1];
    if (has_esp()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NDTParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NDTParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NDTParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NDTParameter::MergeFrom(const NDTParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_iter()) {
      set_max_iter(from.max_iter());
    }
    if (from.has_step_size()) {
      set_step_size(from.step_size());
    }
    if (from.has_resolution()) {
      set_resolution(from.resolution());
    }
    if (from.has_esp()) {
      set_esp(from.esp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NDTParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NDTParameter::CopyFrom(const NDTParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NDTParameter::IsInitialized() const {

  return true;
}

void NDTParameter::Swap(NDTParameter* other) {
  if (other != this) {
    std::swap(max_iter_, other->max_iter_);
    std::swap(step_size_, other->step_size_);
    std::swap(resolution_, other->resolution_);
    std::swap(esp_, other->esp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NDTParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NDTParameter_descriptor_;
  metadata.reflection = NDTParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IANDTEstimateParameter::kPcdFilenameFieldNumber;
const int IANDTEstimateParameter::kSaciaParamFieldNumber;
const int IANDTEstimateParameter::kNdtParamFieldNumber;
const int IANDTEstimateParameter::kCoorParamFieldNumber;
#endif  // !_MSC_VER

IANDTEstimateParameter::IANDTEstimateParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.IANDTEstimateParameter)
}

void IANDTEstimateParameter::InitAsDefaultInstance() {
  sacia_param_ = const_cast< ::svaf::SACIAParameter*>(&::svaf::SACIAParameter::default_instance());
  ndt_param_ = const_cast< ::svaf::NDTParameter*>(&::svaf::NDTParameter::default_instance());
  coor_param_ = const_cast< ::svaf::CoordiParameter*>(&::svaf::CoordiParameter::default_instance());
}

IANDTEstimateParameter::IANDTEstimateParameter(const IANDTEstimateParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.IANDTEstimateParameter)
}

void IANDTEstimateParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pcd_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sacia_param_ = NULL;
  ndt_param_ = NULL;
  coor_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IANDTEstimateParameter::~IANDTEstimateParameter() {
  // @@protoc_insertion_point(destructor:svaf.IANDTEstimateParameter)
  SharedDtor();
}

void IANDTEstimateParameter::SharedDtor() {
  if (pcd_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pcd_filename_;
  }
  if (this != default_instance_) {
    delete sacia_param_;
    delete ndt_param_;
    delete coor_param_;
  }
}

void IANDTEstimateParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IANDTEstimateParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IANDTEstimateParameter_descriptor_;
}

const IANDTEstimateParameter& IANDTEstimateParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

IANDTEstimateParameter* IANDTEstimateParameter::default_instance_ = NULL;

IANDTEstimateParameter* IANDTEstimateParameter::New() const {
  return new IANDTEstimateParameter;
}

void IANDTEstimateParameter::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_pcd_filename()) {
      if (pcd_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pcd_filename_->clear();
      }
    }
    if (has_sacia_param()) {
      if (sacia_param_ != NULL) sacia_param_->::svaf::SACIAParameter::Clear();
    }
    if (has_ndt_param()) {
      if (ndt_param_ != NULL) ndt_param_->::svaf::NDTParameter::Clear();
    }
    if (has_coor_param()) {
      if (coor_param_ != NULL) coor_param_->::svaf::CoordiParameter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IANDTEstimateParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.IANDTEstimateParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pcd_filename = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pcd_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pcd_filename().data(), this->pcd_filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pcd_filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sacia_param;
        break;
      }

      // optional .svaf.SACIAParameter sacia_param = 2;
      case 2: {
        if (tag == 18) {
         parse_sacia_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sacia_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ndt_param;
        break;
      }

      // optional .svaf.NDTParameter ndt_param = 3;
      case 3: {
        if (tag == 26) {
         parse_ndt_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ndt_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_coor_param;
        break;
      }

      // optional .svaf.CoordiParameter coor_param = 4;
      case 4: {
        if (tag == 34) {
         parse_coor_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coor_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.IANDTEstimateParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.IANDTEstimateParameter)
  return false;
#undef DO_
}

void IANDTEstimateParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.IANDTEstimateParameter)
  // optional string pcd_filename = 1;
  if (has_pcd_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcd_filename().data(), this->pcd_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pcd_filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pcd_filename(), output);
  }

  // optional .svaf.SACIAParameter sacia_param = 2;
  if (has_sacia_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sacia_param(), output);
  }

  // optional .svaf.NDTParameter ndt_param = 3;
  if (has_ndt_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ndt_param(), output);
  }

  // optional .svaf.CoordiParameter coor_param = 4;
  if (has_coor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->coor_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.IANDTEstimateParameter)
}

::google::protobuf::uint8* IANDTEstimateParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.IANDTEstimateParameter)
  // optional string pcd_filename = 1;
  if (has_pcd_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pcd_filename().data(), this->pcd_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pcd_filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pcd_filename(), target);
  }

  // optional .svaf.SACIAParameter sacia_param = 2;
  if (has_sacia_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sacia_param(), target);
  }

  // optional .svaf.NDTParameter ndt_param = 3;
  if (has_ndt_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ndt_param(), target);
  }

  // optional .svaf.CoordiParameter coor_param = 4;
  if (has_coor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->coor_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.IANDTEstimateParameter)
  return target;
}

int IANDTEstimateParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pcd_filename = 1;
    if (has_pcd_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pcd_filename());
    }

    // optional .svaf.SACIAParameter sacia_param = 2;
    if (has_sacia_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sacia_param());
    }

    // optional .svaf.NDTParameter ndt_param = 3;
    if (has_ndt_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ndt_param());
    }

    // optional .svaf.CoordiParameter coor_param = 4;
    if (has_coor_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coor_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IANDTEstimateParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IANDTEstimateParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IANDTEstimateParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IANDTEstimateParameter::MergeFrom(const IANDTEstimateParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pcd_filename()) {
      set_pcd_filename(from.pcd_filename());
    }
    if (from.has_sacia_param()) {
      mutable_sacia_param()->::svaf::SACIAParameter::MergeFrom(from.sacia_param());
    }
    if (from.has_ndt_param()) {
      mutable_ndt_param()->::svaf::NDTParameter::MergeFrom(from.ndt_param());
    }
    if (from.has_coor_param()) {
      mutable_coor_param()->::svaf::CoordiParameter::MergeFrom(from.coor_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IANDTEstimateParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IANDTEstimateParameter::CopyFrom(const IANDTEstimateParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IANDTEstimateParameter::IsInitialized() const {

  return true;
}

void IANDTEstimateParameter::Swap(IANDTEstimateParameter* other) {
  if (other != this) {
    std::swap(pcd_filename_, other->pcd_filename_);
    std::swap(sacia_param_, other->sacia_param_);
    std::swap(ndt_param_, other->ndt_param_);
    std::swap(coor_param_, other->coor_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IANDTEstimateParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IANDTEstimateParameter_descriptor_;
  metadata.reflection = IANDTEstimateParameter_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LayerParameter_LayerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerParameter_LayerType_descriptor_;
}
bool LayerParameter_LayerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 21:
    case 31:
    case 32:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 68:
    case 69:
    case 71:
    case 72:
    case 81:
    case 82:
    case 91:
    case 94:
    case 95:
    case 96:
    case 101:
    case 141:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LayerParameter_LayerType LayerParameter::NONE;
const LayerParameter_LayerType LayerParameter::IMAGE;
const LayerParameter_LayerType LayerParameter::IMAGE_PAIR;
const LayerParameter_LayerType LayerParameter::VIDEO;
const LayerParameter_LayerType LayerParameter::VIDEO_PAIR;
const LayerParameter_LayerType LayerParameter::CAMERA;
const LayerParameter_LayerType LayerParameter::CAMERA_PAIR;
const LayerParameter_LayerType LayerParameter::DSP;
const LayerParameter_LayerType LayerParameter::DSP_PAIR;
const LayerParameter_LayerType LayerParameter::KINECT;
const LayerParameter_LayerType LayerParameter::IMAGE_FOLDER;
const LayerParameter_LayerType LayerParameter::IMAGE_PAIR_FOLDER;
const LayerParameter_LayerType LayerParameter::ADABOOST;
const LayerParameter_LayerType LayerParameter::MILTRACK;
const LayerParameter_LayerType LayerParameter::BITTRACK;
const LayerParameter_LayerType LayerParameter::SIFT_POINT;
const LayerParameter_LayerType LayerParameter::SURF_POINT;
const LayerParameter_LayerType LayerParameter::STAR_POINT;
const LayerParameter_LayerType LayerParameter::BRISK_POINT;
const LayerParameter_LayerType LayerParameter::FAST_POINT;
const LayerParameter_LayerType LayerParameter::ORB_POINT;
const LayerParameter_LayerType LayerParameter::KAZE_POINT;
const LayerParameter_LayerType LayerParameter::HARRIS_POINT;
const LayerParameter_LayerType LayerParameter::CV_POINT;
const LayerParameter_LayerType LayerParameter::SIFT_DESP;
const LayerParameter_LayerType LayerParameter::SURF_DESP;
const LayerParameter_LayerType LayerParameter::STAR_DESP;
const LayerParameter_LayerType LayerParameter::BRIEF_DESP;
const LayerParameter_LayerType LayerParameter::BRISK_DESP;
const LayerParameter_LayerType LayerParameter::FAST_DESP;
const LayerParameter_LayerType LayerParameter::ORB_DESP;
const LayerParameter_LayerType LayerParameter::KAZE_DESP;
const LayerParameter_LayerType LayerParameter::CV_DESP;
const LayerParameter_LayerType LayerParameter::KDTREE_MATCH;
const LayerParameter_LayerType LayerParameter::EULAR_MATCH;
const LayerParameter_LayerType LayerParameter::RANSAC;
const LayerParameter_LayerType LayerParameter::BF_MATCH;
const LayerParameter_LayerType LayerParameter::FLANN_MATCH;
const LayerParameter_LayerType LayerParameter::EC_MATCH;
const LayerParameter_LayerType LayerParameter::CV_MATCH;
const LayerParameter_LayerType LayerParameter::SGM_MATCH;
const LayerParameter_LayerType LayerParameter::EADP_MATCH;
const LayerParameter_LayerType LayerParameter::TRIANG;
const LayerParameter_LayerType LayerParameter::MXMUL;
const LayerParameter_LayerType LayerParameter::CENTER_POS;
const LayerParameter_LayerType LayerParameter::IA_EST;
const LayerParameter_LayerType LayerParameter::IAICP_EST;
const LayerParameter_LayerType LayerParameter::IANDT_EST;
const LayerParameter_LayerType LayerParameter::SUPIX_SEG;
const LayerParameter_LayerType LayerParameter::RECTIFY;
const LayerParameter_LayerType LayerParameter::LayerType_MIN;
const LayerParameter_LayerType LayerParameter::LayerType_MAX;
const int LayerParameter::LayerType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LayerParameter::kNameFieldNumber;
const int LayerParameter::kBottomFieldNumber;
const int LayerParameter::kTopFieldNumber;
const int LayerParameter::kShowFieldNumber;
const int LayerParameter::kSaveFieldNumber;
const int LayerParameter::kLogtFieldNumber;
const int LayerParameter::kLogiFieldNumber;
const int LayerParameter::kTypeFieldNumber;
const int LayerParameter::kImageopParamFieldNumber;
const int LayerParameter::kSupixParamFieldNumber;
const int LayerParameter::kResizeParamFieldNumber;
const int LayerParameter::kCropParamFieldNumber;
const int LayerParameter::kStereoopParamFieldNumber;
const int LayerParameter::kRectifyParamFieldNumber;
const int LayerParameter::kDataParamFieldNumber;
const int LayerParameter::kImagedataParamFieldNumber;
const int LayerParameter::kImagepairParamFieldNumber;
const int LayerParameter::kVideodataParamFieldNumber;
const int LayerParameter::kVideopairParamFieldNumber;
const int LayerParameter::kCameradataParamFieldNumber;
const int LayerParameter::kCamerapairParamFieldNumber;
const int LayerParameter::kDspcameradataParamFieldNumber;
const int LayerParameter::kDspcamerapairParamFieldNumber;
const int LayerParameter::kKinectdataParamFieldNumber;
const int LayerParameter::kFolderParamFieldNumber;
const int LayerParameter::kPairfolderParamFieldNumber;
const int LayerParameter::kRecognizeParamFieldNumber;
const int LayerParameter::kAdaboostParamFieldNumber;
const int LayerParameter::kTrackParamFieldNumber;
const int LayerParameter::kMiltrackParamFieldNumber;
const int LayerParameter::kBittrackParamFieldNumber;
const int LayerParameter::kFeaturepointParamFieldNumber;
const int LayerParameter::kSiftpointParamFieldNumber;
const int LayerParameter::kSurfpointParamFieldNumber;
const int LayerParameter::kStarpointParamFieldNumber;
const int LayerParameter::kBriskpointParamFieldNumber;
const int LayerParameter::kFastpointParamFieldNumber;
const int LayerParameter::kOrbpointParamFieldNumber;
const int LayerParameter::kKazepointParamFieldNumber;
const int LayerParameter::kHarrispointParamFieldNumber;
const int LayerParameter::kCvpointParamFieldNumber;
const int LayerParameter::kFeaturedescriptorParamFieldNumber;
const int LayerParameter::kSiftdescriptorParamFieldNumber;
const int LayerParameter::kSurfdescriptorParamFieldNumber;
const int LayerParameter::kStardescriptorParamFieldNumber;
const int LayerParameter::kBriefdescriptorParamFieldNumber;
const int LayerParameter::kBriskdescriptorParamFieldNumber;
const int LayerParameter::kFastdescriptorParamFieldNumber;
const int LayerParameter::kOrbdescriptorParamFieldNumber;
const int LayerParameter::kKazedescriptorParamFieldNumber;
const int LayerParameter::kCvdescriptorParamFieldNumber;
const int LayerParameter::kVectormatchParamFieldNumber;
const int LayerParameter::kKdtreematchParamFieldNumber;
const int LayerParameter::kEularmatchParamFieldNumber;
const int LayerParameter::kRansacParamFieldNumber;
const int LayerParameter::kBfmatchParamFieldNumber;
const int LayerParameter::kFlannmatchParamFieldNumber;
const int LayerParameter::kEcmatchParamFieldNumber;
const int LayerParameter::kCvmatchParamFieldNumber;
const int LayerParameter::kStereomatchParamFieldNumber;
const int LayerParameter::kSgmParamFieldNumber;
const int LayerParameter::kEadpParamFieldNumber;
const int LayerParameter::kOutputParamFieldNumber;
const int LayerParameter::kTriangParamFieldNumber;
const int LayerParameter::kMxmulParamFieldNumber;
const int LayerParameter::kPosestParamFieldNumber;
const int LayerParameter::kCenterpointParamFieldNumber;
const int LayerParameter::kSaciaParamFieldNumber;
const int LayerParameter::kIaicpParamFieldNumber;
const int LayerParameter::kIandtParamFieldNumber;
#endif  // !_MSC_VER

LayerParameter::LayerParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svaf.LayerParameter)
}

void LayerParameter::InitAsDefaultInstance() {
  imageop_param_ = const_cast< ::svaf::ImageOperationParameter*>(&::svaf::ImageOperationParameter::default_instance());
  supix_param_ = const_cast< ::svaf::SuperPixelSegmentParameter*>(&::svaf::SuperPixelSegmentParameter::default_instance());
  resize_param_ = const_cast< ::svaf::ImageResizeParameter*>(&::svaf::ImageResizeParameter::default_instance());
  crop_param_ = const_cast< ::svaf::ImageCropParameter*>(&::svaf::ImageCropParameter::default_instance());
  stereoop_param_ = const_cast< ::svaf::StereoOperationParameter*>(&::svaf::StereoOperationParameter::default_instance());
  rectify_param_ = const_cast< ::svaf::StereoRectifyParameter*>(&::svaf::StereoRectifyParameter::default_instance());
  data_param_ = const_cast< ::svaf::DataParameter*>(&::svaf::DataParameter::default_instance());
  imagedata_param_ = const_cast< ::svaf::ImageDataParameter*>(&::svaf::ImageDataParameter::default_instance());
  imagepair_param_ = const_cast< ::svaf::ImagePairParameter*>(&::svaf::ImagePairParameter::default_instance());
  videodata_param_ = const_cast< ::svaf::VideoDataParameter*>(&::svaf::VideoDataParameter::default_instance());
  videopair_param_ = const_cast< ::svaf::VideoPairParameter*>(&::svaf::VideoPairParameter::default_instance());
  cameradata_param_ = const_cast< ::svaf::CameraDataParameter*>(&::svaf::CameraDataParameter::default_instance());
  camerapair_param_ = const_cast< ::svaf::CameraPairParameter*>(&::svaf::CameraPairParameter::default_instance());
  dspcameradata_param_ = const_cast< ::svaf::DSPCameraDataParameter*>(&::svaf::DSPCameraDataParameter::default_instance());
  dspcamerapair_param_ = const_cast< ::svaf::DSPCameraPairParameter*>(&::svaf::DSPCameraPairParameter::default_instance());
  kinectdata_param_ = const_cast< ::svaf::KinectDataParameter*>(&::svaf::KinectDataParameter::default_instance());
  folder_param_ = const_cast< ::svaf::ImageFolderParameter*>(&::svaf::ImageFolderParameter::default_instance());
  pairfolder_param_ = const_cast< ::svaf::ImagePairFolderParameter*>(&::svaf::ImagePairFolderParameter::default_instance());
  recognize_param_ = const_cast< ::svaf::RecognizeParameter*>(&::svaf::RecognizeParameter::default_instance());
  adaboost_param_ = const_cast< ::svaf::AdaboostParameter*>(&::svaf::AdaboostParameter::default_instance());
  track_param_ = const_cast< ::svaf::TrackParameter*>(&::svaf::TrackParameter::default_instance());
  miltrack_param_ = const_cast< ::svaf::MilTrackParameter*>(&::svaf::MilTrackParameter::default_instance());
  bittrack_param_ = const_cast< ::svaf::MilTrackParameter*>(&::svaf::MilTrackParameter::default_instance());
  featurepoint_param_ = const_cast< ::svaf::FeaturePointParameter*>(&::svaf::FeaturePointParameter::default_instance());
  siftpoint_param_ = const_cast< ::svaf::SIFTPointParameter*>(&::svaf::SIFTPointParameter::default_instance());
  surfpoint_param_ = const_cast< ::svaf::SURFPointParameter*>(&::svaf::SURFPointParameter::default_instance());
  starpoint_param_ = const_cast< ::svaf::STARPointParameter*>(&::svaf::STARPointParameter::default_instance());
  briskpoint_param_ = const_cast< ::svaf::BRISKPointParameter*>(&::svaf::BRISKPointParameter::default_instance());
  fastpoint_param_ = const_cast< ::svaf::FASTPointParameter*>(&::svaf::FASTPointParameter::default_instance());
  orbpoint_param_ = const_cast< ::svaf::ORBPointParameter*>(&::svaf::ORBPointParameter::default_instance());
  kazepoint_param_ = const_cast< ::svaf::KAZEPointParameter*>(&::svaf::KAZEPointParameter::default_instance());
  harrispoint_param_ = const_cast< ::svaf::HarrisPointParameter*>(&::svaf::HarrisPointParameter::default_instance());
  cvpoint_param_ = const_cast< ::svaf::CVPointParameter*>(&::svaf::CVPointParameter::default_instance());
  featuredescriptor_param_ = const_cast< ::svaf::FeatureDescriptorParameter*>(&::svaf::FeatureDescriptorParameter::default_instance());
  siftdescriptor_param_ = const_cast< ::svaf::SIFTDescriptorParameter*>(&::svaf::SIFTDescriptorParameter::default_instance());
  surfdescriptor_param_ = const_cast< ::svaf::SURFDescriptorParameter*>(&::svaf::SURFDescriptorParameter::default_instance());
  stardescriptor_param_ = const_cast< ::svaf::STARDescriptorParameter*>(&::svaf::STARDescriptorParameter::default_instance());
  briefdescriptor_param_ = const_cast< ::svaf::BRIEFDescriptorParameter*>(&::svaf::BRIEFDescriptorParameter::default_instance());
  briskdescriptor_param_ = const_cast< ::svaf::BRISKDescriptorParameter*>(&::svaf::BRISKDescriptorParameter::default_instance());
  fastdescriptor_param_ = const_cast< ::svaf::FASTDescriptorParameter*>(&::svaf::FASTDescriptorParameter::default_instance());
  orbdescriptor_param_ = const_cast< ::svaf::ORBDescriptorParameter*>(&::svaf::ORBDescriptorParameter::default_instance());
  kazedescriptor_param_ = const_cast< ::svaf::KAZEDescriptorParameter*>(&::svaf::KAZEDescriptorParameter::default_instance());
  cvdescriptor_param_ = const_cast< ::svaf::CVDescriptorParameter*>(&::svaf::CVDescriptorParameter::default_instance());
  vectormatch_param_ = const_cast< ::svaf::VectorMatchParameter*>(&::svaf::VectorMatchParameter::default_instance());
  kdtreematch_param_ = const_cast< ::svaf::KDTreeMatchParameter*>(&::svaf::KDTreeMatchParameter::default_instance());
  eularmatch_param_ = const_cast< ::svaf::EularMatchParameter*>(&::svaf::EularMatchParameter::default_instance());
  ransac_param_ = const_cast< ::svaf::RansacParameter*>(&::svaf::RansacParameter::default_instance());
  bfmatch_param_ = const_cast< ::svaf::BruteForceMatchParameter*>(&::svaf::BruteForceMatchParameter::default_instance());
  flannmatch_param_ = const_cast< ::svaf::FLANNMatchParameter*>(&::svaf::FLANNMatchParameter::default_instance());
  ecmatch_param_ = const_cast< ::svaf::ECMatchParameter*>(&::svaf::ECMatchParameter::default_instance());
  cvmatch_param_ = const_cast< ::svaf::CVMatchParameter*>(&::svaf::CVMatchParameter::default_instance());
  stereomatch_param_ = const_cast< ::svaf::StereoMatchParameter*>(&::svaf::StereoMatchParameter::default_instance());
  sgm_param_ = const_cast< ::svaf::SGMMatchParameter*>(&::svaf::SGMMatchParameter::default_instance());
  eadp_param_ = const_cast< ::svaf::EADPMatchParameter*>(&::svaf::EADPMatchParameter::default_instance());
  output_param_ = const_cast< ::svaf::OutputParameter*>(&::svaf::OutputParameter::default_instance());
  triang_param_ = const_cast< ::svaf::TriangularParameter*>(&::svaf::TriangularParameter::default_instance());
  mxmul_param_ = const_cast< ::svaf::MatrixMulParameter*>(&::svaf::MatrixMulParameter::default_instance());
  posest_param_ = const_cast< ::svaf::PositionEstimateParameter*>(&::svaf::PositionEstimateParameter::default_instance());
  centerpoint_param_ = const_cast< ::svaf::CenterPointParameter*>(&::svaf::CenterPointParameter::default_instance());
  sacia_param_ = const_cast< ::svaf::SACIAEstimateParameter*>(&::svaf::SACIAEstimateParameter::default_instance());
  iaicp_param_ = const_cast< ::svaf::IAICPEstimateParameter*>(&::svaf::IAICPEstimateParameter::default_instance());
  iandt_param_ = const_cast< ::svaf::IANDTEstimateParameter*>(&::svaf::IANDTEstimateParameter::default_instance());
}

LayerParameter::LayerParameter(const LayerParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svaf.LayerParameter)
}

void LayerParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bottom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  top_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  show_ = false;
  save_ = false;
  logt_ = false;
  logi_ = false;
  type_ = 0;
  imageop_param_ = NULL;
  supix_param_ = NULL;
  resize_param_ = NULL;
  crop_param_ = NULL;
  stereoop_param_ = NULL;
  rectify_param_ = NULL;
  data_param_ = NULL;
  imagedata_param_ = NULL;
  imagepair_param_ = NULL;
  videodata_param_ = NULL;
  videopair_param_ = NULL;
  cameradata_param_ = NULL;
  camerapair_param_ = NULL;
  dspcameradata_param_ = NULL;
  dspcamerapair_param_ = NULL;
  kinectdata_param_ = NULL;
  folder_param_ = NULL;
  pairfolder_param_ = NULL;
  recognize_param_ = NULL;
  adaboost_param_ = NULL;
  track_param_ = NULL;
  miltrack_param_ = NULL;
  bittrack_param_ = NULL;
  featurepoint_param_ = NULL;
  siftpoint_param_ = NULL;
  surfpoint_param_ = NULL;
  starpoint_param_ = NULL;
  briskpoint_param_ = NULL;
  fastpoint_param_ = NULL;
  orbpoint_param_ = NULL;
  kazepoint_param_ = NULL;
  harrispoint_param_ = NULL;
  cvpoint_param_ = NULL;
  featuredescriptor_param_ = NULL;
  siftdescriptor_param_ = NULL;
  surfdescriptor_param_ = NULL;
  stardescriptor_param_ = NULL;
  briefdescriptor_param_ = NULL;
  briskdescriptor_param_ = NULL;
  fastdescriptor_param_ = NULL;
  orbdescriptor_param_ = NULL;
  kazedescriptor_param_ = NULL;
  cvdescriptor_param_ = NULL;
  vectormatch_param_ = NULL;
  kdtreematch_param_ = NULL;
  eularmatch_param_ = NULL;
  ransac_param_ = NULL;
  bfmatch_param_ = NULL;
  flannmatch_param_ = NULL;
  ecmatch_param_ = NULL;
  cvmatch_param_ = NULL;
  stereomatch_param_ = NULL;
  sgm_param_ = NULL;
  eadp_param_ = NULL;
  output_param_ = NULL;
  triang_param_ = NULL;
  mxmul_param_ = NULL;
  posest_param_ = NULL;
  centerpoint_param_ = NULL;
  sacia_param_ = NULL;
  iaicp_param_ = NULL;
  iandt_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayerParameter::~LayerParameter() {
  // @@protoc_insertion_point(destructor:svaf.LayerParameter)
  SharedDtor();
}

void LayerParameter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (bottom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bottom_;
  }
  if (top_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete top_;
  }
  if (this != default_instance_) {
    delete imageop_param_;
    delete supix_param_;
    delete resize_param_;
    delete crop_param_;
    delete stereoop_param_;
    delete rectify_param_;
    delete data_param_;
    delete imagedata_param_;
    delete imagepair_param_;
    delete videodata_param_;
    delete videopair_param_;
    delete cameradata_param_;
    delete camerapair_param_;
    delete dspcameradata_param_;
    delete dspcamerapair_param_;
    delete kinectdata_param_;
    delete folder_param_;
    delete pairfolder_param_;
    delete recognize_param_;
    delete adaboost_param_;
    delete track_param_;
    delete miltrack_param_;
    delete bittrack_param_;
    delete featurepoint_param_;
    delete siftpoint_param_;
    delete surfpoint_param_;
    delete starpoint_param_;
    delete briskpoint_param_;
    delete fastpoint_param_;
    delete orbpoint_param_;
    delete kazepoint_param_;
    delete harrispoint_param_;
    delete cvpoint_param_;
    delete featuredescriptor_param_;
    delete siftdescriptor_param_;
    delete surfdescriptor_param_;
    delete stardescriptor_param_;
    delete briefdescriptor_param_;
    delete briskdescriptor_param_;
    delete fastdescriptor_param_;
    delete orbdescriptor_param_;
    delete kazedescriptor_param_;
    delete cvdescriptor_param_;
    delete vectormatch_param_;
    delete kdtreematch_param_;
    delete eularmatch_param_;
    delete ransac_param_;
    delete bfmatch_param_;
    delete flannmatch_param_;
    delete ecmatch_param_;
    delete cvmatch_param_;
    delete stereomatch_param_;
    delete sgm_param_;
    delete eadp_param_;
    delete output_param_;
    delete triang_param_;
    delete mxmul_param_;
    delete posest_param_;
    delete centerpoint_param_;
    delete sacia_param_;
    delete iaicp_param_;
    delete iandt_param_;
  }
}

void LayerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayerParameter_descriptor_;
}

const LayerParameter& LayerParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_svaf_2eproto();
  return *default_instance_;
}

LayerParameter* LayerParameter::default_instance_ = NULL;

LayerParameter* LayerParameter::New() const {
  return new LayerParameter;
}

void LayerParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LayerParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(show_, type_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_bottom()) {
      if (bottom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bottom_->clear();
      }
    }
    if (has_top()) {
      if (top_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        top_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_imageop_param()) {
      if (imageop_param_ != NULL) imageop_param_->::svaf::ImageOperationParameter::Clear();
    }
    if (has_supix_param()) {
      if (supix_param_ != NULL) supix_param_->::svaf::SuperPixelSegmentParameter::Clear();
    }
    if (has_resize_param()) {
      if (resize_param_ != NULL) resize_param_->::svaf::ImageResizeParameter::Clear();
    }
    if (has_crop_param()) {
      if (crop_param_ != NULL) crop_param_->::svaf::ImageCropParameter::Clear();
    }
    if (has_stereoop_param()) {
      if (stereoop_param_ != NULL) stereoop_param_->::svaf::StereoOperationParameter::Clear();
    }
    if (has_rectify_param()) {
      if (rectify_param_ != NULL) rectify_param_->::svaf::StereoRectifyParameter::Clear();
    }
    if (has_data_param()) {
      if (data_param_ != NULL) data_param_->::svaf::DataParameter::Clear();
    }
    if (has_imagedata_param()) {
      if (imagedata_param_ != NULL) imagedata_param_->::svaf::ImageDataParameter::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    if (has_imagepair_param()) {
      if (imagepair_param_ != NULL) imagepair_param_->::svaf::ImagePairParameter::Clear();
    }
    if (has_videodata_param()) {
      if (videodata_param_ != NULL) videodata_param_->::svaf::VideoDataParameter::Clear();
    }
    if (has_videopair_param()) {
      if (videopair_param_ != NULL) videopair_param_->::svaf::VideoPairParameter::Clear();
    }
    if (has_cameradata_param()) {
      if (cameradata_param_ != NULL) cameradata_param_->::svaf::CameraDataParameter::Clear();
    }
    if (has_camerapair_param()) {
      if (camerapair_param_ != NULL) camerapair_param_->::svaf::CameraPairParameter::Clear();
    }
    if (has_dspcameradata_param()) {
      if (dspcameradata_param_ != NULL) dspcameradata_param_->::svaf::DSPCameraDataParameter::Clear();
    }
    if (has_dspcamerapair_param()) {
      if (dspcamerapair_param_ != NULL) dspcamerapair_param_->::svaf::DSPCameraPairParameter::Clear();
    }
    if (has_kinectdata_param()) {
      if (kinectdata_param_ != NULL) kinectdata_param_->::svaf::KinectDataParameter::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    if (has_folder_param()) {
      if (folder_param_ != NULL) folder_param_->::svaf::ImageFolderParameter::Clear();
    }
    if (has_pairfolder_param()) {
      if (pairfolder_param_ != NULL) pairfolder_param_->::svaf::ImagePairFolderParameter::Clear();
    }
    if (has_recognize_param()) {
      if (recognize_param_ != NULL) recognize_param_->::svaf::RecognizeParameter::Clear();
    }
    if (has_adaboost_param()) {
      if (adaboost_param_ != NULL) adaboost_param_->::svaf::AdaboostParameter::Clear();
    }
    if (has_track_param()) {
      if (track_param_ != NULL) track_param_->::svaf::TrackParameter::Clear();
    }
    if (has_miltrack_param()) {
      if (miltrack_param_ != NULL) miltrack_param_->::svaf::MilTrackParameter::Clear();
    }
    if (has_bittrack_param()) {
      if (bittrack_param_ != NULL) bittrack_param_->::svaf::MilTrackParameter::Clear();
    }
    if (has_featurepoint_param()) {
      if (featurepoint_param_ != NULL) featurepoint_param_->::svaf::FeaturePointParameter::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 255) {
    if (has_siftpoint_param()) {
      if (siftpoint_param_ != NULL) siftpoint_param_->::svaf::SIFTPointParameter::Clear();
    }
    if (has_surfpoint_param()) {
      if (surfpoint_param_ != NULL) surfpoint_param_->::svaf::SURFPointParameter::Clear();
    }
    if (has_starpoint_param()) {
      if (starpoint_param_ != NULL) starpoint_param_->::svaf::STARPointParameter::Clear();
    }
    if (has_briskpoint_param()) {
      if (briskpoint_param_ != NULL) briskpoint_param_->::svaf::BRISKPointParameter::Clear();
    }
    if (has_fastpoint_param()) {
      if (fastpoint_param_ != NULL) fastpoint_param_->::svaf::FASTPointParameter::Clear();
    }
    if (has_orbpoint_param()) {
      if (orbpoint_param_ != NULL) orbpoint_param_->::svaf::ORBPointParameter::Clear();
    }
    if (has_kazepoint_param()) {
      if (kazepoint_param_ != NULL) kazepoint_param_->::svaf::KAZEPointParameter::Clear();
    }
    if (has_harrispoint_param()) {
      if (harrispoint_param_ != NULL) harrispoint_param_->::svaf::HarrisPointParameter::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 65280) {
    if (has_cvpoint_param()) {
      if (cvpoint_param_ != NULL) cvpoint_param_->::svaf::CVPointParameter::Clear();
    }
    if (has_featuredescriptor_param()) {
      if (featuredescriptor_param_ != NULL) featuredescriptor_param_->::svaf::FeatureDescriptorParameter::Clear();
    }
    if (has_siftdescriptor_param()) {
      if (siftdescriptor_param_ != NULL) siftdescriptor_param_->::svaf::SIFTDescriptorParameter::Clear();
    }
    if (has_surfdescriptor_param()) {
      if (surfdescriptor_param_ != NULL) surfdescriptor_param_->::svaf::SURFDescriptorParameter::Clear();
    }
    if (has_stardescriptor_param()) {
      if (stardescriptor_param_ != NULL) stardescriptor_param_->::svaf::STARDescriptorParameter::Clear();
    }
    if (has_briefdescriptor_param()) {
      if (briefdescriptor_param_ != NULL) briefdescriptor_param_->::svaf::BRIEFDescriptorParameter::Clear();
    }
    if (has_briskdescriptor_param()) {
      if (briskdescriptor_param_ != NULL) briskdescriptor_param_->::svaf::BRISKDescriptorParameter::Clear();
    }
    if (has_fastdescriptor_param()) {
      if (fastdescriptor_param_ != NULL) fastdescriptor_param_->::svaf::FASTDescriptorParameter::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 16711680) {
    if (has_orbdescriptor_param()) {
      if (orbdescriptor_param_ != NULL) orbdescriptor_param_->::svaf::ORBDescriptorParameter::Clear();
    }
    if (has_kazedescriptor_param()) {
      if (kazedescriptor_param_ != NULL) kazedescriptor_param_->::svaf::KAZEDescriptorParameter::Clear();
    }
    if (has_cvdescriptor_param()) {
      if (cvdescriptor_param_ != NULL) cvdescriptor_param_->::svaf::CVDescriptorParameter::Clear();
    }
    if (has_vectormatch_param()) {
      if (vectormatch_param_ != NULL) vectormatch_param_->::svaf::VectorMatchParameter::Clear();
    }
    if (has_kdtreematch_param()) {
      if (kdtreematch_param_ != NULL) kdtreematch_param_->::svaf::KDTreeMatchParameter::Clear();
    }
    if (has_eularmatch_param()) {
      if (eularmatch_param_ != NULL) eularmatch_param_->::svaf::EularMatchParameter::Clear();
    }
    if (has_ransac_param()) {
      if (ransac_param_ != NULL) ransac_param_->::svaf::RansacParameter::Clear();
    }
    if (has_bfmatch_param()) {
      if (bfmatch_param_ != NULL) bfmatch_param_->::svaf::BruteForceMatchParameter::Clear();
    }
  }
  if (_has_bits_[56 / 32] & 4278190080) {
    if (has_flannmatch_param()) {
      if (flannmatch_param_ != NULL) flannmatch_param_->::svaf::FLANNMatchParameter::Clear();
    }
    if (has_ecmatch_param()) {
      if (ecmatch_param_ != NULL) ecmatch_param_->::svaf::ECMatchParameter::Clear();
    }
    if (has_cvmatch_param()) {
      if (cvmatch_param_ != NULL) cvmatch_param_->::svaf::CVMatchParameter::Clear();
    }
    if (has_stereomatch_param()) {
      if (stereomatch_param_ != NULL) stereomatch_param_->::svaf::StereoMatchParameter::Clear();
    }
    if (has_sgm_param()) {
      if (sgm_param_ != NULL) sgm_param_->::svaf::SGMMatchParameter::Clear();
    }
    if (has_eadp_param()) {
      if (eadp_param_ != NULL) eadp_param_->::svaf::EADPMatchParameter::Clear();
    }
    if (has_output_param()) {
      if (output_param_ != NULL) output_param_->::svaf::OutputParameter::Clear();
    }
    if (has_triang_param()) {
      if (triang_param_ != NULL) triang_param_->::svaf::TriangularParameter::Clear();
    }
  }
  if (_has_bits_[64 / 32] & 63) {
    if (has_mxmul_param()) {
      if (mxmul_param_ != NULL) mxmul_param_->::svaf::MatrixMulParameter::Clear();
    }
    if (has_posest_param()) {
      if (posest_param_ != NULL) posest_param_->::svaf::PositionEstimateParameter::Clear();
    }
    if (has_centerpoint_param()) {
      if (centerpoint_param_ != NULL) centerpoint_param_->::svaf::CenterPointParameter::Clear();
    }
    if (has_sacia_param()) {
      if (sacia_param_ != NULL) sacia_param_->::svaf::SACIAEstimateParameter::Clear();
    }
    if (has_iaicp_param()) {
      if (iaicp_param_ != NULL) iaicp_param_->::svaf::IAICPEstimateParameter::Clear();
    }
    if (has_iandt_param()) {
      if (iandt_param_ != NULL) iandt_param_->::svaf::IANDTEstimateParameter::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LayerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svaf.LayerParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bottom;
        break;
      }

      // optional string bottom = 2;
      case 2: {
        if (tag == 18) {
         parse_bottom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bottom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bottom().data(), this->bottom().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bottom");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_top;
        break;
      }

      // optional string top = 3;
      case 3: {
        if (tag == 26) {
         parse_top:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_top()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->top().data(), this->top().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "top");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_show;
        break;
      }

      // optional bool show = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_)));
          set_has_show();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_save;
        break;
      }

      // optional bool save = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_save:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &save_)));
          set_has_save();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_logt;
        break;
      }

      // optional bool logt = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_logt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &logt_)));
          set_has_logt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_logi;
        break;
      }

      // optional bool logi = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_logi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &logi_)));
          set_has_logi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_type;
        break;
      }

      // optional .svaf.LayerParameter.LayerType type = 10;
      case 10: {
        if (tag == 80) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::svaf::LayerParameter_LayerType_IsValid(value)) {
            set_type(static_cast< ::svaf::LayerParameter_LayerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_data_param;
        break;
      }

      // optional .svaf.DataParameter data_param = 100;
      case 100: {
        if (tag == 802) {
         parse_data_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_imagedata_param;
        break;
      }

      // optional .svaf.ImageDataParameter imagedata_param = 101;
      case 101: {
        if (tag == 810) {
         parse_imagedata_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagedata_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(818)) goto parse_imagepair_param;
        break;
      }

      // optional .svaf.ImagePairParameter imagepair_param = 102;
      case 102: {
        if (tag == 818) {
         parse_imagepair_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagepair_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(826)) goto parse_videodata_param;
        break;
      }

      // optional .svaf.VideoDataParameter videodata_param = 103;
      case 103: {
        if (tag == 826) {
         parse_videodata_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_videodata_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(834)) goto parse_videopair_param;
        break;
      }

      // optional .svaf.VideoPairParameter videopair_param = 104;
      case 104: {
        if (tag == 834) {
         parse_videopair_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_videopair_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(842)) goto parse_cameradata_param;
        break;
      }

      // optional .svaf.CameraDataParameter cameradata_param = 105;
      case 105: {
        if (tag == 842) {
         parse_cameradata_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cameradata_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(850)) goto parse_camerapair_param;
        break;
      }

      // optional .svaf.CameraPairParameter camerapair_param = 106;
      case 106: {
        if (tag == 850) {
         parse_camerapair_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camerapair_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(858)) goto parse_dspcameradata_param;
        break;
      }

      // optional .svaf.DSPCameraDataParameter dspcameradata_param = 107;
      case 107: {
        if (tag == 858) {
         parse_dspcameradata_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dspcameradata_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(866)) goto parse_dspcamerapair_param;
        break;
      }

      // optional .svaf.DSPCameraPairParameter dspcamerapair_param = 108;
      case 108: {
        if (tag == 866) {
         parse_dspcamerapair_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dspcamerapair_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(874)) goto parse_kinectdata_param;
        break;
      }

      // optional .svaf.KinectDataParameter kinectdata_param = 109;
      case 109: {
        if (tag == 874) {
         parse_kinectdata_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kinectdata_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(890)) goto parse_folder_param;
        break;
      }

      // optional .svaf.ImageFolderParameter folder_param = 111;
      case 111: {
        if (tag == 890) {
         parse_folder_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_folder_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(898)) goto parse_pairfolder_param;
        break;
      }

      // optional .svaf.ImagePairFolderParameter pairfolder_param = 112;
      case 112: {
        if (tag == 898) {
         parse_pairfolder_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pairfolder_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(962)) goto parse_recognize_param;
        break;
      }

      // optional .svaf.RecognizeParameter recognize_param = 120;
      case 120: {
        if (tag == 962) {
         parse_recognize_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recognize_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(970)) goto parse_adaboost_param;
        break;
      }

      // optional .svaf.AdaboostParameter adaboost_param = 121;
      case 121: {
        if (tag == 970) {
         parse_adaboost_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adaboost_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1042)) goto parse_track_param;
        break;
      }

      // optional .svaf.TrackParameter track_param = 130;
      case 130: {
        if (tag == 1042) {
         parse_track_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_track_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1050)) goto parse_miltrack_param;
        break;
      }

      // optional .svaf.MilTrackParameter miltrack_param = 131;
      case 131: {
        if (tag == 1050) {
         parse_miltrack_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_miltrack_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1058)) goto parse_bittrack_param;
        break;
      }

      // optional .svaf.MilTrackParameter bittrack_param = 132;
      case 132: {
        if (tag == 1058) {
         parse_bittrack_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bittrack_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1122)) goto parse_featurepoint_param;
        break;
      }

      // optional .svaf.FeaturePointParameter featurepoint_param = 140;
      case 140: {
        if (tag == 1122) {
         parse_featurepoint_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_featurepoint_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1130)) goto parse_siftpoint_param;
        break;
      }

      // optional .svaf.SIFTPointParameter siftpoint_param = 141;
      case 141: {
        if (tag == 1130) {
         parse_siftpoint_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_siftpoint_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1138)) goto parse_surfpoint_param;
        break;
      }

      // optional .svaf.SURFPointParameter surfpoint_param = 142;
      case 142: {
        if (tag == 1138) {
         parse_surfpoint_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_surfpoint_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1146)) goto parse_starpoint_param;
        break;
      }

      // optional .svaf.STARPointParameter starpoint_param = 143;
      case 143: {
        if (tag == 1146) {
         parse_starpoint_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_starpoint_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1154)) goto parse_briskpoint_param;
        break;
      }

      // optional .svaf.BRISKPointParameter briskpoint_param = 144;
      case 144: {
        if (tag == 1154) {
         parse_briskpoint_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_briskpoint_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1162)) goto parse_fastpoint_param;
        break;
      }

      // optional .svaf.FASTPointParameter fastpoint_param = 145;
      case 145: {
        if (tag == 1162) {
         parse_fastpoint_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fastpoint_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1170)) goto parse_orbpoint_param;
        break;
      }

      // optional .svaf.ORBPointParameter orbpoint_param = 146;
      case 146: {
        if (tag == 1170) {
         parse_orbpoint_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orbpoint_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1178)) goto parse_kazepoint_param;
        break;
      }

      // optional .svaf.KAZEPointParameter kazepoint_param = 147;
      case 147: {
        if (tag == 1178) {
         parse_kazepoint_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kazepoint_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1186)) goto parse_harrispoint_param;
        break;
      }

      // optional .svaf.HarrisPointParameter harrispoint_param = 148;
      case 148: {
        if (tag == 1186) {
         parse_harrispoint_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_harrispoint_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1194)) goto parse_cvpoint_param;
        break;
      }

      // optional .svaf.CVPointParameter cvpoint_param = 149;
      case 149: {
        if (tag == 1194) {
         parse_cvpoint_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvpoint_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1202)) goto parse_featuredescriptor_param;
        break;
      }

      // optional .svaf.FeatureDescriptorParameter featuredescriptor_param = 150;
      case 150: {
        if (tag == 1202) {
         parse_featuredescriptor_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_featuredescriptor_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1210)) goto parse_siftdescriptor_param;
        break;
      }

      // optional .svaf.SIFTDescriptorParameter siftdescriptor_param = 151;
      case 151: {
        if (tag == 1210) {
         parse_siftdescriptor_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_siftdescriptor_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1218)) goto parse_surfdescriptor_param;
        break;
      }

      // optional .svaf.SURFDescriptorParameter surfdescriptor_param = 152;
      case 152: {
        if (tag == 1218) {
         parse_surfdescriptor_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_surfdescriptor_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1226)) goto parse_stardescriptor_param;
        break;
      }

      // optional .svaf.STARDescriptorParameter stardescriptor_param = 153;
      case 153: {
        if (tag == 1226) {
         parse_stardescriptor_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stardescriptor_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1234)) goto parse_briefdescriptor_param;
        break;
      }

      // optional .svaf.BRIEFDescriptorParameter briefdescriptor_param = 154;
      case 154: {
        if (tag == 1234) {
         parse_briefdescriptor_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_briefdescriptor_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1242)) goto parse_briskdescriptor_param;
        break;
      }

      // optional .svaf.BRISKDescriptorParameter briskdescriptor_param = 155;
      case 155: {
        if (tag == 1242) {
         parse_briskdescriptor_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_briskdescriptor_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1250)) goto parse_fastdescriptor_param;
        break;
      }

      // optional .svaf.FASTDescriptorParameter fastdescriptor_param = 156;
      case 156: {
        if (tag == 1250) {
         parse_fastdescriptor_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fastdescriptor_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1258)) goto parse_orbdescriptor_param;
        break;
      }

      // optional .svaf.ORBDescriptorParameter orbdescriptor_param = 157;
      case 157: {
        if (tag == 1258) {
         parse_orbdescriptor_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orbdescriptor_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1266)) goto parse_kazedescriptor_param;
        break;
      }

      // optional .svaf.KAZEDescriptorParameter kazedescriptor_param = 158;
      case 158: {
        if (tag == 1266) {
         parse_kazedescriptor_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kazedescriptor_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1274)) goto parse_cvdescriptor_param;
        break;
      }

      // optional .svaf.CVDescriptorParameter cvdescriptor_param = 159;
      case 159: {
        if (tag == 1274) {
         parse_cvdescriptor_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvdescriptor_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1282)) goto parse_vectormatch_param;
        break;
      }

      // optional .svaf.VectorMatchParameter vectormatch_param = 160;
      case 160: {
        if (tag == 1282) {
         parse_vectormatch_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vectormatch_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1290)) goto parse_kdtreematch_param;
        break;
      }

      // optional .svaf.KDTreeMatchParameter kdtreematch_param = 161;
      case 161: {
        if (tag == 1290) {
         parse_kdtreematch_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kdtreematch_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1298)) goto parse_eularmatch_param;
        break;
      }

      // optional .svaf.EularMatchParameter eularmatch_param = 162;
      case 162: {
        if (tag == 1298) {
         parse_eularmatch_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eularmatch_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1306)) goto parse_ransac_param;
        break;
      }

      // optional .svaf.RansacParameter ransac_param = 163;
      case 163: {
        if (tag == 1306) {
         parse_ransac_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ransac_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1314)) goto parse_bfmatch_param;
        break;
      }

      // optional .svaf.BruteForceMatchParameter bfmatch_param = 164;
      case 164: {
        if (tag == 1314) {
         parse_bfmatch_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bfmatch_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1322)) goto parse_flannmatch_param;
        break;
      }

      // optional .svaf.FLANNMatchParameter flannmatch_param = 165;
      case 165: {
        if (tag == 1322) {
         parse_flannmatch_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flannmatch_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1346)) goto parse_ecmatch_param;
        break;
      }

      // optional .svaf.ECMatchParameter ecmatch_param = 168;
      case 168: {
        if (tag == 1346) {
         parse_ecmatch_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ecmatch_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1354)) goto parse_cvmatch_param;
        break;
      }

      // optional .svaf.CVMatchParameter cvmatch_param = 169;
      case 169: {
        if (tag == 1354) {
         parse_cvmatch_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvmatch_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1362)) goto parse_stereomatch_param;
        break;
      }

      // optional .svaf.StereoMatchParameter stereomatch_param = 170;
      case 170: {
        if (tag == 1362) {
         parse_stereomatch_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stereomatch_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1370)) goto parse_sgm_param;
        break;
      }

      // optional .svaf.SGMMatchParameter sgm_param = 171;
      case 171: {
        if (tag == 1370) {
         parse_sgm_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sgm_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1378)) goto parse_eadp_param;
        break;
      }

      // optional .svaf.EADPMatchParameter eadp_param = 172;
      case 172: {
        if (tag == 1378) {
         parse_eadp_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eadp_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1442)) goto parse_output_param;
        break;
      }

      // optional .svaf.OutputParameter output_param = 180;
      case 180: {
        if (tag == 1442) {
         parse_output_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1450)) goto parse_triang_param;
        break;
      }

      // optional .svaf.TriangularParameter triang_param = 181;
      case 181: {
        if (tag == 1450) {
         parse_triang_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_triang_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1458)) goto parse_mxmul_param;
        break;
      }

      // optional .svaf.MatrixMulParameter mxmul_param = 182;
      case 182: {
        if (tag == 1458) {
         parse_mxmul_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mxmul_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1522)) goto parse_posest_param;
        break;
      }

      // optional .svaf.PositionEstimateParameter posest_param = 190;
      case 190: {
        if (tag == 1522) {
         parse_posest_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_posest_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1530)) goto parse_centerpoint_param;
        break;
      }

      // optional .svaf.CenterPointParameter centerpoint_param = 191;
      case 191: {
        if (tag == 1530) {
         parse_centerpoint_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_centerpoint_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1554)) goto parse_sacia_param;
        break;
      }

      // optional .svaf.SACIAEstimateParameter sacia_param = 194;
      case 194: {
        if (tag == 1554) {
         parse_sacia_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sacia_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1562)) goto parse_iaicp_param;
        break;
      }

      // optional .svaf.IAICPEstimateParameter iaicp_param = 195;
      case 195: {
        if (tag == 1562) {
         parse_iaicp_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iaicp_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1570)) goto parse_iandt_param;
        break;
      }

      // optional .svaf.IANDTEstimateParameter iandt_param = 196;
      case 196: {
        if (tag == 1570) {
         parse_iandt_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iandt_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1602)) goto parse_imageop_param;
        break;
      }

      // optional .svaf.ImageOperationParameter imageop_param = 200;
      case 200: {
        if (tag == 1602) {
         parse_imageop_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imageop_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1610)) goto parse_supix_param;
        break;
      }

      // optional .svaf.SuperPixelSegmentParameter supix_param = 201;
      case 201: {
        if (tag == 1610) {
         parse_supix_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_supix_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1618)) goto parse_resize_param;
        break;
      }

      // optional .svaf.ImageResizeParameter resize_param = 202;
      case 202: {
        if (tag == 1618) {
         parse_resize_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resize_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1626)) goto parse_crop_param;
        break;
      }

      // optional .svaf.ImageCropParameter crop_param = 203;
      case 203: {
        if (tag == 1626) {
         parse_crop_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crop_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1922)) goto parse_stereoop_param;
        break;
      }

      // optional .svaf.StereoOperationParameter stereoop_param = 240;
      case 240: {
        if (tag == 1922) {
         parse_stereoop_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stereoop_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1930)) goto parse_rectify_param;
        break;
      }

      // optional .svaf.StereoRectifyParameter rectify_param = 241;
      case 241: {
        if (tag == 1930) {
         parse_rectify_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rectify_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svaf.LayerParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svaf.LayerParameter)
  return false;
#undef DO_
}

void LayerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svaf.LayerParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string bottom = 2;
  if (has_bottom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom().data(), this->bottom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bottom");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bottom(), output);
  }

  // optional string top = 3;
  if (has_top()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top().data(), this->top().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "top");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->top(), output);
  }

  // optional bool show = 4 [default = false];
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->show(), output);
  }

  // optional bool save = 5 [default = false];
  if (has_save()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->save(), output);
  }

  // optional bool logt = 6 [default = false];
  if (has_logt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->logt(), output);
  }

  // optional bool logi = 7 [default = false];
  if (has_logi()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->logi(), output);
  }

  // optional .svaf.LayerParameter.LayerType type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // optional .svaf.DataParameter data_param = 100;
  if (has_data_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->data_param(), output);
  }

  // optional .svaf.ImageDataParameter imagedata_param = 101;
  if (has_imagedata_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->imagedata_param(), output);
  }

  // optional .svaf.ImagePairParameter imagepair_param = 102;
  if (has_imagepair_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->imagepair_param(), output);
  }

  // optional .svaf.VideoDataParameter videodata_param = 103;
  if (has_videodata_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->videodata_param(), output);
  }

  // optional .svaf.VideoPairParameter videopair_param = 104;
  if (has_videopair_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->videopair_param(), output);
  }

  // optional .svaf.CameraDataParameter cameradata_param = 105;
  if (has_cameradata_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, this->cameradata_param(), output);
  }

  // optional .svaf.CameraPairParameter camerapair_param = 106;
  if (has_camerapair_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, this->camerapair_param(), output);
  }

  // optional .svaf.DSPCameraDataParameter dspcameradata_param = 107;
  if (has_dspcameradata_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, this->dspcameradata_param(), output);
  }

  // optional .svaf.DSPCameraPairParameter dspcamerapair_param = 108;
  if (has_dspcamerapair_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, this->dspcamerapair_param(), output);
  }

  // optional .svaf.KinectDataParameter kinectdata_param = 109;
  if (has_kinectdata_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      109, this->kinectdata_param(), output);
  }

  // optional .svaf.ImageFolderParameter folder_param = 111;
  if (has_folder_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      111, this->folder_param(), output);
  }

  // optional .svaf.ImagePairFolderParameter pairfolder_param = 112;
  if (has_pairfolder_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      112, this->pairfolder_param(), output);
  }

  // optional .svaf.RecognizeParameter recognize_param = 120;
  if (has_recognize_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      120, this->recognize_param(), output);
  }

  // optional .svaf.AdaboostParameter adaboost_param = 121;
  if (has_adaboost_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      121, this->adaboost_param(), output);
  }

  // optional .svaf.TrackParameter track_param = 130;
  if (has_track_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      130, this->track_param(), output);
  }

  // optional .svaf.MilTrackParameter miltrack_param = 131;
  if (has_miltrack_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      131, this->miltrack_param(), output);
  }

  // optional .svaf.MilTrackParameter bittrack_param = 132;
  if (has_bittrack_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      132, this->bittrack_param(), output);
  }

  // optional .svaf.FeaturePointParameter featurepoint_param = 140;
  if (has_featurepoint_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      140, this->featurepoint_param(), output);
  }

  // optional .svaf.SIFTPointParameter siftpoint_param = 141;
  if (has_siftpoint_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      141, this->siftpoint_param(), output);
  }

  // optional .svaf.SURFPointParameter surfpoint_param = 142;
  if (has_surfpoint_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      142, this->surfpoint_param(), output);
  }

  // optional .svaf.STARPointParameter starpoint_param = 143;
  if (has_starpoint_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      143, this->starpoint_param(), output);
  }

  // optional .svaf.BRISKPointParameter briskpoint_param = 144;
  if (has_briskpoint_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      144, this->briskpoint_param(), output);
  }

  // optional .svaf.FASTPointParameter fastpoint_param = 145;
  if (has_fastpoint_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      145, this->fastpoint_param(), output);
  }

  // optional .svaf.ORBPointParameter orbpoint_param = 146;
  if (has_orbpoint_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      146, this->orbpoint_param(), output);
  }

  // optional .svaf.KAZEPointParameter kazepoint_param = 147;
  if (has_kazepoint_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      147, this->kazepoint_param(), output);
  }

  // optional .svaf.HarrisPointParameter harrispoint_param = 148;
  if (has_harrispoint_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      148, this->harrispoint_param(), output);
  }

  // optional .svaf.CVPointParameter cvpoint_param = 149;
  if (has_cvpoint_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      149, this->cvpoint_param(), output);
  }

  // optional .svaf.FeatureDescriptorParameter featuredescriptor_param = 150;
  if (has_featuredescriptor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      150, this->featuredescriptor_param(), output);
  }

  // optional .svaf.SIFTDescriptorParameter siftdescriptor_param = 151;
  if (has_siftdescriptor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      151, this->siftdescriptor_param(), output);
  }

  // optional .svaf.SURFDescriptorParameter surfdescriptor_param = 152;
  if (has_surfdescriptor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      152, this->surfdescriptor_param(), output);
  }

  // optional .svaf.STARDescriptorParameter stardescriptor_param = 153;
  if (has_stardescriptor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      153, this->stardescriptor_param(), output);
  }

  // optional .svaf.BRIEFDescriptorParameter briefdescriptor_param = 154;
  if (has_briefdescriptor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      154, this->briefdescriptor_param(), output);
  }

  // optional .svaf.BRISKDescriptorParameter briskdescriptor_param = 155;
  if (has_briskdescriptor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      155, this->briskdescriptor_param(), output);
  }

  // optional .svaf.FASTDescriptorParameter fastdescriptor_param = 156;
  if (has_fastdescriptor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      156, this->fastdescriptor_param(), output);
  }

  // optional .svaf.ORBDescriptorParameter orbdescriptor_param = 157;
  if (has_orbdescriptor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      157, this->orbdescriptor_param(), output);
  }

  // optional .svaf.KAZEDescriptorParameter kazedescriptor_param = 158;
  if (has_kazedescriptor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      158, this->kazedescriptor_param(), output);
  }

  // optional .svaf.CVDescriptorParameter cvdescriptor_param = 159;
  if (has_cvdescriptor_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      159, this->cvdescriptor_param(), output);
  }

  // optional .svaf.VectorMatchParameter vectormatch_param = 160;
  if (has_vectormatch_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      160, this->vectormatch_param(), output);
  }

  // optional .svaf.KDTreeMatchParameter kdtreematch_param = 161;
  if (has_kdtreematch_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      161, this->kdtreematch_param(), output);
  }

  // optional .svaf.EularMatchParameter eularmatch_param = 162;
  if (has_eularmatch_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      162, this->eularmatch_param(), output);
  }

  // optional .svaf.RansacParameter ransac_param = 163;
  if (has_ransac_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      163, this->ransac_param(), output);
  }

  // optional .svaf.BruteForceMatchParameter bfmatch_param = 164;
  if (has_bfmatch_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      164, this->bfmatch_param(), output);
  }

  // optional .svaf.FLANNMatchParameter flannmatch_param = 165;
  if (has_flannmatch_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      165, this->flannmatch_param(), output);
  }

  // optional .svaf.ECMatchParameter ecmatch_param = 168;
  if (has_ecmatch_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      168, this->ecmatch_param(), output);
  }

  // optional .svaf.CVMatchParameter cvmatch_param = 169;
  if (has_cvmatch_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      169, this->cvmatch_param(), output);
  }

  // optional .svaf.StereoMatchParameter stereomatch_param = 170;
  if (has_stereomatch_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      170, this->stereomatch_param(), output);
  }

  // optional .svaf.SGMMatchParameter sgm_param = 171;
  if (has_sgm_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      171, this->sgm_param(), output);
  }

  // optional .svaf.EADPMatchParameter eadp_param = 172;
  if (has_eadp_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      172, this->eadp_param(), output);
  }

  // optional .svaf.OutputParameter output_param = 180;
  if (has_output_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      180, this->output_param(), output);
  }

  // optional .svaf.TriangularParameter triang_param = 181;
  if (has_triang_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      181, this->triang_param(), output);
  }

  // optional .svaf.MatrixMulParameter mxmul_param = 182;
  if (has_mxmul_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      182, this->mxmul_param(), output);
  }

  // optional .svaf.PositionEstimateParameter posest_param = 190;
  if (has_posest_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      190, this->posest_param(), output);
  }

  // optional .svaf.CenterPointParameter centerpoint_param = 191;
  if (has_centerpoint_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      191, this->centerpoint_param(), output);
  }

  // optional .svaf.SACIAEstimateParameter sacia_param = 194;
  if (has_sacia_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      194, this->sacia_param(), output);
  }

  // optional .svaf.IAICPEstimateParameter iaicp_param = 195;
  if (has_iaicp_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      195, this->iaicp_param(), output);
  }

  // optional .svaf.IANDTEstimateParameter iandt_param = 196;
  if (has_iandt_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      196, this->iandt_param(), output);
  }

  // optional .svaf.ImageOperationParameter imageop_param = 200;
  if (has_imageop_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      200, this->imageop_param(), output);
  }

  // optional .svaf.SuperPixelSegmentParameter supix_param = 201;
  if (has_supix_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      201, this->supix_param(), output);
  }

  // optional .svaf.ImageResizeParameter resize_param = 202;
  if (has_resize_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      202, this->resize_param(), output);
  }

  // optional .svaf.ImageCropParameter crop_param = 203;
  if (has_crop_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      203, this->crop_param(), output);
  }

  // optional .svaf.StereoOperationParameter stereoop_param = 240;
  if (has_stereoop_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      240, this->stereoop_param(), output);
  }

  // optional .svaf.StereoRectifyParameter rectify_param = 241;
  if (has_rectify_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      241, this->rectify_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svaf.LayerParameter)
}

::google::protobuf::uint8* LayerParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svaf.LayerParameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string bottom = 2;
  if (has_bottom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bottom().data(), this->bottom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bottom");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bottom(), target);
  }

  // optional string top = 3;
  if (has_top()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->top().data(), this->top().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "top");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->top(), target);
  }

  // optional bool show = 4 [default = false];
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->show(), target);
  }

  // optional bool save = 5 [default = false];
  if (has_save()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->save(), target);
  }

  // optional bool logt = 6 [default = false];
  if (has_logt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->logt(), target);
  }

  // optional bool logi = 7 [default = false];
  if (has_logi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->logi(), target);
  }

  // optional .svaf.LayerParameter.LayerType type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  // optional .svaf.DataParameter data_param = 100;
  if (has_data_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->data_param(), target);
  }

  // optional .svaf.ImageDataParameter imagedata_param = 101;
  if (has_imagedata_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->imagedata_param(), target);
  }

  // optional .svaf.ImagePairParameter imagepair_param = 102;
  if (has_imagepair_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->imagepair_param(), target);
  }

  // optional .svaf.VideoDataParameter videodata_param = 103;
  if (has_videodata_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->videodata_param(), target);
  }

  // optional .svaf.VideoPairParameter videopair_param = 104;
  if (has_videopair_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->videopair_param(), target);
  }

  // optional .svaf.CameraDataParameter cameradata_param = 105;
  if (has_cameradata_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, this->cameradata_param(), target);
  }

  // optional .svaf.CameraPairParameter camerapair_param = 106;
  if (has_camerapair_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        106, this->camerapair_param(), target);
  }

  // optional .svaf.DSPCameraDataParameter dspcameradata_param = 107;
  if (has_dspcameradata_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        107, this->dspcameradata_param(), target);
  }

  // optional .svaf.DSPCameraPairParameter dspcamerapair_param = 108;
  if (has_dspcamerapair_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        108, this->dspcamerapair_param(), target);
  }

  // optional .svaf.KinectDataParameter kinectdata_param = 109;
  if (has_kinectdata_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        109, this->kinectdata_param(), target);
  }

  // optional .svaf.ImageFolderParameter folder_param = 111;
  if (has_folder_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        111, this->folder_param(), target);
  }

  // optional .svaf.ImagePairFolderParameter pairfolder_param = 112;
  if (has_pairfolder_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        112, this->pairfolder_param(), target);
  }

  // optional .svaf.RecognizeParameter recognize_param = 120;
  if (has_recognize_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        120, this->recognize_param(), target);
  }

  // optional .svaf.AdaboostParameter adaboost_param = 121;
  if (has_adaboost_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        121, this->adaboost_param(), target);
  }

  // optional .svaf.TrackParameter track_param = 130;
  if (has_track_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        130, this->track_param(), target);
  }

  // optional .svaf.MilTrackParameter miltrack_param = 131;
  if (has_miltrack_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        131, this->miltrack_param(), target);
  }

  // optional .svaf.MilTrackParameter bittrack_param = 132;
  if (has_bittrack_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        132, this->bittrack_param(), target);
  }

  // optional .svaf.FeaturePointParameter featurepoint_param = 140;
  if (has_featurepoint_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        140, this->featurepoint_param(), target);
  }

  // optional .svaf.SIFTPointParameter siftpoint_param = 141;
  if (has_siftpoint_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        141, this->siftpoint_param(), target);
  }

  // optional .svaf.SURFPointParameter surfpoint_param = 142;
  if (has_surfpoint_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        142, this->surfpoint_param(), target);
  }

  // optional .svaf.STARPointParameter starpoint_param = 143;
  if (has_starpoint_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        143, this->starpoint_param(), target);
  }

  // optional .svaf.BRISKPointParameter briskpoint_param = 144;
  if (has_briskpoint_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        144, this->briskpoint_param(), target);
  }

  // optional .svaf.FASTPointParameter fastpoint_param = 145;
  if (has_fastpoint_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        145, this->fastpoint_param(), target);
  }

  // optional .svaf.ORBPointParameter orbpoint_param = 146;
  if (has_orbpoint_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        146, this->orbpoint_param(), target);
  }

  // optional .svaf.KAZEPointParameter kazepoint_param = 147;
  if (has_kazepoint_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        147, this->kazepoint_param(), target);
  }

  // optional .svaf.HarrisPointParameter harrispoint_param = 148;
  if (has_harrispoint_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        148, this->harrispoint_param(), target);
  }

  // optional .svaf.CVPointParameter cvpoint_param = 149;
  if (has_cvpoint_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        149, this->cvpoint_param(), target);
  }

  // optional .svaf.FeatureDescriptorParameter featuredescriptor_param = 150;
  if (has_featuredescriptor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        150, this->featuredescriptor_param(), target);
  }

  // optional .svaf.SIFTDescriptorParameter siftdescriptor_param = 151;
  if (has_siftdescriptor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        151, this->siftdescriptor_param(), target);
  }

  // optional .svaf.SURFDescriptorParameter surfdescriptor_param = 152;
  if (has_surfdescriptor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        152, this->surfdescriptor_param(), target);
  }

  // optional .svaf.STARDescriptorParameter stardescriptor_param = 153;
  if (has_stardescriptor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        153, this->stardescriptor_param(), target);
  }

  // optional .svaf.BRIEFDescriptorParameter briefdescriptor_param = 154;
  if (has_briefdescriptor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        154, this->briefdescriptor_param(), target);
  }

  // optional .svaf.BRISKDescriptorParameter briskdescriptor_param = 155;
  if (has_briskdescriptor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        155, this->briskdescriptor_param(), target);
  }

  // optional .svaf.FASTDescriptorParameter fastdescriptor_param = 156;
  if (has_fastdescriptor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        156, this->fastdescriptor_param(), target);
  }

  // optional .svaf.ORBDescriptorParameter orbdescriptor_param = 157;
  if (has_orbdescriptor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        157, this->orbdescriptor_param(), target);
  }

  // optional .svaf.KAZEDescriptorParameter kazedescriptor_param = 158;
  if (has_kazedescriptor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        158, this->kazedescriptor_param(), target);
  }

  // optional .svaf.CVDescriptorParameter cvdescriptor_param = 159;
  if (has_cvdescriptor_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        159, this->cvdescriptor_param(), target);
  }

  // optional .svaf.VectorMatchParameter vectormatch_param = 160;
  if (has_vectormatch_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        160, this->vectormatch_param(), target);
  }

  // optional .svaf.KDTreeMatchParameter kdtreematch_param = 161;
  if (has_kdtreematch_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        161, this->kdtreematch_param(), target);
  }

  // optional .svaf.EularMatchParameter eularmatch_param = 162;
  if (has_eularmatch_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        162, this->eularmatch_param(), target);
  }

  // optional .svaf.RansacParameter ransac_param = 163;
  if (has_ransac_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        163, this->ransac_param(), target);
  }

  // optional .svaf.BruteForceMatchParameter bfmatch_param = 164;
  if (has_bfmatch_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        164, this->bfmatch_param(), target);
  }

  // optional .svaf.FLANNMatchParameter flannmatch_param = 165;
  if (has_flannmatch_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        165, this->flannmatch_param(), target);
  }

  // optional .svaf.ECMatchParameter ecmatch_param = 168;
  if (has_ecmatch_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        168, this->ecmatch_param(), target);
  }

  // optional .svaf.CVMatchParameter cvmatch_param = 169;
  if (has_cvmatch_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        169, this->cvmatch_param(), target);
  }

  // optional .svaf.StereoMatchParameter stereomatch_param = 170;
  if (has_stereomatch_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        170, this->stereomatch_param(), target);
  }

  // optional .svaf.SGMMatchParameter sgm_param = 171;
  if (has_sgm_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        171, this->sgm_param(), target);
  }

  // optional .svaf.EADPMatchParameter eadp_param = 172;
  if (has_eadp_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        172, this->eadp_param(), target);
  }

  // optional .svaf.OutputParameter output_param = 180;
  if (has_output_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        180, this->output_param(), target);
  }

  // optional .svaf.TriangularParameter triang_param = 181;
  if (has_triang_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        181, this->triang_param(), target);
  }

  // optional .svaf.MatrixMulParameter mxmul_param = 182;
  if (has_mxmul_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        182, this->mxmul_param(), target);
  }

  // optional .svaf.PositionEstimateParameter posest_param = 190;
  if (has_posest_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        190, this->posest_param(), target);
  }

  // optional .svaf.CenterPointParameter centerpoint_param = 191;
  if (has_centerpoint_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        191, this->centerpoint_param(), target);
  }

  // optional .svaf.SACIAEstimateParameter sacia_param = 194;
  if (has_sacia_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        194, this->sacia_param(), target);
  }

  // optional .svaf.IAICPEstimateParameter iaicp_param = 195;
  if (has_iaicp_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        195, this->iaicp_param(), target);
  }

  // optional .svaf.IANDTEstimateParameter iandt_param = 196;
  if (has_iandt_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        196, this->iandt_param(), target);
  }

  // optional .svaf.ImageOperationParameter imageop_param = 200;
  if (has_imageop_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        200, this->imageop_param(), target);
  }

  // optional .svaf.SuperPixelSegmentParameter supix_param = 201;
  if (has_supix_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        201, this->supix_param(), target);
  }

  // optional .svaf.ImageResizeParameter resize_param = 202;
  if (has_resize_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        202, this->resize_param(), target);
  }

  // optional .svaf.ImageCropParameter crop_param = 203;
  if (has_crop_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        203, this->crop_param(), target);
  }

  // optional .svaf.StereoOperationParameter stereoop_param = 240;
  if (has_stereoop_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        240, this->stereoop_param(), target);
  }

  // optional .svaf.StereoRectifyParameter rectify_param = 241;
  if (has_rectify_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        241, this->rectify_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svaf.LayerParameter)
  return target;
}

int LayerParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string bottom = 2;
    if (has_bottom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bottom());
    }

    // optional string top = 3;
    if (has_top()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->top());
    }

    // optional bool show = 4 [default = false];
    if (has_show()) {
      total_size += 1 + 1;
    }

    // optional bool save = 5 [default = false];
    if (has_save()) {
      total_size += 1 + 1;
    }

    // optional bool logt = 6 [default = false];
    if (has_logt()) {
      total_size += 1 + 1;
    }

    // optional bool logi = 7 [default = false];
    if (has_logi()) {
      total_size += 1 + 1;
    }

    // optional .svaf.LayerParameter.LayerType type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .svaf.ImageOperationParameter imageop_param = 200;
    if (has_imageop_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imageop_param());
    }

    // optional .svaf.SuperPixelSegmentParameter supix_param = 201;
    if (has_supix_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->supix_param());
    }

    // optional .svaf.ImageResizeParameter resize_param = 202;
    if (has_resize_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resize_param());
    }

    // optional .svaf.ImageCropParameter crop_param = 203;
    if (has_crop_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crop_param());
    }

    // optional .svaf.StereoOperationParameter stereoop_param = 240;
    if (has_stereoop_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stereoop_param());
    }

    // optional .svaf.StereoRectifyParameter rectify_param = 241;
    if (has_rectify_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rectify_param());
    }

    // optional .svaf.DataParameter data_param = 100;
    if (has_data_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_param());
    }

    // optional .svaf.ImageDataParameter imagedata_param = 101;
    if (has_imagedata_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imagedata_param());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .svaf.ImagePairParameter imagepair_param = 102;
    if (has_imagepair_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imagepair_param());
    }

    // optional .svaf.VideoDataParameter videodata_param = 103;
    if (has_videodata_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->videodata_param());
    }

    // optional .svaf.VideoPairParameter videopair_param = 104;
    if (has_videopair_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->videopair_param());
    }

    // optional .svaf.CameraDataParameter cameradata_param = 105;
    if (has_cameradata_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cameradata_param());
    }

    // optional .svaf.CameraPairParameter camerapair_param = 106;
    if (has_camerapair_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camerapair_param());
    }

    // optional .svaf.DSPCameraDataParameter dspcameradata_param = 107;
    if (has_dspcameradata_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dspcameradata_param());
    }

    // optional .svaf.DSPCameraPairParameter dspcamerapair_param = 108;
    if (has_dspcamerapair_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dspcamerapair_param());
    }

    // optional .svaf.KinectDataParameter kinectdata_param = 109;
    if (has_kinectdata_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kinectdata_param());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .svaf.ImageFolderParameter folder_param = 111;
    if (has_folder_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->folder_param());
    }

    // optional .svaf.ImagePairFolderParameter pairfolder_param = 112;
    if (has_pairfolder_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pairfolder_param());
    }

    // optional .svaf.RecognizeParameter recognize_param = 120;
    if (has_recognize_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recognize_param());
    }

    // optional .svaf.AdaboostParameter adaboost_param = 121;
    if (has_adaboost_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adaboost_param());
    }

    // optional .svaf.TrackParameter track_param = 130;
    if (has_track_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->track_param());
    }

    // optional .svaf.MilTrackParameter miltrack_param = 131;
    if (has_miltrack_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->miltrack_param());
    }

    // optional .svaf.MilTrackParameter bittrack_param = 132;
    if (has_bittrack_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bittrack_param());
    }

    // optional .svaf.FeaturePointParameter featurepoint_param = 140;
    if (has_featurepoint_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->featurepoint_param());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .svaf.SIFTPointParameter siftpoint_param = 141;
    if (has_siftpoint_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->siftpoint_param());
    }

    // optional .svaf.SURFPointParameter surfpoint_param = 142;
    if (has_surfpoint_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->surfpoint_param());
    }

    // optional .svaf.STARPointParameter starpoint_param = 143;
    if (has_starpoint_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->starpoint_param());
    }

    // optional .svaf.BRISKPointParameter briskpoint_param = 144;
    if (has_briskpoint_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->briskpoint_param());
    }

    // optional .svaf.FASTPointParameter fastpoint_param = 145;
    if (has_fastpoint_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fastpoint_param());
    }

    // optional .svaf.ORBPointParameter orbpoint_param = 146;
    if (has_orbpoint_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orbpoint_param());
    }

    // optional .svaf.KAZEPointParameter kazepoint_param = 147;
    if (has_kazepoint_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kazepoint_param());
    }

    // optional .svaf.HarrisPointParameter harrispoint_param = 148;
    if (has_harrispoint_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->harrispoint_param());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .svaf.CVPointParameter cvpoint_param = 149;
    if (has_cvpoint_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvpoint_param());
    }

    // optional .svaf.FeatureDescriptorParameter featuredescriptor_param = 150;
    if (has_featuredescriptor_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->featuredescriptor_param());
    }

    // optional .svaf.SIFTDescriptorParameter siftdescriptor_param = 151;
    if (has_siftdescriptor_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->siftdescriptor_param());
    }

    // optional .svaf.SURFDescriptorParameter surfdescriptor_param = 152;
    if (has_surfdescriptor_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->surfdescriptor_param());
    }

    // optional .svaf.STARDescriptorParameter stardescriptor_param = 153;
    if (has_stardescriptor_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stardescriptor_param());
    }

    // optional .svaf.BRIEFDescriptorParameter briefdescriptor_param = 154;
    if (has_briefdescriptor_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->briefdescriptor_param());
    }

    // optional .svaf.BRISKDescriptorParameter briskdescriptor_param = 155;
    if (has_briskdescriptor_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->briskdescriptor_param());
    }

    // optional .svaf.FASTDescriptorParameter fastdescriptor_param = 156;
    if (has_fastdescriptor_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fastdescriptor_param());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .svaf.ORBDescriptorParameter orbdescriptor_param = 157;
    if (has_orbdescriptor_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orbdescriptor_param());
    }

    // optional .svaf.KAZEDescriptorParameter kazedescriptor_param = 158;
    if (has_kazedescriptor_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kazedescriptor_param());
    }

    // optional .svaf.CVDescriptorParameter cvdescriptor_param = 159;
    if (has_cvdescriptor_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvdescriptor_param());
    }

    // optional .svaf.VectorMatchParameter vectormatch_param = 160;
    if (has_vectormatch_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vectormatch_param());
    }

    // optional .svaf.KDTreeMatchParameter kdtreematch_param = 161;
    if (has_kdtreematch_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kdtreematch_param());
    }

    // optional .svaf.EularMatchParameter eularmatch_param = 162;
    if (has_eularmatch_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eularmatch_param());
    }

    // optional .svaf.RansacParameter ransac_param = 163;
    if (has_ransac_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ransac_param());
    }

    // optional .svaf.BruteForceMatchParameter bfmatch_param = 164;
    if (has_bfmatch_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bfmatch_param());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .svaf.FLANNMatchParameter flannmatch_param = 165;
    if (has_flannmatch_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flannmatch_param());
    }

    // optional .svaf.ECMatchParameter ecmatch_param = 168;
    if (has_ecmatch_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ecmatch_param());
    }

    // optional .svaf.CVMatchParameter cvmatch_param = 169;
    if (has_cvmatch_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvmatch_param());
    }

    // optional .svaf.StereoMatchParameter stereomatch_param = 170;
    if (has_stereomatch_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stereomatch_param());
    }

    // optional .svaf.SGMMatchParameter sgm_param = 171;
    if (has_sgm_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sgm_param());
    }

    // optional .svaf.EADPMatchParameter eadp_param = 172;
    if (has_eadp_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eadp_param());
    }

    // optional .svaf.OutputParameter output_param = 180;
    if (has_output_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->output_param());
    }

    // optional .svaf.TriangularParameter triang_param = 181;
    if (has_triang_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->triang_param());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional .svaf.MatrixMulParameter mxmul_param = 182;
    if (has_mxmul_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mxmul_param());
    }

    // optional .svaf.PositionEstimateParameter posest_param = 190;
    if (has_posest_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->posest_param());
    }

    // optional .svaf.CenterPointParameter centerpoint_param = 191;
    if (has_centerpoint_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->centerpoint_param());
    }

    // optional .svaf.SACIAEstimateParameter sacia_param = 194;
    if (has_sacia_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sacia_param());
    }

    // optional .svaf.IAICPEstimateParameter iaicp_param = 195;
    if (has_iaicp_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iaicp_param());
    }

    // optional .svaf.IANDTEstimateParameter iandt_param = 196;
    if (has_iandt_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iandt_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayerParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LayerParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LayerParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LayerParameter::MergeFrom(const LayerParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_bottom()) {
      set_bottom(from.bottom());
    }
    if (from.has_top()) {
      set_top(from.top());
    }
    if (from.has_show()) {
      set_show(from.show());
    }
    if (from.has_save()) {
      set_save(from.save());
    }
    if (from.has_logt()) {
      set_logt(from.logt());
    }
    if (from.has_logi()) {
      set_logi(from.logi());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_imageop_param()) {
      mutable_imageop_param()->::svaf::ImageOperationParameter::MergeFrom(from.imageop_param());
    }
    if (from.has_supix_param()) {
      mutable_supix_param()->::svaf::SuperPixelSegmentParameter::MergeFrom(from.supix_param());
    }
    if (from.has_resize_param()) {
      mutable_resize_param()->::svaf::ImageResizeParameter::MergeFrom(from.resize_param());
    }
    if (from.has_crop_param()) {
      mutable_crop_param()->::svaf::ImageCropParameter::MergeFrom(from.crop_param());
    }
    if (from.has_stereoop_param()) {
      mutable_stereoop_param()->::svaf::StereoOperationParameter::MergeFrom(from.stereoop_param());
    }
    if (from.has_rectify_param()) {
      mutable_rectify_param()->::svaf::StereoRectifyParameter::MergeFrom(from.rectify_param());
    }
    if (from.has_data_param()) {
      mutable_data_param()->::svaf::DataParameter::MergeFrom(from.data_param());
    }
    if (from.has_imagedata_param()) {
      mutable_imagedata_param()->::svaf::ImageDataParameter::MergeFrom(from.imagedata_param());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_imagepair_param()) {
      mutable_imagepair_param()->::svaf::ImagePairParameter::MergeFrom(from.imagepair_param());
    }
    if (from.has_videodata_param()) {
      mutable_videodata_param()->::svaf::VideoDataParameter::MergeFrom(from.videodata_param());
    }
    if (from.has_videopair_param()) {
      mutable_videopair_param()->::svaf::VideoPairParameter::MergeFrom(from.videopair_param());
    }
    if (from.has_cameradata_param()) {
      mutable_cameradata_param()->::svaf::CameraDataParameter::MergeFrom(from.cameradata_param());
    }
    if (from.has_camerapair_param()) {
      mutable_camerapair_param()->::svaf::CameraPairParameter::MergeFrom(from.camerapair_param());
    }
    if (from.has_dspcameradata_param()) {
      mutable_dspcameradata_param()->::svaf::DSPCameraDataParameter::MergeFrom(from.dspcameradata_param());
    }
    if (from.has_dspcamerapair_param()) {
      mutable_dspcamerapair_param()->::svaf::DSPCameraPairParameter::MergeFrom(from.dspcamerapair_param());
    }
    if (from.has_kinectdata_param()) {
      mutable_kinectdata_param()->::svaf::KinectDataParameter::MergeFrom(from.kinectdata_param());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_folder_param()) {
      mutable_folder_param()->::svaf::ImageFolderParameter::MergeFrom(from.folder_param());
    }
    if (from.has_pairfolder_param()) {
      mutable_pairfolder_param()->::svaf::ImagePairFolderParameter::MergeFrom(from.pairfolder_param());
    }
    if (from.has_recognize_param()) {
      mutable_recognize_param()->::svaf::RecognizeParameter::MergeFrom(from.recognize_param());
    }
    if (from.has_adaboost_param()) {
      mutable_adaboost_param()->::svaf::AdaboostParameter::MergeFrom(from.adaboost_param());
    }
    if (from.has_track_param()) {
      mutable_track_param()->::svaf::TrackParameter::MergeFrom(from.track_param());
    }
    if (from.has_miltrack_param()) {
      mutable_miltrack_param()->::svaf::MilTrackParameter::MergeFrom(from.miltrack_param());
    }
    if (from.has_bittrack_param()) {
      mutable_bittrack_param()->::svaf::MilTrackParameter::MergeFrom(from.bittrack_param());
    }
    if (from.has_featurepoint_param()) {
      mutable_featurepoint_param()->::svaf::FeaturePointParameter::MergeFrom(from.featurepoint_param());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_siftpoint_param()) {
      mutable_siftpoint_param()->::svaf::SIFTPointParameter::MergeFrom(from.siftpoint_param());
    }
    if (from.has_surfpoint_param()) {
      mutable_surfpoint_param()->::svaf::SURFPointParameter::MergeFrom(from.surfpoint_param());
    }
    if (from.has_starpoint_param()) {
      mutable_starpoint_param()->::svaf::STARPointParameter::MergeFrom(from.starpoint_param());
    }
    if (from.has_briskpoint_param()) {
      mutable_briskpoint_param()->::svaf::BRISKPointParameter::MergeFrom(from.briskpoint_param());
    }
    if (from.has_fastpoint_param()) {
      mutable_fastpoint_param()->::svaf::FASTPointParameter::MergeFrom(from.fastpoint_param());
    }
    if (from.has_orbpoint_param()) {
      mutable_orbpoint_param()->::svaf::ORBPointParameter::MergeFrom(from.orbpoint_param());
    }
    if (from.has_kazepoint_param()) {
      mutable_kazepoint_param()->::svaf::KAZEPointParameter::MergeFrom(from.kazepoint_param());
    }
    if (from.has_harrispoint_param()) {
      mutable_harrispoint_param()->::svaf::HarrisPointParameter::MergeFrom(from.harrispoint_param());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_cvpoint_param()) {
      mutable_cvpoint_param()->::svaf::CVPointParameter::MergeFrom(from.cvpoint_param());
    }
    if (from.has_featuredescriptor_param()) {
      mutable_featuredescriptor_param()->::svaf::FeatureDescriptorParameter::MergeFrom(from.featuredescriptor_param());
    }
    if (from.has_siftdescriptor_param()) {
      mutable_siftdescriptor_param()->::svaf::SIFTDescriptorParameter::MergeFrom(from.siftdescriptor_param());
    }
    if (from.has_surfdescriptor_param()) {
      mutable_surfdescriptor_param()->::svaf::SURFDescriptorParameter::MergeFrom(from.surfdescriptor_param());
    }
    if (from.has_stardescriptor_param()) {
      mutable_stardescriptor_param()->::svaf::STARDescriptorParameter::MergeFrom(from.stardescriptor_param());
    }
    if (from.has_briefdescriptor_param()) {
      mutable_briefdescriptor_param()->::svaf::BRIEFDescriptorParameter::MergeFrom(from.briefdescriptor_param());
    }
    if (from.has_briskdescriptor_param()) {
      mutable_briskdescriptor_param()->::svaf::BRISKDescriptorParameter::MergeFrom(from.briskdescriptor_param());
    }
    if (from.has_fastdescriptor_param()) {
      mutable_fastdescriptor_param()->::svaf::FASTDescriptorParameter::MergeFrom(from.fastdescriptor_param());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_orbdescriptor_param()) {
      mutable_orbdescriptor_param()->::svaf::ORBDescriptorParameter::MergeFrom(from.orbdescriptor_param());
    }
    if (from.has_kazedescriptor_param()) {
      mutable_kazedescriptor_param()->::svaf::KAZEDescriptorParameter::MergeFrom(from.kazedescriptor_param());
    }
    if (from.has_cvdescriptor_param()) {
      mutable_cvdescriptor_param()->::svaf::CVDescriptorParameter::MergeFrom(from.cvdescriptor_param());
    }
    if (from.has_vectormatch_param()) {
      mutable_vectormatch_param()->::svaf::VectorMatchParameter::MergeFrom(from.vectormatch_param());
    }
    if (from.has_kdtreematch_param()) {
      mutable_kdtreematch_param()->::svaf::KDTreeMatchParameter::MergeFrom(from.kdtreematch_param());
    }
    if (from.has_eularmatch_param()) {
      mutable_eularmatch_param()->::svaf::EularMatchParameter::MergeFrom(from.eularmatch_param());
    }
    if (from.has_ransac_param()) {
      mutable_ransac_param()->::svaf::RansacParameter::MergeFrom(from.ransac_param());
    }
    if (from.has_bfmatch_param()) {
      mutable_bfmatch_param()->::svaf::BruteForceMatchParameter::MergeFrom(from.bfmatch_param());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_flannmatch_param()) {
      mutable_flannmatch_param()->::svaf::FLANNMatchParameter::MergeFrom(from.flannmatch_param());
    }
    if (from.has_ecmatch_param()) {
      mutable_ecmatch_param()->::svaf::ECMatchParameter::MergeFrom(from.ecmatch_param());
    }
    if (from.has_cvmatch_param()) {
      mutable_cvmatch_param()->::svaf::CVMatchParameter::MergeFrom(from.cvmatch_param());
    }
    if (from.has_stereomatch_param()) {
      mutable_stereomatch_param()->::svaf::StereoMatchParameter::MergeFrom(from.stereomatch_param());
    }
    if (from.has_sgm_param()) {
      mutable_sgm_param()->::svaf::SGMMatchParameter::MergeFrom(from.sgm_param());
    }
    if (from.has_eadp_param()) {
      mutable_eadp_param()->::svaf::EADPMatchParameter::MergeFrom(from.eadp_param());
    }
    if (from.has_output_param()) {
      mutable_output_param()->::svaf::OutputParameter::MergeFrom(from.output_param());
    }
    if (from.has_triang_param()) {
      mutable_triang_param()->::svaf::TriangularParameter::MergeFrom(from.triang_param());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_mxmul_param()) {
      mutable_mxmul_param()->::svaf::MatrixMulParameter::MergeFrom(from.mxmul_param());
    }
    if (from.has_posest_param()) {
      mutable_posest_param()->::svaf::PositionEstimateParameter::MergeFrom(from.posest_param());
    }
    if (from.has_centerpoint_param()) {
      mutable_centerpoint_param()->::svaf::CenterPointParameter::MergeFrom(from.centerpoint_param());
    }
    if (from.has_sacia_param()) {
      mutable_sacia_param()->::svaf::SACIAEstimateParameter::MergeFrom(from.sacia_param());
    }
    if (from.has_iaicp_param()) {
      mutable_iaicp_param()->::svaf::IAICPEstimateParameter::MergeFrom(from.iaicp_param());
    }
    if (from.has_iandt_param()) {
      mutable_iandt_param()->::svaf::IANDTEstimateParameter::MergeFrom(from.iandt_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LayerParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayerParameter::CopyFrom(const LayerParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayerParameter::IsInitialized() const {

  return true;
}

void LayerParameter::Swap(LayerParameter* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(bottom_, other->bottom_);
    std::swap(top_, other->top_);
    std::swap(show_, other->show_);
    std::swap(save_, other->save_);
    std::swap(logt_, other->logt_);
    std::swap(logi_, other->logi_);
    std::swap(type_, other->type_);
    std::swap(imageop_param_, other->imageop_param_);
    std::swap(supix_param_, other->supix_param_);
    std::swap(resize_param_, other->resize_param_);
    std::swap(crop_param_, other->crop_param_);
    std::swap(stereoop_param_, other->stereoop_param_);
    std::swap(rectify_param_, other->rectify_param_);
    std::swap(data_param_, other->data_param_);
    std::swap(imagedata_param_, other->imagedata_param_);
    std::swap(imagepair_param_, other->imagepair_param_);
    std::swap(videodata_param_, other->videodata_param_);
    std::swap(videopair_param_, other->videopair_param_);
    std::swap(cameradata_param_, other->cameradata_param_);
    std::swap(camerapair_param_, other->camerapair_param_);
    std::swap(dspcameradata_param_, other->dspcameradata_param_);
    std::swap(dspcamerapair_param_, other->dspcamerapair_param_);
    std::swap(kinectdata_param_, other->kinectdata_param_);
    std::swap(folder_param_, other->folder_param_);
    std::swap(pairfolder_param_, other->pairfolder_param_);
    std::swap(recognize_param_, other->recognize_param_);
    std::swap(adaboost_param_, other->adaboost_param_);
    std::swap(track_param_, other->track_param_);
    std::swap(miltrack_param_, other->miltrack_param_);
    std::swap(bittrack_param_, other->bittrack_param_);
    std::swap(featurepoint_param_, other->featurepoint_param_);
    std::swap(siftpoint_param_, other->siftpoint_param_);
    std::swap(surfpoint_param_, other->surfpoint_param_);
    std::swap(starpoint_param_, other->starpoint_param_);
    std::swap(briskpoint_param_, other->briskpoint_param_);
    std::swap(fastpoint_param_, other->fastpoint_param_);
    std::swap(orbpoint_param_, other->orbpoint_param_);
    std::swap(kazepoint_param_, other->kazepoint_param_);
    std::swap(harrispoint_param_, other->harrispoint_param_);
    std::swap(cvpoint_param_, other->cvpoint_param_);
    std::swap(featuredescriptor_param_, other->featuredescriptor_param_);
    std::swap(siftdescriptor_param_, other->siftdescriptor_param_);
    std::swap(surfdescriptor_param_, other->surfdescriptor_param_);
    std::swap(stardescriptor_param_, other->stardescriptor_param_);
    std::swap(briefdescriptor_param_, other->briefdescriptor_param_);
    std::swap(briskdescriptor_param_, other->briskdescriptor_param_);
    std::swap(fastdescriptor_param_, other->fastdescriptor_param_);
    std::swap(orbdescriptor_param_, other->orbdescriptor_param_);
    std::swap(kazedescriptor_param_, other->kazedescriptor_param_);
    std::swap(cvdescriptor_param_, other->cvdescriptor_param_);
    std::swap(vectormatch_param_, other->vectormatch_param_);
    std::swap(kdtreematch_param_, other->kdtreematch_param_);
    std::swap(eularmatch_param_, other->eularmatch_param_);
    std::swap(ransac_param_, other->ransac_param_);
    std::swap(bfmatch_param_, other->bfmatch_param_);
    std::swap(flannmatch_param_, other->flannmatch_param_);
    std::swap(ecmatch_param_, other->ecmatch_param_);
    std::swap(cvmatch_param_, other->cvmatch_param_);
    std::swap(stereomatch_param_, other->stereomatch_param_);
    std::swap(sgm_param_, other->sgm_param_);
    std::swap(eadp_param_, other->eadp_param_);
    std::swap(output_param_, other->output_param_);
    std::swap(triang_param_, other->triang_param_);
    std::swap(mxmul_param_, other->mxmul_param_);
    std::swap(posest_param_, other->posest_param_);
    std::swap(centerpoint_param_, other->centerpoint_param_);
    std::swap(sacia_param_, other->sacia_param_);
    std::swap(iaicp_param_, other->iaicp_param_);
    std::swap(iandt_param_, other->iandt_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LayerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayerParameter_descriptor_;
  metadata.reflection = LayerParameter_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace svaf

// @@protoc_insertion_point(global_scope)
