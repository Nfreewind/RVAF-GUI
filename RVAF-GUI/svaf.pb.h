// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: svaf.proto

#ifndef PROTOBUF_svaf_2eproto__INCLUDED
#define PROTOBUF_svaf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace svaf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_svaf_2eproto();
void protobuf_AssignDesc_svaf_2eproto();
void protobuf_ShutdownFile_svaf_2eproto();

class SvafTask;
class ImageOperationParameter;
class SuperPixelSegmentParameter;
class ImageResizeParameter;
class ImageCropParameter;
class StereoOperationParameter;
class StereoRectifyParameter;
class DataParameter;
class ImageDataParameter;
class BinocularPair;
class ImagePairParameter;
class VideoDataParameter;
class VideoPairParameter;
class CameraDataParameter;
class CameraPairParameter;
class DSPCameraDataParameter;
class DSPCameraPairParameter;
class KinectDataParameter;
class ImageFolderParameter;
class ImagePairFolderParameter;
class RecognizeParameter;
class ROIExtention;
class AdaboostParameter;
class TrackParameter;
class InitRectParameter;
class MilTrackParameter;
class FeaturePointParameter;
class SIFTPointParameter;
class SURFPointParameter;
class STARPointParameter;
class BRISKPointParameter;
class FASTPointParameter;
class ORBPointParameter;
class KAZEPointParameter;
class HarrisPointParameter;
class FastParamCP;
class MSERParamCP;
class ORBParamCP;
class BriskParamCP;
class FreakParamCP;
class StarParamCP;
class SiftParamCP;
class SurfParamCP;
class GFTTParamCP;
class HarrisParamCP;
class DenseParamCP;
class SimpleBlobParamCP;
class AkazeParamCP;
class CVPointParameter;
class FeatureDescriptorParameter;
class SIFTDescriptorParameter;
class SURFDescriptorParameter;
class STARDescriptorParameter;
class BRIEFDescriptorParameter;
class BRISKDescriptorParameter;
class FASTDescriptorParameter;
class ORBDescriptorParameter;
class KAZEDescriptorParameter;
class BriefDespCV;
class CVDescriptorParameter;
class VectorMatchParameter;
class KDTreeMatchParameter;
class EularMatchParameter;
class RansacParameter;
class BruteForceMatchParameter;
class FLANNMatchParameter;
class ECMatchParameter;
class CVMatchParameter;
class StereoMatchParameter;
class SGMMatchParameter;
class EADPMatchParameter;
class OutputParameter;
class TriangularParameter;
class MatrixMulParameter;
class PositionEstimateParameter;
class CenterPointParameter;
class CoordiParameter;
class SACIAParameter;
class SACIAEstimateParameter;
class ICPParameter;
class IAICPEstimateParameter;
class NDTParameter;
class IANDTEstimateParameter;
class LayerParameter;

enum MilTrackParameter_InitType {
  MilTrackParameter_InitType_MOUSE = 1,
  MilTrackParameter_InitType_SELECT = 2,
  MilTrackParameter_InitType_AUTORECT = 3,
  MilTrackParameter_InitType_ADABOOST = 4
};
bool MilTrackParameter_InitType_IsValid(int value);
const MilTrackParameter_InitType MilTrackParameter_InitType_InitType_MIN = MilTrackParameter_InitType_MOUSE;
const MilTrackParameter_InitType MilTrackParameter_InitType_InitType_MAX = MilTrackParameter_InitType_ADABOOST;
const int MilTrackParameter_InitType_InitType_ARRAYSIZE = MilTrackParameter_InitType_InitType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MilTrackParameter_InitType_descriptor();
inline const ::std::string& MilTrackParameter_InitType_Name(MilTrackParameter_InitType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MilTrackParameter_InitType_descriptor(), value);
}
inline bool MilTrackParameter_InitType_Parse(
    const ::std::string& name, MilTrackParameter_InitType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MilTrackParameter_InitType>(
    MilTrackParameter_InitType_descriptor(), name, value);
}
enum MilTrackParameter_TrackType {
  MilTrackParameter_TrackType_MIL = 1,
  MilTrackParameter_TrackType_ADA = 2,
  MilTrackParameter_TrackType_MIL_GRAY = 11,
  MilTrackParameter_TrackType_MIL_RGB = 12,
  MilTrackParameter_TrackType_MIL_LUV = 13,
  MilTrackParameter_TrackType_MIL_HSV = 14
};
bool MilTrackParameter_TrackType_IsValid(int value);
const MilTrackParameter_TrackType MilTrackParameter_TrackType_TrackType_MIN = MilTrackParameter_TrackType_MIL;
const MilTrackParameter_TrackType MilTrackParameter_TrackType_TrackType_MAX = MilTrackParameter_TrackType_MIL_HSV;
const int MilTrackParameter_TrackType_TrackType_ARRAYSIZE = MilTrackParameter_TrackType_TrackType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MilTrackParameter_TrackType_descriptor();
inline const ::std::string& MilTrackParameter_TrackType_Name(MilTrackParameter_TrackType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MilTrackParameter_TrackType_descriptor(), value);
}
inline bool MilTrackParameter_TrackType_Parse(
    const ::std::string& name, MilTrackParameter_TrackType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MilTrackParameter_TrackType>(
    MilTrackParameter_TrackType_descriptor(), name, value);
}
enum FastParamCP_FastType {
  FastParamCP_FastType_T_9_16 = 1,
  FastParamCP_FastType_T_7_12 = 2,
  FastParamCP_FastType_T_5_8 = 3
};
bool FastParamCP_FastType_IsValid(int value);
const FastParamCP_FastType FastParamCP_FastType_FastType_MIN = FastParamCP_FastType_T_9_16;
const FastParamCP_FastType FastParamCP_FastType_FastType_MAX = FastParamCP_FastType_T_5_8;
const int FastParamCP_FastType_FastType_ARRAYSIZE = FastParamCP_FastType_FastType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FastParamCP_FastType_descriptor();
inline const ::std::string& FastParamCP_FastType_Name(FastParamCP_FastType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FastParamCP_FastType_descriptor(), value);
}
inline bool FastParamCP_FastType_Parse(
    const ::std::string& name, FastParamCP_FastType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FastParamCP_FastType>(
    FastParamCP_FastType_descriptor(), name, value);
}
enum ORBParamCP_OBRScoreType {
  ORBParamCP_OBRScoreType_HARRIS_SCORE = 1,
  ORBParamCP_OBRScoreType_FAST_SCORE = 2
};
bool ORBParamCP_OBRScoreType_IsValid(int value);
const ORBParamCP_OBRScoreType ORBParamCP_OBRScoreType_OBRScoreType_MIN = ORBParamCP_OBRScoreType_HARRIS_SCORE;
const ORBParamCP_OBRScoreType ORBParamCP_OBRScoreType_OBRScoreType_MAX = ORBParamCP_OBRScoreType_FAST_SCORE;
const int ORBParamCP_OBRScoreType_OBRScoreType_ARRAYSIZE = ORBParamCP_OBRScoreType_OBRScoreType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ORBParamCP_OBRScoreType_descriptor();
inline const ::std::string& ORBParamCP_OBRScoreType_Name(ORBParamCP_OBRScoreType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ORBParamCP_OBRScoreType_descriptor(), value);
}
inline bool ORBParamCP_OBRScoreType_Parse(
    const ::std::string& name, ORBParamCP_OBRScoreType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ORBParamCP_OBRScoreType>(
    ORBParamCP_OBRScoreType_descriptor(), name, value);
}
enum CVPointParameter_PointType {
  CVPointParameter_PointType_FAST = 1,
  CVPointParameter_PointType_FASTX = 2,
  CVPointParameter_PointType_MSER = 3,
  CVPointParameter_PointType_ORB = 4,
  CVPointParameter_PointType_BRISK = 5,
  CVPointParameter_PointType_FREAK = 6,
  CVPointParameter_PointType_STAR = 7,
  CVPointParameter_PointType_SIFT = 8,
  CVPointParameter_PointType_SURF = 9,
  CVPointParameter_PointType_GFTT = 10,
  CVPointParameter_PointType_HARRIS = 11,
  CVPointParameter_PointType_DENSE = 12,
  CVPointParameter_PointType_SBLOB = 13,
  CVPointParameter_PointType_AKAZE = 14
};
bool CVPointParameter_PointType_IsValid(int value);
const CVPointParameter_PointType CVPointParameter_PointType_PointType_MIN = CVPointParameter_PointType_FAST;
const CVPointParameter_PointType CVPointParameter_PointType_PointType_MAX = CVPointParameter_PointType_AKAZE;
const int CVPointParameter_PointType_PointType_ARRAYSIZE = CVPointParameter_PointType_PointType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CVPointParameter_PointType_descriptor();
inline const ::std::string& CVPointParameter_PointType_Name(CVPointParameter_PointType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CVPointParameter_PointType_descriptor(), value);
}
inline bool CVPointParameter_PointType_Parse(
    const ::std::string& name, CVPointParameter_PointType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CVPointParameter_PointType>(
    CVPointParameter_PointType_descriptor(), name, value);
}
enum CVDescriptorParameter_DespType {
  CVDescriptorParameter_DespType_SIFT = 1,
  CVDescriptorParameter_DespType_SURF = 2,
  CVDescriptorParameter_DespType_BRIEF = 3,
  CVDescriptorParameter_DespType_BRISK = 4,
  CVDescriptorParameter_DespType_ORB = 5,
  CVDescriptorParameter_DespType_FREAK = 6,
  CVDescriptorParameter_DespType_OPPONENT = 7
};
bool CVDescriptorParameter_DespType_IsValid(int value);
const CVDescriptorParameter_DespType CVDescriptorParameter_DespType_DespType_MIN = CVDescriptorParameter_DespType_SIFT;
const CVDescriptorParameter_DespType CVDescriptorParameter_DespType_DespType_MAX = CVDescriptorParameter_DespType_OPPONENT;
const int CVDescriptorParameter_DespType_DespType_ARRAYSIZE = CVDescriptorParameter_DespType_DespType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CVDescriptorParameter_DespType_descriptor();
inline const ::std::string& CVDescriptorParameter_DespType_Name(CVDescriptorParameter_DespType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CVDescriptorParameter_DespType_descriptor(), value);
}
inline bool CVDescriptorParameter_DespType_Parse(
    const ::std::string& name, CVDescriptorParameter_DespType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CVDescriptorParameter_DespType>(
    CVDescriptorParameter_DespType_descriptor(), name, value);
}
enum CVMatchParameter_MatchType {
  CVMatchParameter_MatchType_BFL1 = 1,
  CVMatchParameter_MatchType_BFL2 = 2,
  CVMatchParameter_MatchType_BFH1 = 3,
  CVMatchParameter_MatchType_BFH2 = 4,
  CVMatchParameter_MatchType_FLANN = 5
};
bool CVMatchParameter_MatchType_IsValid(int value);
const CVMatchParameter_MatchType CVMatchParameter_MatchType_MatchType_MIN = CVMatchParameter_MatchType_BFL1;
const CVMatchParameter_MatchType CVMatchParameter_MatchType_MatchType_MAX = CVMatchParameter_MatchType_FLANN;
const int CVMatchParameter_MatchType_MatchType_ARRAYSIZE = CVMatchParameter_MatchType_MatchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CVMatchParameter_MatchType_descriptor();
inline const ::std::string& CVMatchParameter_MatchType_Name(CVMatchParameter_MatchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CVMatchParameter_MatchType_descriptor(), value);
}
inline bool CVMatchParameter_MatchType_Parse(
    const ::std::string& name, CVMatchParameter_MatchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CVMatchParameter_MatchType>(
    CVMatchParameter_MatchType_descriptor(), name, value);
}
enum LayerParameter_LayerType {
  LayerParameter_LayerType_NONE = 0,
  LayerParameter_LayerType_IMAGE = 1,
  LayerParameter_LayerType_IMAGE_PAIR = 2,
  LayerParameter_LayerType_VIDEO = 3,
  LayerParameter_LayerType_VIDEO_PAIR = 4,
  LayerParameter_LayerType_CAMERA = 5,
  LayerParameter_LayerType_CAMERA_PAIR = 6,
  LayerParameter_LayerType_DSP = 7,
  LayerParameter_LayerType_DSP_PAIR = 8,
  LayerParameter_LayerType_KINECT = 9,
  LayerParameter_LayerType_IMAGE_FOLDER = 11,
  LayerParameter_LayerType_IMAGE_PAIR_FOLDER = 12,
  LayerParameter_LayerType_ADABOOST = 21,
  LayerParameter_LayerType_MILTRACK = 31,
  LayerParameter_LayerType_BITTRACK = 32,
  LayerParameter_LayerType_SIFT_POINT = 41,
  LayerParameter_LayerType_SURF_POINT = 42,
  LayerParameter_LayerType_STAR_POINT = 43,
  LayerParameter_LayerType_BRISK_POINT = 44,
  LayerParameter_LayerType_FAST_POINT = 45,
  LayerParameter_LayerType_ORB_POINT = 46,
  LayerParameter_LayerType_KAZE_POINT = 47,
  LayerParameter_LayerType_HARRIS_POINT = 48,
  LayerParameter_LayerType_CV_POINT = 49,
  LayerParameter_LayerType_SIFT_DESP = 51,
  LayerParameter_LayerType_SURF_DESP = 52,
  LayerParameter_LayerType_STAR_DESP = 53,
  LayerParameter_LayerType_BRIEF_DESP = 54,
  LayerParameter_LayerType_BRISK_DESP = 55,
  LayerParameter_LayerType_FAST_DESP = 56,
  LayerParameter_LayerType_ORB_DESP = 57,
  LayerParameter_LayerType_KAZE_DESP = 58,
  LayerParameter_LayerType_CV_DESP = 59,
  LayerParameter_LayerType_KDTREE_MATCH = 61,
  LayerParameter_LayerType_EULAR_MATCH = 62,
  LayerParameter_LayerType_RANSAC = 63,
  LayerParameter_LayerType_BF_MATCH = 64,
  LayerParameter_LayerType_FLANN_MATCH = 65,
  LayerParameter_LayerType_EC_MATCH = 68,
  LayerParameter_LayerType_CV_MATCH = 69,
  LayerParameter_LayerType_SGM_MATCH = 71,
  LayerParameter_LayerType_EADP_MATCH = 72,
  LayerParameter_LayerType_TRIANG = 81,
  LayerParameter_LayerType_MXMUL = 82,
  LayerParameter_LayerType_CENTER_POS = 91,
  LayerParameter_LayerType_IA_EST = 94,
  LayerParameter_LayerType_IAICP_EST = 95,
  LayerParameter_LayerType_IANDT_EST = 96,
  LayerParameter_LayerType_SUPIX_SEG = 101,
  LayerParameter_LayerType_RECTIFY = 141
};
bool LayerParameter_LayerType_IsValid(int value);
const LayerParameter_LayerType LayerParameter_LayerType_LayerType_MIN = LayerParameter_LayerType_NONE;
const LayerParameter_LayerType LayerParameter_LayerType_LayerType_MAX = LayerParameter_LayerType_RECTIFY;
const int LayerParameter_LayerType_LayerType_ARRAYSIZE = LayerParameter_LayerType_LayerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LayerParameter_LayerType_descriptor();
inline const ::std::string& LayerParameter_LayerType_Name(LayerParameter_LayerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LayerParameter_LayerType_descriptor(), value);
}
inline bool LayerParameter_LayerType_Parse(
    const ::std::string& name, LayerParameter_LayerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LayerParameter_LayerType>(
    LayerParameter_LayerType_descriptor(), name, value);
}
// ===================================================================

class SvafTask : public ::google::protobuf::Message {
 public:
  SvafTask();
  virtual ~SvafTask();

  SvafTask(const SvafTask& from);

  inline SvafTask& operator=(const SvafTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SvafTask& default_instance();

  void Swap(SvafTask* other);

  // implements Message ----------------------------------------------

  SvafTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SvafTask& from);
  void MergeFrom(const SvafTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1 [default = "Untitled Algorithm"];
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // repeated .svaf.LayerParameter layer = 3;
  inline int layer_size() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 3;
  inline const ::svaf::LayerParameter& layer(int index) const;
  inline ::svaf::LayerParameter* mutable_layer(int index);
  inline ::svaf::LayerParameter* add_layer();
  inline const ::google::protobuf::RepeatedPtrField< ::svaf::LayerParameter >&
      layer() const;
  inline ::google::protobuf::RepeatedPtrField< ::svaf::LayerParameter >*
      mutable_layer();

  // optional int32 pause = 4 [default = 10];
  inline bool has_pause() const;
  inline void clear_pause();
  static const int kPauseFieldNumber = 4;
  inline ::google::protobuf::int32 pause() const;
  inline void set_pause(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:svaf.SvafTask)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_pause();
  inline void clear_has_pause();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_name_;
  ::std::string* name_;
  ::std::string* version_;
  ::google::protobuf::RepeatedPtrField< ::svaf::LayerParameter > layer_;
  ::google::protobuf::int32 pause_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static SvafTask* default_instance_;
};
// -------------------------------------------------------------------

class ImageOperationParameter : public ::google::protobuf::Message {
 public:
  ImageOperationParameter();
  virtual ~ImageOperationParameter();

  ImageOperationParameter(const ImageOperationParameter& from);

  inline ImageOperationParameter& operator=(const ImageOperationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageOperationParameter& default_instance();

  void Swap(ImageOperationParameter* other);

  // implements Message ----------------------------------------------

  ImageOperationParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageOperationParameter& from);
  void MergeFrom(const ImageOperationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.ImageOperationParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static ImageOperationParameter* default_instance_;
};
// -------------------------------------------------------------------

class SuperPixelSegmentParameter : public ::google::protobuf::Message {
 public:
  SuperPixelSegmentParameter();
  virtual ~SuperPixelSegmentParameter();

  SuperPixelSegmentParameter(const SuperPixelSegmentParameter& from);

  inline SuperPixelSegmentParameter& operator=(const SuperPixelSegmentParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuperPixelSegmentParameter& default_instance();

  void Swap(SuperPixelSegmentParameter* other);

  // implements Message ----------------------------------------------

  SuperPixelSegmentParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SuperPixelSegmentParameter& from);
  void MergeFrom(const SuperPixelSegmentParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 K = 1 [default = 400];
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 1;
  inline ::google::protobuf::int32 k() const;
  inline void set_k(::google::protobuf::int32 value);

  // optional int32 M = 2 [default = 10];
  inline bool has_m() const;
  inline void clear_m();
  static const int kMFieldNumber = 2;
  inline ::google::protobuf::int32 m() const;
  inline void set_m(::google::protobuf::int32 value);

  // optional bool optint = 3 [default = true];
  inline bool has_optint() const;
  inline void clear_optint();
  static const int kOptintFieldNumber = 3;
  inline bool optint() const;
  inline void set_optint(bool value);

  // optional bool saveseg = 4 [default = false];
  inline bool has_saveseg() const;
  inline void clear_saveseg();
  static const int kSavesegFieldNumber = 4;
  inline bool saveseg() const;
  inline void set_saveseg(bool value);

  // optional string segname = 5 [default = "./supix.seg"];
  inline bool has_segname() const;
  inline void clear_segname();
  static const int kSegnameFieldNumber = 5;
  inline const ::std::string& segname() const;
  inline void set_segname(const ::std::string& value);
  inline void set_segname(const char* value);
  inline void set_segname(const char* value, size_t size);
  inline ::std::string* mutable_segname();
  inline ::std::string* release_segname();
  inline void set_allocated_segname(::std::string* segname);

  // @@protoc_insertion_point(class_scope:svaf.SuperPixelSegmentParameter)
 private:
  inline void set_has_k();
  inline void clear_has_k();
  inline void set_has_m();
  inline void clear_has_m();
  inline void set_has_optint();
  inline void clear_has_optint();
  inline void set_has_saveseg();
  inline void clear_has_saveseg();
  inline void set_has_segname();
  inline void clear_has_segname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 k_;
  ::google::protobuf::int32 m_;
  static ::std::string* _default_segname_;
  ::std::string* segname_;
  bool optint_;
  bool saveseg_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static SuperPixelSegmentParameter* default_instance_;
};
// -------------------------------------------------------------------

class ImageResizeParameter : public ::google::protobuf::Message {
 public:
  ImageResizeParameter();
  virtual ~ImageResizeParameter();

  ImageResizeParameter(const ImageResizeParameter& from);

  inline ImageResizeParameter& operator=(const ImageResizeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageResizeParameter& default_instance();

  void Swap(ImageResizeParameter* other);

  // implements Message ----------------------------------------------

  ImageResizeParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageResizeParameter& from);
  void MergeFrom(const ImageResizeParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.ImageResizeParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static ImageResizeParameter* default_instance_;
};
// -------------------------------------------------------------------

class ImageCropParameter : public ::google::protobuf::Message {
 public:
  ImageCropParameter();
  virtual ~ImageCropParameter();

  ImageCropParameter(const ImageCropParameter& from);

  inline ImageCropParameter& operator=(const ImageCropParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageCropParameter& default_instance();

  void Swap(ImageCropParameter* other);

  // implements Message ----------------------------------------------

  ImageCropParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageCropParameter& from);
  void MergeFrom(const ImageCropParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.ImageCropParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static ImageCropParameter* default_instance_;
};
// -------------------------------------------------------------------

class StereoOperationParameter : public ::google::protobuf::Message {
 public:
  StereoOperationParameter();
  virtual ~StereoOperationParameter();

  StereoOperationParameter(const StereoOperationParameter& from);

  inline StereoOperationParameter& operator=(const StereoOperationParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StereoOperationParameter& default_instance();

  void Swap(StereoOperationParameter* other);

  // implements Message ----------------------------------------------

  StereoOperationParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StereoOperationParameter& from);
  void MergeFrom(const StereoOperationParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.StereoOperationParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static StereoOperationParameter* default_instance_;
};
// -------------------------------------------------------------------

class StereoRectifyParameter : public ::google::protobuf::Message {
 public:
  StereoRectifyParameter();
  virtual ~StereoRectifyParameter();

  StereoRectifyParameter(const StereoRectifyParameter& from);

  inline StereoRectifyParameter& operator=(const StereoRectifyParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StereoRectifyParameter& default_instance();

  void Swap(StereoRectifyParameter* other);

  // implements Message ----------------------------------------------

  StereoRectifyParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StereoRectifyParameter& from);
  void MergeFrom(const StereoRectifyParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string filename = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 1;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // @@protoc_insertion_point(class_scope:svaf.StereoRectifyParameter)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* filename_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static StereoRectifyParameter* default_instance_;
};
// -------------------------------------------------------------------

class DataParameter : public ::google::protobuf::Message {
 public:
  DataParameter();
  virtual ~DataParameter();

  DataParameter(const DataParameter& from);

  inline DataParameter& operator=(const DataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataParameter& default_instance();

  void Swap(DataParameter* other);

  // implements Message ----------------------------------------------

  DataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataParameter& from);
  void MergeFrom(const DataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool color = 1;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 1;
  inline bool color() const;
  inline void set_color(bool value);

  // @@protoc_insertion_point(class_scope:svaf.DataParameter)
 private:
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool color_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static DataParameter* default_instance_;
};
// -------------------------------------------------------------------

class ImageDataParameter : public ::google::protobuf::Message {
 public:
  ImageDataParameter();
  virtual ~ImageDataParameter();

  ImageDataParameter(const ImageDataParameter& from);

  inline ImageDataParameter& operator=(const ImageDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageDataParameter& default_instance();

  void Swap(ImageDataParameter* other);

  // implements Message ----------------------------------------------

  ImageDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageDataParameter& from);
  void MergeFrom(const ImageDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name = 1;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name(int index) const;
  inline ::std::string* mutable_name(int index);
  inline void set_name(int index, const ::std::string& value);
  inline void set_name(int index, const char* value);
  inline void set_name(int index, const char* value, size_t size);
  inline ::std::string* add_name();
  inline void add_name(const ::std::string& value);
  inline void add_name(const char* value);
  inline void add_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // @@protoc_insertion_point(class_scope:svaf.ImageDataParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static ImageDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class BinocularPair : public ::google::protobuf::Message {
 public:
  BinocularPair();
  virtual ~BinocularPair();

  BinocularPair(const BinocularPair& from);

  inline BinocularPair& operator=(const BinocularPair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BinocularPair& default_instance();

  void Swap(BinocularPair* other);

  // implements Message ----------------------------------------------

  BinocularPair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BinocularPair& from);
  void MergeFrom(const BinocularPair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string left = 1;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 1;
  inline const ::std::string& left() const;
  inline void set_left(const ::std::string& value);
  inline void set_left(const char* value);
  inline void set_left(const char* value, size_t size);
  inline ::std::string* mutable_left();
  inline ::std::string* release_left();
  inline void set_allocated_left(::std::string* left);

  // optional string right = 2;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 2;
  inline const ::std::string& right() const;
  inline void set_right(const ::std::string& value);
  inline void set_right(const char* value);
  inline void set_right(const char* value, size_t size);
  inline ::std::string* mutable_right();
  inline ::std::string* release_right();
  inline void set_allocated_right(::std::string* right);

  // @@protoc_insertion_point(class_scope:svaf.BinocularPair)
 private:
  inline void set_has_left();
  inline void clear_has_left();
  inline void set_has_right();
  inline void clear_has_right();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* left_;
  ::std::string* right_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static BinocularPair* default_instance_;
};
// -------------------------------------------------------------------

class ImagePairParameter : public ::google::protobuf::Message {
 public:
  ImagePairParameter();
  virtual ~ImagePairParameter();

  ImagePairParameter(const ImagePairParameter& from);

  inline ImagePairParameter& operator=(const ImagePairParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImagePairParameter& default_instance();

  void Swap(ImagePairParameter* other);

  // implements Message ----------------------------------------------

  ImagePairParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImagePairParameter& from);
  void MergeFrom(const ImagePairParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .svaf.BinocularPair pair = 1;
  inline int pair_size() const;
  inline void clear_pair();
  static const int kPairFieldNumber = 1;
  inline const ::svaf::BinocularPair& pair(int index) const;
  inline ::svaf::BinocularPair* mutable_pair(int index);
  inline ::svaf::BinocularPair* add_pair();
  inline const ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >&
      pair() const;
  inline ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >*
      mutable_pair();

  // repeated .svaf.BinocularPair _pair = 255;
  inline int _pair_size() const;
  inline void clear__pair();
  static const int kPairFieldNumber_255 = 255;
  inline const ::svaf::BinocularPair& _pair(int index) const;
  inline ::svaf::BinocularPair* mutable__pair(int index);
  inline ::svaf::BinocularPair* add__pair();
  inline const ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >&
      _pair() const;
  inline ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >*
      mutable__pair();

  // @@protoc_insertion_point(class_scope:svaf.ImagePairParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair > pair_;
  ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair > _pair_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static ImagePairParameter* default_instance_;
};
// -------------------------------------------------------------------

class VideoDataParameter : public ::google::protobuf::Message {
 public:
  VideoDataParameter();
  virtual ~VideoDataParameter();

  VideoDataParameter(const VideoDataParameter& from);

  inline VideoDataParameter& operator=(const VideoDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoDataParameter& default_instance();

  void Swap(VideoDataParameter* other);

  // implements Message ----------------------------------------------

  VideoDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoDataParameter& from);
  void MergeFrom(const VideoDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name = 1;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name(int index) const;
  inline ::std::string* mutable_name(int index);
  inline void set_name(int index, const ::std::string& value);
  inline void set_name(int index, const char* value);
  inline void set_name(int index, const char* value, size_t size);
  inline ::std::string* add_name();
  inline void add_name(const ::std::string& value);
  inline void add_name(const char* value);
  inline void add_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // @@protoc_insertion_point(class_scope:svaf.VideoDataParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static VideoDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class VideoPairParameter : public ::google::protobuf::Message {
 public:
  VideoPairParameter();
  virtual ~VideoPairParameter();

  VideoPairParameter(const VideoPairParameter& from);

  inline VideoPairParameter& operator=(const VideoPairParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoPairParameter& default_instance();

  void Swap(VideoPairParameter* other);

  // implements Message ----------------------------------------------

  VideoPairParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoPairParameter& from);
  void MergeFrom(const VideoPairParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .svaf.BinocularPair pair = 1;
  inline int pair_size() const;
  inline void clear_pair();
  static const int kPairFieldNumber = 1;
  inline const ::svaf::BinocularPair& pair(int index) const;
  inline ::svaf::BinocularPair* mutable_pair(int index);
  inline ::svaf::BinocularPair* add_pair();
  inline const ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >&
      pair() const;
  inline ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >*
      mutable_pair();

  // repeated .svaf.BinocularPair _pair = 255;
  inline int _pair_size() const;
  inline void clear__pair();
  static const int kPairFieldNumber_255 = 255;
  inline const ::svaf::BinocularPair& _pair(int index) const;
  inline ::svaf::BinocularPair* mutable__pair(int index);
  inline ::svaf::BinocularPair* add__pair();
  inline const ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >&
      _pair() const;
  inline ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >*
      mutable__pair();

  // @@protoc_insertion_point(class_scope:svaf.VideoPairParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair > pair_;
  ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair > _pair_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static VideoPairParameter* default_instance_;
};
// -------------------------------------------------------------------

class CameraDataParameter : public ::google::protobuf::Message {
 public:
  CameraDataParameter();
  virtual ~CameraDataParameter();

  CameraDataParameter(const CameraDataParameter& from);

  inline CameraDataParameter& operator=(const CameraDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraDataParameter& default_instance();

  void Swap(CameraDataParameter* other);

  // implements Message ----------------------------------------------

  CameraDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraDataParameter& from);
  void MergeFrom(const CameraDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 camera = 1;
  inline bool has_camera() const;
  inline void clear_camera();
  static const int kCameraFieldNumber = 1;
  inline ::google::protobuf::int32 camera() const;
  inline void set_camera(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:svaf.CameraDataParameter)
 private:
  inline void set_has_camera();
  inline void clear_has_camera();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 camera_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static CameraDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class CameraPairParameter : public ::google::protobuf::Message {
 public:
  CameraPairParameter();
  virtual ~CameraPairParameter();

  CameraPairParameter(const CameraPairParameter& from);

  inline CameraPairParameter& operator=(const CameraPairParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraPairParameter& default_instance();

  void Swap(CameraPairParameter* other);

  // implements Message ----------------------------------------------

  CameraPairParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraPairParameter& from);
  void MergeFrom(const CameraPairParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 leftcamera = 1;
  inline bool has_leftcamera() const;
  inline void clear_leftcamera();
  static const int kLeftcameraFieldNumber = 1;
  inline ::google::protobuf::int32 leftcamera() const;
  inline void set_leftcamera(::google::protobuf::int32 value);

  // optional int32 rightcamera = 2;
  inline bool has_rightcamera() const;
  inline void clear_rightcamera();
  static const int kRightcameraFieldNumber = 2;
  inline ::google::protobuf::int32 rightcamera() const;
  inline void set_rightcamera(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:svaf.CameraPairParameter)
 private:
  inline void set_has_leftcamera();
  inline void clear_has_leftcamera();
  inline void set_has_rightcamera();
  inline void clear_has_rightcamera();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 leftcamera_;
  ::google::protobuf::int32 rightcamera_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static CameraPairParameter* default_instance_;
};
// -------------------------------------------------------------------

class DSPCameraDataParameter : public ::google::protobuf::Message {
 public:
  DSPCameraDataParameter();
  virtual ~DSPCameraDataParameter();

  DSPCameraDataParameter(const DSPCameraDataParameter& from);

  inline DSPCameraDataParameter& operator=(const DSPCameraDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DSPCameraDataParameter& default_instance();

  void Swap(DSPCameraDataParameter* other);

  // implements Message ----------------------------------------------

  DSPCameraDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DSPCameraDataParameter& from);
  void MergeFrom(const DSPCameraDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 chns = 1;
  inline bool has_chns() const;
  inline void clear_chns();
  static const int kChnsFieldNumber = 1;
  inline ::google::protobuf::int32 chns() const;
  inline void set_chns(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:svaf.DSPCameraDataParameter)
 private:
  inline void set_has_chns();
  inline void clear_has_chns();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 chns_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static DSPCameraDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class DSPCameraPairParameter : public ::google::protobuf::Message {
 public:
  DSPCameraPairParameter();
  virtual ~DSPCameraPairParameter();

  DSPCameraPairParameter(const DSPCameraPairParameter& from);

  inline DSPCameraPairParameter& operator=(const DSPCameraPairParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DSPCameraPairParameter& default_instance();

  void Swap(DSPCameraPairParameter* other);

  // implements Message ----------------------------------------------

  DSPCameraPairParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DSPCameraPairParameter& from);
  void MergeFrom(const DSPCameraPairParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 chns = 1;
  inline bool has_chns() const;
  inline void clear_chns();
  static const int kChnsFieldNumber = 1;
  inline ::google::protobuf::int32 chns() const;
  inline void set_chns(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:svaf.DSPCameraPairParameter)
 private:
  inline void set_has_chns();
  inline void clear_has_chns();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 chns_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static DSPCameraPairParameter* default_instance_;
};
// -------------------------------------------------------------------

class KinectDataParameter : public ::google::protobuf::Message {
 public:
  KinectDataParameter();
  virtual ~KinectDataParameter();

  KinectDataParameter(const KinectDataParameter& from);

  inline KinectDataParameter& operator=(const KinectDataParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KinectDataParameter& default_instance();

  void Swap(KinectDataParameter* other);

  // implements Message ----------------------------------------------

  KinectDataParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KinectDataParameter& from);
  void MergeFrom(const KinectDataParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.KinectDataParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static KinectDataParameter* default_instance_;
};
// -------------------------------------------------------------------

class ImageFolderParameter : public ::google::protobuf::Message {
 public:
  ImageFolderParameter();
  virtual ~ImageFolderParameter();

  ImageFolderParameter(const ImageFolderParameter& from);

  inline ImageFolderParameter& operator=(const ImageFolderParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageFolderParameter& default_instance();

  void Swap(ImageFolderParameter* other);

  // implements Message ----------------------------------------------

  ImageFolderParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageFolderParameter& from);
  void MergeFrom(const ImageFolderParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string name = 1;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name(int index) const;
  inline ::std::string* mutable_name(int index);
  inline void set_name(int index, const ::std::string& value);
  inline void set_name(int index, const char* value);
  inline void set_name(int index, const char* value, size_t size);
  inline ::std::string* add_name();
  inline void add_name(const ::std::string& value);
  inline void add_name(const char* value);
  inline void add_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // @@protoc_insertion_point(class_scope:svaf.ImageFolderParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static ImageFolderParameter* default_instance_;
};
// -------------------------------------------------------------------

class ImagePairFolderParameter : public ::google::protobuf::Message {
 public:
  ImagePairFolderParameter();
  virtual ~ImagePairFolderParameter();

  ImagePairFolderParameter(const ImagePairFolderParameter& from);

  inline ImagePairFolderParameter& operator=(const ImagePairFolderParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImagePairFolderParameter& default_instance();

  void Swap(ImagePairFolderParameter* other);

  // implements Message ----------------------------------------------

  ImagePairFolderParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImagePairFolderParameter& from);
  void MergeFrom(const ImagePairFolderParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .svaf.BinocularPair pair = 1;
  inline int pair_size() const;
  inline void clear_pair();
  static const int kPairFieldNumber = 1;
  inline const ::svaf::BinocularPair& pair(int index) const;
  inline ::svaf::BinocularPair* mutable_pair(int index);
  inline ::svaf::BinocularPair* add_pair();
  inline const ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >&
      pair() const;
  inline ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >*
      mutable_pair();

  // repeated .svaf.BinocularPair _pair = 255;
  inline int _pair_size() const;
  inline void clear__pair();
  static const int kPairFieldNumber_255 = 255;
  inline const ::svaf::BinocularPair& _pair(int index) const;
  inline ::svaf::BinocularPair* mutable__pair(int index);
  inline ::svaf::BinocularPair* add__pair();
  inline const ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >&
      _pair() const;
  inline ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >*
      mutable__pair();

  // @@protoc_insertion_point(class_scope:svaf.ImagePairFolderParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair > pair_;
  ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair > _pair_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static ImagePairFolderParameter* default_instance_;
};
// -------------------------------------------------------------------

class RecognizeParameter : public ::google::protobuf::Message {
 public:
  RecognizeParameter();
  virtual ~RecognizeParameter();

  RecognizeParameter(const RecognizeParameter& from);

  inline RecognizeParameter& operator=(const RecognizeParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecognizeParameter& default_instance();

  void Swap(RecognizeParameter* other);

  // implements Message ----------------------------------------------

  RecognizeParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecognizeParameter& from);
  void MergeFrom(const RecognizeParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.RecognizeParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static RecognizeParameter* default_instance_;
};
// -------------------------------------------------------------------

class ROIExtention : public ::google::protobuf::Message {
 public:
  ROIExtention();
  virtual ~ROIExtention();

  ROIExtention(const ROIExtention& from);

  inline ROIExtention& operator=(const ROIExtention& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ROIExtention& default_instance();

  void Swap(ROIExtention* other);

  // implements Message ----------------------------------------------

  ROIExtention* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ROIExtention& from);
  void MergeFrom(const ROIExtention& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 left = 1 [default = 0];
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 1;
  inline ::google::protobuf::int32 left() const;
  inline void set_left(::google::protobuf::int32 value);

  // optional int32 right = 2 [default = 0];
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 2;
  inline ::google::protobuf::int32 right() const;
  inline void set_right(::google::protobuf::int32 value);

  // optional int32 top = 3 [default = 0];
  inline bool has_top() const;
  inline void clear_top();
  static const int kTopFieldNumber = 3;
  inline ::google::protobuf::int32 top() const;
  inline void set_top(::google::protobuf::int32 value);

  // optional int32 bottom = 4 [default = 0];
  inline bool has_bottom() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 4;
  inline ::google::protobuf::int32 bottom() const;
  inline void set_bottom(::google::protobuf::int32 value);

  // optional int32 xshift = 5 [default = 0];
  inline bool has_xshift() const;
  inline void clear_xshift();
  static const int kXshiftFieldNumber = 5;
  inline ::google::protobuf::int32 xshift() const;
  inline void set_xshift(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:svaf.ROIExtention)
 private:
  inline void set_has_left();
  inline void clear_has_left();
  inline void set_has_right();
  inline void clear_has_right();
  inline void set_has_top();
  inline void clear_has_top();
  inline void set_has_bottom();
  inline void clear_has_bottom();
  inline void set_has_xshift();
  inline void clear_has_xshift();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 left_;
  ::google::protobuf::int32 right_;
  ::google::protobuf::int32 top_;
  ::google::protobuf::int32 bottom_;
  ::google::protobuf::int32 xshift_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static ROIExtention* default_instance_;
};
// -------------------------------------------------------------------

class AdaboostParameter : public ::google::protobuf::Message {
 public:
  AdaboostParameter();
  virtual ~AdaboostParameter();

  AdaboostParameter(const AdaboostParameter& from);

  inline AdaboostParameter& operator=(const AdaboostParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdaboostParameter& default_instance();

  void Swap(AdaboostParameter* other);

  // implements Message ----------------------------------------------

  AdaboostParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdaboostParameter& from);
  void MergeFrom(const AdaboostParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string detector = 1;
  inline bool has_detector() const;
  inline void clear_detector();
  static const int kDetectorFieldNumber = 1;
  inline const ::std::string& detector() const;
  inline void set_detector(const ::std::string& value);
  inline void set_detector(const char* value);
  inline void set_detector(const char* value, size_t size);
  inline ::std::string* mutable_detector();
  inline ::std::string* release_detector();
  inline void set_allocated_detector(::std::string* detector);

  // optional bool sync_frame = 2 [default = false];
  inline bool has_sync_frame() const;
  inline void clear_sync_frame();
  static const int kSyncFrameFieldNumber = 2;
  inline bool sync_frame() const;
  inline void set_sync_frame(bool value);

  // optional bool sync_video = 3 [default = false];
  inline bool has_sync_video() const;
  inline void clear_sync_video();
  static const int kSyncVideoFieldNumber = 3;
  inline bool sync_video() const;
  inline void set_sync_video(bool value);

  // optional bool sync_epipolar = 4 [default = false];
  inline bool has_sync_epipolar() const;
  inline void clear_sync_epipolar();
  static const int kSyncEpipolarFieldNumber = 4;
  inline bool sync_epipolar() const;
  inline void set_sync_epipolar(bool value);

  // optional float thresh = 5 [default = 0];
  inline bool has_thresh() const;
  inline void clear_thresh();
  static const int kThreshFieldNumber = 5;
  inline float thresh() const;
  inline void set_thresh(float value);

  // optional float nms = 6 [default = 0.65];
  inline bool has_nms() const;
  inline void clear_nms();
  static const int kNmsFieldNumber = 6;
  inline float nms() const;
  inline void set_nms(float value);

  // optional .svaf.ROIExtention pad_rect = 7;
  inline bool has_pad_rect() const;
  inline void clear_pad_rect();
  static const int kPadRectFieldNumber = 7;
  inline const ::svaf::ROIExtention& pad_rect() const;
  inline ::svaf::ROIExtention* mutable_pad_rect();
  inline ::svaf::ROIExtention* release_pad_rect();
  inline void set_allocated_pad_rect(::svaf::ROIExtention* pad_rect);

  // @@protoc_insertion_point(class_scope:svaf.AdaboostParameter)
 private:
  inline void set_has_detector();
  inline void clear_has_detector();
  inline void set_has_sync_frame();
  inline void clear_has_sync_frame();
  inline void set_has_sync_video();
  inline void clear_has_sync_video();
  inline void set_has_sync_epipolar();
  inline void clear_has_sync_epipolar();
  inline void set_has_thresh();
  inline void clear_has_thresh();
  inline void set_has_nms();
  inline void clear_has_nms();
  inline void set_has_pad_rect();
  inline void clear_has_pad_rect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* detector_;
  bool sync_frame_;
  bool sync_video_;
  bool sync_epipolar_;
  float thresh_;
  ::svaf::ROIExtention* pad_rect_;
  float nms_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static AdaboostParameter* default_instance_;
};
// -------------------------------------------------------------------

class TrackParameter : public ::google::protobuf::Message {
 public:
  TrackParameter();
  virtual ~TrackParameter();

  TrackParameter(const TrackParameter& from);

  inline TrackParameter& operator=(const TrackParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackParameter& default_instance();

  void Swap(TrackParameter* other);

  // implements Message ----------------------------------------------

  TrackParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackParameter& from);
  void MergeFrom(const TrackParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.TrackParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static TrackParameter* default_instance_;
};
// -------------------------------------------------------------------

class InitRectParameter : public ::google::protobuf::Message {
 public:
  InitRectParameter();
  virtual ~InitRectParameter();

  InitRectParameter(const InitRectParameter& from);

  inline InitRectParameter& operator=(const InitRectParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InitRectParameter& default_instance();

  void Swap(InitRectParameter* other);

  // implements Message ----------------------------------------------

  InitRectParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitRectParameter& from);
  void MergeFrom(const InitRectParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // optional uint32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // optional uint32 width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 4;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:svaf.InitRectParameter)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static InitRectParameter* default_instance_;
};
// -------------------------------------------------------------------

class MilTrackParameter : public ::google::protobuf::Message {
 public:
  MilTrackParameter();
  virtual ~MilTrackParameter();

  MilTrackParameter(const MilTrackParameter& from);

  inline MilTrackParameter& operator=(const MilTrackParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MilTrackParameter& default_instance();

  void Swap(MilTrackParameter* other);

  // implements Message ----------------------------------------------

  MilTrackParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MilTrackParameter& from);
  void MergeFrom(const MilTrackParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MilTrackParameter_InitType InitType;
  static const InitType MOUSE = MilTrackParameter_InitType_MOUSE;
  static const InitType SELECT = MilTrackParameter_InitType_SELECT;
  static const InitType AUTORECT = MilTrackParameter_InitType_AUTORECT;
  static const InitType ADABOOST = MilTrackParameter_InitType_ADABOOST;
  static inline bool InitType_IsValid(int value) {
    return MilTrackParameter_InitType_IsValid(value);
  }
  static const InitType InitType_MIN =
    MilTrackParameter_InitType_InitType_MIN;
  static const InitType InitType_MAX =
    MilTrackParameter_InitType_InitType_MAX;
  static const int InitType_ARRAYSIZE =
    MilTrackParameter_InitType_InitType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  InitType_descriptor() {
    return MilTrackParameter_InitType_descriptor();
  }
  static inline const ::std::string& InitType_Name(InitType value) {
    return MilTrackParameter_InitType_Name(value);
  }
  static inline bool InitType_Parse(const ::std::string& name,
      InitType* value) {
    return MilTrackParameter_InitType_Parse(name, value);
  }

  typedef MilTrackParameter_TrackType TrackType;
  static const TrackType MIL = MilTrackParameter_TrackType_MIL;
  static const TrackType ADA = MilTrackParameter_TrackType_ADA;
  static const TrackType MIL_GRAY = MilTrackParameter_TrackType_MIL_GRAY;
  static const TrackType MIL_RGB = MilTrackParameter_TrackType_MIL_RGB;
  static const TrackType MIL_LUV = MilTrackParameter_TrackType_MIL_LUV;
  static const TrackType MIL_HSV = MilTrackParameter_TrackType_MIL_HSV;
  static inline bool TrackType_IsValid(int value) {
    return MilTrackParameter_TrackType_IsValid(value);
  }
  static const TrackType TrackType_MIN =
    MilTrackParameter_TrackType_TrackType_MIN;
  static const TrackType TrackType_MAX =
    MilTrackParameter_TrackType_TrackType_MAX;
  static const int TrackType_ARRAYSIZE =
    MilTrackParameter_TrackType_TrackType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrackType_descriptor() {
    return MilTrackParameter_TrackType_descriptor();
  }
  static inline const ::std::string& TrackType_Name(TrackType value) {
    return MilTrackParameter_TrackType_Name(value);
  }
  static inline bool TrackType_Parse(const ::std::string& name,
      TrackType* value) {
    return MilTrackParameter_TrackType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .svaf.MilTrackParameter.InitType init_type = 1 [default = AUTORECT];
  inline bool has_init_type() const;
  inline void clear_init_type();
  static const int kInitTypeFieldNumber = 1;
  inline ::svaf::MilTrackParameter_InitType init_type() const;
  inline void set_init_type(::svaf::MilTrackParameter_InitType value);

  // optional .svaf.MilTrackParameter.TrackType track_type = 2 [default = MIL];
  inline bool has_track_type() const;
  inline void clear_track_type();
  static const int kTrackTypeFieldNumber = 2;
  inline ::svaf::MilTrackParameter_TrackType track_type() const;
  inline void set_track_type(::svaf::MilTrackParameter_TrackType value);

  // optional int32 track_count = 3 [default = 20];
  inline bool has_track_count() const;
  inline void clear_track_count();
  static const int kTrackCountFieldNumber = 3;
  inline ::google::protobuf::int32 track_count() const;
  inline void set_track_count(::google::protobuf::int32 value);

  // repeated .svaf.InitRectParameter init_rect = 4;
  inline int init_rect_size() const;
  inline void clear_init_rect();
  static const int kInitRectFieldNumber = 4;
  inline const ::svaf::InitRectParameter& init_rect(int index) const;
  inline ::svaf::InitRectParameter* mutable_init_rect(int index);
  inline ::svaf::InitRectParameter* add_init_rect();
  inline const ::google::protobuf::RepeatedPtrField< ::svaf::InitRectParameter >&
      init_rect() const;
  inline ::google::protobuf::RepeatedPtrField< ::svaf::InitRectParameter >*
      mutable_init_rect();

  // optional uint32 tr_width = 5 [default = 200];
  inline bool has_tr_width() const;
  inline void clear_tr_width();
  static const int kTrWidthFieldNumber = 5;
  inline ::google::protobuf::uint32 tr_width() const;
  inline void set_tr_width(::google::protobuf::uint32 value);

  // optional uint32 tr_height = 6 [default = 150];
  inline bool has_tr_height() const;
  inline void clear_tr_height();
  static const int kTrHeightFieldNumber = 6;
  inline ::google::protobuf::uint32 tr_height() const;
  inline void set_tr_height(::google::protobuf::uint32 value);

  // optional float scalefactor = 7 [default = 0.5];
  inline bool has_scalefactor() const;
  inline void clear_scalefactor();
  static const int kScalefactorFieldNumber = 7;
  inline float scalefactor() const;
  inline void set_scalefactor(float value);

  // optional uint32 init_negnum = 11 [default = 65];
  inline bool has_init_negnum() const;
  inline void clear_init_negnum();
  static const int kInitNegnumFieldNumber = 11;
  inline ::google::protobuf::uint32 init_negnum() const;
  inline void set_init_negnum(::google::protobuf::uint32 value);

  // optional uint32 negnum = 12 [default = 65];
  inline bool has_negnum() const;
  inline void clear_negnum();
  static const int kNegnumFieldNumber = 12;
  inline ::google::protobuf::uint32 negnum() const;
  inline void set_negnum(::google::protobuf::uint32 value);

  // optional uint32 posmax = 13 [default = 100000];
  inline bool has_posmax() const;
  inline void clear_posmax();
  static const int kPosmaxFieldNumber = 13;
  inline ::google::protobuf::uint32 posmax() const;
  inline void set_posmax(::google::protobuf::uint32 value);

  // optional uint32 srchwinsz = 14 [default = 25];
  inline bool has_srchwinsz() const;
  inline void clear_srchwinsz();
  static const int kSrchwinszFieldNumber = 14;
  inline ::google::protobuf::uint32 srchwinsz() const;
  inline void set_srchwinsz(::google::protobuf::uint32 value);

  // optional uint32 negsample_strat = 15 [default = 1];
  inline bool has_negsample_strat() const;
  inline void clear_negsample_strat();
  static const int kNegsampleStratFieldNumber = 15;
  inline ::google::protobuf::uint32 negsample_strat() const;
  inline void set_negsample_strat(::google::protobuf::uint32 value);

  // optional uint32 numfeat = 16 [default = 250];
  inline bool has_numfeat() const;
  inline void clear_numfeat();
  static const int kNumfeatFieldNumber = 16;
  inline ::google::protobuf::uint32 numfeat() const;
  inline void set_numfeat(::google::protobuf::uint32 value);

  // optional uint32 numsel = 17 [default = 50];
  inline bool has_numsel() const;
  inline void clear_numsel();
  static const int kNumselFieldNumber = 17;
  inline ::google::protobuf::uint32 numsel() const;
  inline void set_numsel(::google::protobuf::uint32 value);

  // optional float lrate = 21 [default = 0.85];
  inline bool has_lrate() const;
  inline void clear_lrate();
  static const int kLrateFieldNumber = 21;
  inline float lrate() const;
  inline void set_lrate(float value);

  // optional float posrad = 22 [default = 1];
  inline bool has_posrad() const;
  inline void clear_posrad();
  static const int kPosradFieldNumber = 22;
  inline float posrad() const;
  inline void set_posrad(float value);

  // optional float init_posrad = 23 [default = 3];
  inline bool has_init_posrad() const;
  inline void clear_init_posrad();
  static const int kInitPosradFieldNumber = 23;
  inline float init_posrad() const;
  inline void set_init_posrad(float value);

  // optional uint32 haarmin_rectnum = 24 [default = 2];
  inline bool has_haarmin_rectnum() const;
  inline void clear_haarmin_rectnum();
  static const int kHaarminRectnumFieldNumber = 24;
  inline ::google::protobuf::uint32 haarmin_rectnum() const;
  inline void set_haarmin_rectnum(::google::protobuf::uint32 value);

  // optional uint32 haarmax_rectnum = 25 [default = 6];
  inline bool has_haarmax_rectnum() const;
  inline void clear_haarmax_rectnum();
  static const int kHaarmaxRectnumFieldNumber = 25;
  inline ::google::protobuf::uint32 haarmax_rectnum() const;
  inline void set_haarmax_rectnum(::google::protobuf::uint32 value);

  // optional bool uselogr = 29 [default = true];
  inline bool has_uselogr() const;
  inline void clear_uselogr();
  static const int kUselogrFieldNumber = 29;
  inline bool uselogr() const;
  inline void set_uselogr(bool value);

  // optional bool tss = 31 [default = false];
  inline bool has_tss() const;
  inline void clear_tss();
  static const int kTssFieldNumber = 31;
  inline bool tss() const;
  inline void set_tss(bool value);

  // optional bool pool = 32 [default = false];
  inline bool has_pool() const;
  inline void clear_pool();
  static const int kPoolFieldNumber = 32;
  inline bool pool() const;
  inline void set_pool(bool value);

  // optional bool sync = 33 [default = false];
  inline bool has_sync() const;
  inline void clear_sync();
  static const int kSyncFieldNumber = 33;
  inline bool sync() const;
  inline void set_sync(bool value);

  // optional bool mixfeat = 34 [default = false];
  inline bool has_mixfeat() const;
  inline void clear_mixfeat();
  static const int kMixfeatFieldNumber = 34;
  inline bool mixfeat() const;
  inline void set_mixfeat(bool value);

  // optional bool showprob = 35 [default = false];
  inline bool has_showprob() const;
  inline void clear_showprob();
  static const int kShowprobFieldNumber = 35;
  inline bool showprob() const;
  inline void set_showprob(bool value);

  // @@protoc_insertion_point(class_scope:svaf.MilTrackParameter)
 private:
  inline void set_has_init_type();
  inline void clear_has_init_type();
  inline void set_has_track_type();
  inline void clear_has_track_type();
  inline void set_has_track_count();
  inline void clear_has_track_count();
  inline void set_has_tr_width();
  inline void clear_has_tr_width();
  inline void set_has_tr_height();
  inline void clear_has_tr_height();
  inline void set_has_scalefactor();
  inline void clear_has_scalefactor();
  inline void set_has_init_negnum();
  inline void clear_has_init_negnum();
  inline void set_has_negnum();
  inline void clear_has_negnum();
  inline void set_has_posmax();
  inline void clear_has_posmax();
  inline void set_has_srchwinsz();
  inline void clear_has_srchwinsz();
  inline void set_has_negsample_strat();
  inline void clear_has_negsample_strat();
  inline void set_has_numfeat();
  inline void clear_has_numfeat();
  inline void set_has_numsel();
  inline void clear_has_numsel();
  inline void set_has_lrate();
  inline void clear_has_lrate();
  inline void set_has_posrad();
  inline void clear_has_posrad();
  inline void set_has_init_posrad();
  inline void clear_has_init_posrad();
  inline void set_has_haarmin_rectnum();
  inline void clear_has_haarmin_rectnum();
  inline void set_has_haarmax_rectnum();
  inline void clear_has_haarmax_rectnum();
  inline void set_has_uselogr();
  inline void clear_has_uselogr();
  inline void set_has_tss();
  inline void clear_has_tss();
  inline void set_has_pool();
  inline void clear_has_pool();
  inline void set_has_sync();
  inline void clear_has_sync();
  inline void set_has_mixfeat();
  inline void clear_has_mixfeat();
  inline void set_has_showprob();
  inline void clear_has_showprob();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int init_type_;
  int track_type_;
  ::google::protobuf::RepeatedPtrField< ::svaf::InitRectParameter > init_rect_;
  ::google::protobuf::int32 track_count_;
  ::google::protobuf::uint32 tr_width_;
  ::google::protobuf::uint32 tr_height_;
  float scalefactor_;
  ::google::protobuf::uint32 init_negnum_;
  ::google::protobuf::uint32 negnum_;
  ::google::protobuf::uint32 posmax_;
  ::google::protobuf::uint32 srchwinsz_;
  ::google::protobuf::uint32 negsample_strat_;
  ::google::protobuf::uint32 numfeat_;
  ::google::protobuf::uint32 numsel_;
  float lrate_;
  float posrad_;
  float init_posrad_;
  ::google::protobuf::uint32 haarmin_rectnum_;
  ::google::protobuf::uint32 haarmax_rectnum_;
  bool uselogr_;
  bool tss_;
  bool pool_;
  bool sync_;
  bool mixfeat_;
  bool showprob_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static MilTrackParameter* default_instance_;
};
// -------------------------------------------------------------------

class FeaturePointParameter : public ::google::protobuf::Message {
 public:
  FeaturePointParameter();
  virtual ~FeaturePointParameter();

  FeaturePointParameter(const FeaturePointParameter& from);

  inline FeaturePointParameter& operator=(const FeaturePointParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeaturePointParameter& default_instance();

  void Swap(FeaturePointParameter* other);

  // implements Message ----------------------------------------------

  FeaturePointParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeaturePointParameter& from);
  void MergeFrom(const FeaturePointParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.FeaturePointParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static FeaturePointParameter* default_instance_;
};
// -------------------------------------------------------------------

class SIFTPointParameter : public ::google::protobuf::Message {
 public:
  SIFTPointParameter();
  virtual ~SIFTPointParameter();

  SIFTPointParameter(const SIFTPointParameter& from);

  inline SIFTPointParameter& operator=(const SIFTPointParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SIFTPointParameter& default_instance();

  void Swap(SIFTPointParameter* other);

  // implements Message ----------------------------------------------

  SIFTPointParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SIFTPointParameter& from);
  void MergeFrom(const SIFTPointParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.SIFTPointParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static SIFTPointParameter* default_instance_;
};
// -------------------------------------------------------------------

class SURFPointParameter : public ::google::protobuf::Message {
 public:
  SURFPointParameter();
  virtual ~SURFPointParameter();

  SURFPointParameter(const SURFPointParameter& from);

  inline SURFPointParameter& operator=(const SURFPointParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SURFPointParameter& default_instance();

  void Swap(SURFPointParameter* other);

  // implements Message ----------------------------------------------

  SURFPointParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SURFPointParameter& from);
  void MergeFrom(const SURFPointParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 stride = 1 [default = 2];
  inline bool has_stride() const;
  inline void clear_stride();
  static const int kStrideFieldNumber = 1;
  inline ::google::protobuf::int32 stride() const;
  inline void set_stride(::google::protobuf::int32 value);

  // optional int32 octaves = 2 [default = 5];
  inline bool has_octaves() const;
  inline void clear_octaves();
  static const int kOctavesFieldNumber = 2;
  inline ::google::protobuf::int32 octaves() const;
  inline void set_octaves(::google::protobuf::int32 value);

  // optional int32 intervals = 3 [default = 4];
  inline bool has_intervals() const;
  inline void clear_intervals();
  static const int kIntervalsFieldNumber = 3;
  inline ::google::protobuf::int32 intervals() const;
  inline void set_intervals(::google::protobuf::int32 value);

  // optional float thresh = 4 [default = 0.0004];
  inline bool has_thresh() const;
  inline void clear_thresh();
  static const int kThreshFieldNumber = 4;
  inline float thresh() const;
  inline void set_thresh(float value);

  // @@protoc_insertion_point(class_scope:svaf.SURFPointParameter)
 private:
  inline void set_has_stride();
  inline void clear_has_stride();
  inline void set_has_octaves();
  inline void clear_has_octaves();
  inline void set_has_intervals();
  inline void clear_has_intervals();
  inline void set_has_thresh();
  inline void clear_has_thresh();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 stride_;
  ::google::protobuf::int32 octaves_;
  ::google::protobuf::int32 intervals_;
  float thresh_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static SURFPointParameter* default_instance_;
};
// -------------------------------------------------------------------

class STARPointParameter : public ::google::protobuf::Message {
 public:
  STARPointParameter();
  virtual ~STARPointParameter();

  STARPointParameter(const STARPointParameter& from);

  inline STARPointParameter& operator=(const STARPointParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STARPointParameter& default_instance();

  void Swap(STARPointParameter* other);

  // implements Message ----------------------------------------------

  STARPointParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STARPointParameter& from);
  void MergeFrom(const STARPointParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.STARPointParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static STARPointParameter* default_instance_;
};
// -------------------------------------------------------------------

class BRISKPointParameter : public ::google::protobuf::Message {
 public:
  BRISKPointParameter();
  virtual ~BRISKPointParameter();

  BRISKPointParameter(const BRISKPointParameter& from);

  inline BRISKPointParameter& operator=(const BRISKPointParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BRISKPointParameter& default_instance();

  void Swap(BRISKPointParameter* other);

  // implements Message ----------------------------------------------

  BRISKPointParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BRISKPointParameter& from);
  void MergeFrom(const BRISKPointParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.BRISKPointParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static BRISKPointParameter* default_instance_;
};
// -------------------------------------------------------------------

class FASTPointParameter : public ::google::protobuf::Message {
 public:
  FASTPointParameter();
  virtual ~FASTPointParameter();

  FASTPointParameter(const FASTPointParameter& from);

  inline FASTPointParameter& operator=(const FASTPointParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FASTPointParameter& default_instance();

  void Swap(FASTPointParameter* other);

  // implements Message ----------------------------------------------

  FASTPointParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FASTPointParameter& from);
  void MergeFrom(const FASTPointParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 thresh = 1 [default = 40];
  inline bool has_thresh() const;
  inline void clear_thresh();
  static const int kThreshFieldNumber = 1;
  inline ::google::protobuf::int32 thresh() const;
  inline void set_thresh(::google::protobuf::int32 value);

  // optional bool nms = 2 [default = true];
  inline bool has_nms() const;
  inline void clear_nms();
  static const int kNmsFieldNumber = 2;
  inline bool nms() const;
  inline void set_nms(bool value);

  // @@protoc_insertion_point(class_scope:svaf.FASTPointParameter)
 private:
  inline void set_has_thresh();
  inline void clear_has_thresh();
  inline void set_has_nms();
  inline void clear_has_nms();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 thresh_;
  bool nms_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static FASTPointParameter* default_instance_;
};
// -------------------------------------------------------------------

class ORBPointParameter : public ::google::protobuf::Message {
 public:
  ORBPointParameter();
  virtual ~ORBPointParameter();

  ORBPointParameter(const ORBPointParameter& from);

  inline ORBPointParameter& operator=(const ORBPointParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ORBPointParameter& default_instance();

  void Swap(ORBPointParameter* other);

  // implements Message ----------------------------------------------

  ORBPointParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ORBPointParameter& from);
  void MergeFrom(const ORBPointParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.ORBPointParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static ORBPointParameter* default_instance_;
};
// -------------------------------------------------------------------

class KAZEPointParameter : public ::google::protobuf::Message {
 public:
  KAZEPointParameter();
  virtual ~KAZEPointParameter();

  KAZEPointParameter(const KAZEPointParameter& from);

  inline KAZEPointParameter& operator=(const KAZEPointParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KAZEPointParameter& default_instance();

  void Swap(KAZEPointParameter* other);

  // implements Message ----------------------------------------------

  KAZEPointParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KAZEPointParameter& from);
  void MergeFrom(const KAZEPointParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.KAZEPointParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static KAZEPointParameter* default_instance_;
};
// -------------------------------------------------------------------

class HarrisPointParameter : public ::google::protobuf::Message {
 public:
  HarrisPointParameter();
  virtual ~HarrisPointParameter();

  HarrisPointParameter(const HarrisPointParameter& from);

  inline HarrisPointParameter& operator=(const HarrisPointParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HarrisPointParameter& default_instance();

  void Swap(HarrisPointParameter* other);

  // implements Message ----------------------------------------------

  HarrisPointParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HarrisPointParameter& from);
  void MergeFrom(const HarrisPointParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.HarrisPointParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static HarrisPointParameter* default_instance_;
};
// -------------------------------------------------------------------

class FastParamCP : public ::google::protobuf::Message {
 public:
  FastParamCP();
  virtual ~FastParamCP();

  FastParamCP(const FastParamCP& from);

  inline FastParamCP& operator=(const FastParamCP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FastParamCP& default_instance();

  void Swap(FastParamCP* other);

  // implements Message ----------------------------------------------

  FastParamCP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FastParamCP& from);
  void MergeFrom(const FastParamCP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef FastParamCP_FastType FastType;
  static const FastType T_9_16 = FastParamCP_FastType_T_9_16;
  static const FastType T_7_12 = FastParamCP_FastType_T_7_12;
  static const FastType T_5_8 = FastParamCP_FastType_T_5_8;
  static inline bool FastType_IsValid(int value) {
    return FastParamCP_FastType_IsValid(value);
  }
  static const FastType FastType_MIN =
    FastParamCP_FastType_FastType_MIN;
  static const FastType FastType_MAX =
    FastParamCP_FastType_FastType_MAX;
  static const int FastType_ARRAYSIZE =
    FastParamCP_FastType_FastType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FastType_descriptor() {
    return FastParamCP_FastType_descriptor();
  }
  static inline const ::std::string& FastType_Name(FastType value) {
    return FastParamCP_FastType_Name(value);
  }
  static inline bool FastType_Parse(const ::std::string& name,
      FastType* value) {
    return FastParamCP_FastType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 thresh = 1 [default = 40];
  inline bool has_thresh() const;
  inline void clear_thresh();
  static const int kThreshFieldNumber = 1;
  inline ::google::protobuf::int32 thresh() const;
  inline void set_thresh(::google::protobuf::int32 value);

  // optional bool isnms = 2 [default = true];
  inline bool has_isnms() const;
  inline void clear_isnms();
  static const int kIsnmsFieldNumber = 2;
  inline bool isnms() const;
  inline void set_isnms(bool value);

  // optional .svaf.FastParamCP.FastType ftype = 3 [default = T_9_16];
  inline bool has_ftype() const;
  inline void clear_ftype();
  static const int kFtypeFieldNumber = 3;
  inline ::svaf::FastParamCP_FastType ftype() const;
  inline void set_ftype(::svaf::FastParamCP_FastType value);

  // @@protoc_insertion_point(class_scope:svaf.FastParamCP)
 private:
  inline void set_has_thresh();
  inline void clear_has_thresh();
  inline void set_has_isnms();
  inline void clear_has_isnms();
  inline void set_has_ftype();
  inline void clear_has_ftype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 thresh_;
  bool isnms_;
  int ftype_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static FastParamCP* default_instance_;
};
// -------------------------------------------------------------------

class MSERParamCP : public ::google::protobuf::Message {
 public:
  MSERParamCP();
  virtual ~MSERParamCP();

  MSERParamCP(const MSERParamCP& from);

  inline MSERParamCP& operator=(const MSERParamCP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MSERParamCP& default_instance();

  void Swap(MSERParamCP* other);

  // implements Message ----------------------------------------------

  MSERParamCP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSERParamCP& from);
  void MergeFrom(const MSERParamCP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 delta = 1 [default = 5];
  inline bool has_delta() const;
  inline void clear_delta();
  static const int kDeltaFieldNumber = 1;
  inline ::google::protobuf::int32 delta() const;
  inline void set_delta(::google::protobuf::int32 value);

  // optional int32 min_area = 2 [default = 60];
  inline bool has_min_area() const;
  inline void clear_min_area();
  static const int kMinAreaFieldNumber = 2;
  inline ::google::protobuf::int32 min_area() const;
  inline void set_min_area(::google::protobuf::int32 value);

  // optional int32 max_area = 3 [default = 14400];
  inline bool has_max_area() const;
  inline void clear_max_area();
  static const int kMaxAreaFieldNumber = 3;
  inline ::google::protobuf::int32 max_area() const;
  inline void set_max_area(::google::protobuf::int32 value);

  // optional float max_varia = 4 [default = 0.25];
  inline bool has_max_varia() const;
  inline void clear_max_varia();
  static const int kMaxVariaFieldNumber = 4;
  inline float max_varia() const;
  inline void set_max_varia(float value);

  // optional float min_divers = 5 [default = 0.2];
  inline bool has_min_divers() const;
  inline void clear_min_divers();
  static const int kMinDiversFieldNumber = 5;
  inline float min_divers() const;
  inline void set_min_divers(float value);

  // optional int32 max_evolution = 6 [default = 200];
  inline bool has_max_evolution() const;
  inline void clear_max_evolution();
  static const int kMaxEvolutionFieldNumber = 6;
  inline ::google::protobuf::int32 max_evolution() const;
  inline void set_max_evolution(::google::protobuf::int32 value);

  // optional float area_thresh = 7 [default = 1.01];
  inline bool has_area_thresh() const;
  inline void clear_area_thresh();
  static const int kAreaThreshFieldNumber = 7;
  inline float area_thresh() const;
  inline void set_area_thresh(float value);

  // optional float min_margin = 8 [default = 0.003];
  inline bool has_min_margin() const;
  inline void clear_min_margin();
  static const int kMinMarginFieldNumber = 8;
  inline float min_margin() const;
  inline void set_min_margin(float value);

  // optional int32 edgeblur_size = 9 [default = 5];
  inline bool has_edgeblur_size() const;
  inline void clear_edgeblur_size();
  static const int kEdgeblurSizeFieldNumber = 9;
  inline ::google::protobuf::int32 edgeblur_size() const;
  inline void set_edgeblur_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:svaf.MSERParamCP)
 private:
  inline void set_has_delta();
  inline void clear_has_delta();
  inline void set_has_min_area();
  inline void clear_has_min_area();
  inline void set_has_max_area();
  inline void clear_has_max_area();
  inline void set_has_max_varia();
  inline void clear_has_max_varia();
  inline void set_has_min_divers();
  inline void clear_has_min_divers();
  inline void set_has_max_evolution();
  inline void clear_has_max_evolution();
  inline void set_has_area_thresh();
  inline void clear_has_area_thresh();
  inline void set_has_min_margin();
  inline void clear_has_min_margin();
  inline void set_has_edgeblur_size();
  inline void clear_has_edgeblur_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 delta_;
  ::google::protobuf::int32 min_area_;
  ::google::protobuf::int32 max_area_;
  float max_varia_;
  float min_divers_;
  ::google::protobuf::int32 max_evolution_;
  float area_thresh_;
  float min_margin_;
  ::google::protobuf::int32 edgeblur_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static MSERParamCP* default_instance_;
};
// -------------------------------------------------------------------

class ORBParamCP : public ::google::protobuf::Message {
 public:
  ORBParamCP();
  virtual ~ORBParamCP();

  ORBParamCP(const ORBParamCP& from);

  inline ORBParamCP& operator=(const ORBParamCP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ORBParamCP& default_instance();

  void Swap(ORBParamCP* other);

  // implements Message ----------------------------------------------

  ORBParamCP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ORBParamCP& from);
  void MergeFrom(const ORBParamCP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ORBParamCP_OBRScoreType OBRScoreType;
  static const OBRScoreType HARRIS_SCORE = ORBParamCP_OBRScoreType_HARRIS_SCORE;
  static const OBRScoreType FAST_SCORE = ORBParamCP_OBRScoreType_FAST_SCORE;
  static inline bool OBRScoreType_IsValid(int value) {
    return ORBParamCP_OBRScoreType_IsValid(value);
  }
  static const OBRScoreType OBRScoreType_MIN =
    ORBParamCP_OBRScoreType_OBRScoreType_MIN;
  static const OBRScoreType OBRScoreType_MAX =
    ORBParamCP_OBRScoreType_OBRScoreType_MAX;
  static const int OBRScoreType_ARRAYSIZE =
    ORBParamCP_OBRScoreType_OBRScoreType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OBRScoreType_descriptor() {
    return ORBParamCP_OBRScoreType_descriptor();
  }
  static inline const ::std::string& OBRScoreType_Name(OBRScoreType value) {
    return ORBParamCP_OBRScoreType_Name(value);
  }
  static inline bool OBRScoreType_Parse(const ::std::string& name,
      OBRScoreType* value) {
    return ORBParamCP_OBRScoreType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 nfeatures = 1 [default = 500];
  inline bool has_nfeatures() const;
  inline void clear_nfeatures();
  static const int kNfeaturesFieldNumber = 1;
  inline ::google::protobuf::int32 nfeatures() const;
  inline void set_nfeatures(::google::protobuf::int32 value);

  // optional float scalefactor = 2 [default = 1.2];
  inline bool has_scalefactor() const;
  inline void clear_scalefactor();
  static const int kScalefactorFieldNumber = 2;
  inline float scalefactor() const;
  inline void set_scalefactor(float value);

  // optional int32 nlevels = 3 [default = 8];
  inline bool has_nlevels() const;
  inline void clear_nlevels();
  static const int kNlevelsFieldNumber = 3;
  inline ::google::protobuf::int32 nlevels() const;
  inline void set_nlevels(::google::protobuf::int32 value);

  // optional int32 edgethresh = 4 [default = 31];
  inline bool has_edgethresh() const;
  inline void clear_edgethresh();
  static const int kEdgethreshFieldNumber = 4;
  inline ::google::protobuf::int32 edgethresh() const;
  inline void set_edgethresh(::google::protobuf::int32 value);

  // optional int32 firstlevel = 5 [default = 0];
  inline bool has_firstlevel() const;
  inline void clear_firstlevel();
  static const int kFirstlevelFieldNumber = 5;
  inline ::google::protobuf::int32 firstlevel() const;
  inline void set_firstlevel(::google::protobuf::int32 value);

  // optional int32 wta_k = 6 [default = 2];
  inline bool has_wta_k() const;
  inline void clear_wta_k();
  static const int kWtaKFieldNumber = 6;
  inline ::google::protobuf::int32 wta_k() const;
  inline void set_wta_k(::google::protobuf::int32 value);

  // optional .svaf.ORBParamCP.OBRScoreType scoretype = 7 [default = HARRIS_SCORE];
  inline bool has_scoretype() const;
  inline void clear_scoretype();
  static const int kScoretypeFieldNumber = 7;
  inline ::svaf::ORBParamCP_OBRScoreType scoretype() const;
  inline void set_scoretype(::svaf::ORBParamCP_OBRScoreType value);

  // optional int32 patchsize = 8 [default = 31];
  inline bool has_patchsize() const;
  inline void clear_patchsize();
  static const int kPatchsizeFieldNumber = 8;
  inline ::google::protobuf::int32 patchsize() const;
  inline void set_patchsize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:svaf.ORBParamCP)
 private:
  inline void set_has_nfeatures();
  inline void clear_has_nfeatures();
  inline void set_has_scalefactor();
  inline void clear_has_scalefactor();
  inline void set_has_nlevels();
  inline void clear_has_nlevels();
  inline void set_has_edgethresh();
  inline void clear_has_edgethresh();
  inline void set_has_firstlevel();
  inline void clear_has_firstlevel();
  inline void set_has_wta_k();
  inline void clear_has_wta_k();
  inline void set_has_scoretype();
  inline void clear_has_scoretype();
  inline void set_has_patchsize();
  inline void clear_has_patchsize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 nfeatures_;
  float scalefactor_;
  ::google::protobuf::int32 nlevels_;
  ::google::protobuf::int32 edgethresh_;
  ::google::protobuf::int32 firstlevel_;
  ::google::protobuf::int32 wta_k_;
  int scoretype_;
  ::google::protobuf::int32 patchsize_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static ORBParamCP* default_instance_;
};
// -------------------------------------------------------------------

class BriskParamCP : public ::google::protobuf::Message {
 public:
  BriskParamCP();
  virtual ~BriskParamCP();

  BriskParamCP(const BriskParamCP& from);

  inline BriskParamCP& operator=(const BriskParamCP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BriskParamCP& default_instance();

  void Swap(BriskParamCP* other);

  // implements Message ----------------------------------------------

  BriskParamCP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BriskParamCP& from);
  void MergeFrom(const BriskParamCP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 thresh = 1 [default = 30];
  inline bool has_thresh() const;
  inline void clear_thresh();
  static const int kThreshFieldNumber = 1;
  inline ::google::protobuf::int32 thresh() const;
  inline void set_thresh(::google::protobuf::int32 value);

  // optional int32 octaves = 2 [default = 3];
  inline bool has_octaves() const;
  inline void clear_octaves();
  static const int kOctavesFieldNumber = 2;
  inline ::google::protobuf::int32 octaves() const;
  inline void set_octaves(::google::protobuf::int32 value);

  // optional float ptscale = 3 [default = 1];
  inline bool has_ptscale() const;
  inline void clear_ptscale();
  static const int kPtscaleFieldNumber = 3;
  inline float ptscale() const;
  inline void set_ptscale(float value);

  // @@protoc_insertion_point(class_scope:svaf.BriskParamCP)
 private:
  inline void set_has_thresh();
  inline void clear_has_thresh();
  inline void set_has_octaves();
  inline void clear_has_octaves();
  inline void set_has_ptscale();
  inline void clear_has_ptscale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 thresh_;
  ::google::protobuf::int32 octaves_;
  float ptscale_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static BriskParamCP* default_instance_;
};
// -------------------------------------------------------------------

class FreakParamCP : public ::google::protobuf::Message {
 public:
  FreakParamCP();
  virtual ~FreakParamCP();

  FreakParamCP(const FreakParamCP& from);

  inline FreakParamCP& operator=(const FreakParamCP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FreakParamCP& default_instance();

  void Swap(FreakParamCP* other);

  // implements Message ----------------------------------------------

  FreakParamCP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FreakParamCP& from);
  void MergeFrom(const FreakParamCP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool orientnorm = 1 [default = true];
  inline bool has_orientnorm() const;
  inline void clear_orientnorm();
  static const int kOrientnormFieldNumber = 1;
  inline bool orientnorm() const;
  inline void set_orientnorm(bool value);

  // optional bool scalenorm = 2 [default = true];
  inline bool has_scalenorm() const;
  inline void clear_scalenorm();
  static const int kScalenormFieldNumber = 2;
  inline bool scalenorm() const;
  inline void set_scalenorm(bool value);

  // optional float ptscale = 3 [default = 22];
  inline bool has_ptscale() const;
  inline void clear_ptscale();
  static const int kPtscaleFieldNumber = 3;
  inline float ptscale() const;
  inline void set_ptscale(float value);

  // optional int32 octaves = 4 [default = 4];
  inline bool has_octaves() const;
  inline void clear_octaves();
  static const int kOctavesFieldNumber = 4;
  inline ::google::protobuf::int32 octaves() const;
  inline void set_octaves(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:svaf.FreakParamCP)
 private:
  inline void set_has_orientnorm();
  inline void clear_has_orientnorm();
  inline void set_has_scalenorm();
  inline void clear_has_scalenorm();
  inline void set_has_ptscale();
  inline void clear_has_ptscale();
  inline void set_has_octaves();
  inline void clear_has_octaves();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool orientnorm_;
  bool scalenorm_;
  float ptscale_;
  ::google::protobuf::int32 octaves_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static FreakParamCP* default_instance_;
};
// -------------------------------------------------------------------

class StarParamCP : public ::google::protobuf::Message {
 public:
  StarParamCP();
  virtual ~StarParamCP();

  StarParamCP(const StarParamCP& from);

  inline StarParamCP& operator=(const StarParamCP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StarParamCP& default_instance();

  void Swap(StarParamCP* other);

  // implements Message ----------------------------------------------

  StarParamCP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StarParamCP& from);
  void MergeFrom(const StarParamCP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 maxsize = 1 [default = 16];
  inline bool has_maxsize() const;
  inline void clear_maxsize();
  static const int kMaxsizeFieldNumber = 1;
  inline ::google::protobuf::int32 maxsize() const;
  inline void set_maxsize(::google::protobuf::int32 value);

  // optional int32 response_thresh = 2 [default = 30];
  inline bool has_response_thresh() const;
  inline void clear_response_thresh();
  static const int kResponseThreshFieldNumber = 2;
  inline ::google::protobuf::int32 response_thresh() const;
  inline void set_response_thresh(::google::protobuf::int32 value);

  // optional int32 projected_thresh = 3 [default = 10];
  inline bool has_projected_thresh() const;
  inline void clear_projected_thresh();
  static const int kProjectedThreshFieldNumber = 3;
  inline ::google::protobuf::int32 projected_thresh() const;
  inline void set_projected_thresh(::google::protobuf::int32 value);

  // optional int32 binarized_thresh = 4 [default = 8];
  inline bool has_binarized_thresh() const;
  inline void clear_binarized_thresh();
  static const int kBinarizedThreshFieldNumber = 4;
  inline ::google::protobuf::int32 binarized_thresh() const;
  inline void set_binarized_thresh(::google::protobuf::int32 value);

  // optional int32 nms_size = 5 [default = 5];
  inline bool has_nms_size() const;
  inline void clear_nms_size();
  static const int kNmsSizeFieldNumber = 5;
  inline ::google::protobuf::int32 nms_size() const;
  inline void set_nms_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:svaf.StarParamCP)
 private:
  inline void set_has_maxsize();
  inline void clear_has_maxsize();
  inline void set_has_response_thresh();
  inline void clear_has_response_thresh();
  inline void set_has_projected_thresh();
  inline void clear_has_projected_thresh();
  inline void set_has_binarized_thresh();
  inline void clear_has_binarized_thresh();
  inline void set_has_nms_size();
  inline void clear_has_nms_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 maxsize_;
  ::google::protobuf::int32 response_thresh_;
  ::google::protobuf::int32 projected_thresh_;
  ::google::protobuf::int32 binarized_thresh_;
  ::google::protobuf::int32 nms_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static StarParamCP* default_instance_;
};
// -------------------------------------------------------------------

class SiftParamCP : public ::google::protobuf::Message {
 public:
  SiftParamCP();
  virtual ~SiftParamCP();

  SiftParamCP(const SiftParamCP& from);

  inline SiftParamCP& operator=(const SiftParamCP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SiftParamCP& default_instance();

  void Swap(SiftParamCP* other);

  // implements Message ----------------------------------------------

  SiftParamCP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SiftParamCP& from);
  void MergeFrom(const SiftParamCP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 nfeatures = 1 [default = 0];
  inline bool has_nfeatures() const;
  inline void clear_nfeatures();
  static const int kNfeaturesFieldNumber = 1;
  inline ::google::protobuf::int32 nfeatures() const;
  inline void set_nfeatures(::google::protobuf::int32 value);

  // optional int32 octaves = 2 [default = 3];
  inline bool has_octaves() const;
  inline void clear_octaves();
  static const int kOctavesFieldNumber = 2;
  inline ::google::protobuf::int32 octaves() const;
  inline void set_octaves(::google::protobuf::int32 value);

  // optional float contrast_thresh = 3 [default = 0.04];
  inline bool has_contrast_thresh() const;
  inline void clear_contrast_thresh();
  static const int kContrastThreshFieldNumber = 3;
  inline float contrast_thresh() const;
  inline void set_contrast_thresh(float value);

  // optional float edge_thresh = 4 [default = 10];
  inline bool has_edge_thresh() const;
  inline void clear_edge_thresh();
  static const int kEdgeThreshFieldNumber = 4;
  inline float edge_thresh() const;
  inline void set_edge_thresh(float value);

  // optional float sigma = 5 [default = 1.6];
  inline bool has_sigma() const;
  inline void clear_sigma();
  static const int kSigmaFieldNumber = 5;
  inline float sigma() const;
  inline void set_sigma(float value);

  // @@protoc_insertion_point(class_scope:svaf.SiftParamCP)
 private:
  inline void set_has_nfeatures();
  inline void clear_has_nfeatures();
  inline void set_has_octaves();
  inline void clear_has_octaves();
  inline void set_has_contrast_thresh();
  inline void clear_has_contrast_thresh();
  inline void set_has_edge_thresh();
  inline void clear_has_edge_thresh();
  inline void set_has_sigma();
  inline void clear_has_sigma();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 nfeatures_;
  ::google::protobuf::int32 octaves_;
  float contrast_thresh_;
  float edge_thresh_;
  float sigma_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static SiftParamCP* default_instance_;
};
// -------------------------------------------------------------------

class SurfParamCP : public ::google::protobuf::Message {
 public:
  SurfParamCP();
  virtual ~SurfParamCP();

  SurfParamCP(const SurfParamCP& from);

  inline SurfParamCP& operator=(const SurfParamCP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SurfParamCP& default_instance();

  void Swap(SurfParamCP* other);

  // implements Message ----------------------------------------------

  SurfParamCP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SurfParamCP& from);
  void MergeFrom(const SurfParamCP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float hassian_thresh = 1 [default = 0.0004];
  inline bool has_hassian_thresh() const;
  inline void clear_hassian_thresh();
  static const int kHassianThreshFieldNumber = 1;
  inline float hassian_thresh() const;
  inline void set_hassian_thresh(float value);

  // optional int32 octaves = 2 [default = 4];
  inline bool has_octaves() const;
  inline void clear_octaves();
  static const int kOctavesFieldNumber = 2;
  inline ::google::protobuf::int32 octaves() const;
  inline void set_octaves(::google::protobuf::int32 value);

  // optional int32 intevals = 3 [default = 2];
  inline bool has_intevals() const;
  inline void clear_intevals();
  static const int kIntevalsFieldNumber = 3;
  inline ::google::protobuf::int32 intevals() const;
  inline void set_intevals(::google::protobuf::int32 value);

  // optional bool extended = 4 [default = false];
  inline bool has_extended() const;
  inline void clear_extended();
  static const int kExtendedFieldNumber = 4;
  inline bool extended() const;
  inline void set_extended(bool value);

  // optional bool upright = 5 [default = false];
  inline bool has_upright() const;
  inline void clear_upright();
  static const int kUprightFieldNumber = 5;
  inline bool upright() const;
  inline void set_upright(bool value);

  // @@protoc_insertion_point(class_scope:svaf.SurfParamCP)
 private:
  inline void set_has_hassian_thresh();
  inline void clear_has_hassian_thresh();
  inline void set_has_octaves();
  inline void clear_has_octaves();
  inline void set_has_intevals();
  inline void clear_has_intevals();
  inline void set_has_extended();
  inline void clear_has_extended();
  inline void set_has_upright();
  inline void clear_has_upright();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float hassian_thresh_;
  ::google::protobuf::int32 octaves_;
  ::google::protobuf::int32 intevals_;
  bool extended_;
  bool upright_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static SurfParamCP* default_instance_;
};
// -------------------------------------------------------------------

class GFTTParamCP : public ::google::protobuf::Message {
 public:
  GFTTParamCP();
  virtual ~GFTTParamCP();

  GFTTParamCP(const GFTTParamCP& from);

  inline GFTTParamCP& operator=(const GFTTParamCP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GFTTParamCP& default_instance();

  void Swap(GFTTParamCP* other);

  // implements Message ----------------------------------------------

  GFTTParamCP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GFTTParamCP& from);
  void MergeFrom(const GFTTParamCP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 maxcornners = 1 [default = 1000];
  inline bool has_maxcornners() const;
  inline void clear_maxcornners();
  static const int kMaxcornnersFieldNumber = 1;
  inline ::google::protobuf::int32 maxcornners() const;
  inline void set_maxcornners(::google::protobuf::int32 value);

  // optional float quality = 2 [default = 0.01];
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 2;
  inline float quality() const;
  inline void set_quality(float value);

  // optional float mindist = 3 [default = 1];
  inline bool has_mindist() const;
  inline void clear_mindist();
  static const int kMindistFieldNumber = 3;
  inline float mindist() const;
  inline void set_mindist(float value);

  // optional int32 blocksize = 4 [default = 3];
  inline bool has_blocksize() const;
  inline void clear_blocksize();
  static const int kBlocksizeFieldNumber = 4;
  inline ::google::protobuf::int32 blocksize() const;
  inline void set_blocksize(::google::protobuf::int32 value);

  // optional bool useharris = 5 [default = false];
  inline bool has_useharris() const;
  inline void clear_useharris();
  static const int kUseharrisFieldNumber = 5;
  inline bool useharris() const;
  inline void set_useharris(bool value);

  // optional float k = 6 [default = 0.04];
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 6;
  inline float k() const;
  inline void set_k(float value);

  // @@protoc_insertion_point(class_scope:svaf.GFTTParamCP)
 private:
  inline void set_has_maxcornners();
  inline void clear_has_maxcornners();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_mindist();
  inline void clear_has_mindist();
  inline void set_has_blocksize();
  inline void clear_has_blocksize();
  inline void set_has_useharris();
  inline void clear_has_useharris();
  inline void set_has_k();
  inline void clear_has_k();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 maxcornners_;
  float quality_;
  float mindist_;
  ::google::protobuf::int32 blocksize_;
  bool useharris_;
  float k_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static GFTTParamCP* default_instance_;
};
// -------------------------------------------------------------------

class HarrisParamCP : public ::google::protobuf::Message {
 public:
  HarrisParamCP();
  virtual ~HarrisParamCP();

  HarrisParamCP(const HarrisParamCP& from);

  inline HarrisParamCP& operator=(const HarrisParamCP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HarrisParamCP& default_instance();

  void Swap(HarrisParamCP* other);

  // implements Message ----------------------------------------------

  HarrisParamCP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HarrisParamCP& from);
  void MergeFrom(const HarrisParamCP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 maxcornners = 1 [default = 1000];
  inline bool has_maxcornners() const;
  inline void clear_maxcornners();
  static const int kMaxcornnersFieldNumber = 1;
  inline ::google::protobuf::int32 maxcornners() const;
  inline void set_maxcornners(::google::protobuf::int32 value);

  // optional float quality = 2 [default = 0.01];
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 2;
  inline float quality() const;
  inline void set_quality(float value);

  // optional float mindist = 3 [default = 1];
  inline bool has_mindist() const;
  inline void clear_mindist();
  static const int kMindistFieldNumber = 3;
  inline float mindist() const;
  inline void set_mindist(float value);

  // optional int32 blocksize = 4 [default = 3];
  inline bool has_blocksize() const;
  inline void clear_blocksize();
  static const int kBlocksizeFieldNumber = 4;
  inline ::google::protobuf::int32 blocksize() const;
  inline void set_blocksize(::google::protobuf::int32 value);

  // optional float k = 6 [default = 0.04];
  inline bool has_k() const;
  inline void clear_k();
  static const int kKFieldNumber = 6;
  inline float k() const;
  inline void set_k(float value);

  // @@protoc_insertion_point(class_scope:svaf.HarrisParamCP)
 private:
  inline void set_has_maxcornners();
  inline void clear_has_maxcornners();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_mindist();
  inline void clear_has_mindist();
  inline void set_has_blocksize();
  inline void clear_has_blocksize();
  inline void set_has_k();
  inline void clear_has_k();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 maxcornners_;
  float quality_;
  float mindist_;
  ::google::protobuf::int32 blocksize_;
  float k_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static HarrisParamCP* default_instance_;
};
// -------------------------------------------------------------------

class DenseParamCP : public ::google::protobuf::Message {
 public:
  DenseParamCP();
  virtual ~DenseParamCP();

  DenseParamCP(const DenseParamCP& from);

  inline DenseParamCP& operator=(const DenseParamCP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DenseParamCP& default_instance();

  void Swap(DenseParamCP* other);

  // implements Message ----------------------------------------------

  DenseParamCP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DenseParamCP& from);
  void MergeFrom(const DenseParamCP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float initfeatscale = 1 [default = 1];
  inline bool has_initfeatscale() const;
  inline void clear_initfeatscale();
  static const int kInitfeatscaleFieldNumber = 1;
  inline float initfeatscale() const;
  inline void set_initfeatscale(float value);

  // optional int32 featscalelevel = 2 [default = 1];
  inline bool has_featscalelevel() const;
  inline void clear_featscalelevel();
  static const int kFeatscalelevelFieldNumber = 2;
  inline ::google::protobuf::int32 featscalelevel() const;
  inline void set_featscalelevel(::google::protobuf::int32 value);

  // optional float featscalemul = 3 [default = 0.1];
  inline bool has_featscalemul() const;
  inline void clear_featscalemul();
  static const int kFeatscalemulFieldNumber = 3;
  inline float featscalemul() const;
  inline void set_featscalemul(float value);

  // optional int32 initxystep = 4 [default = 6];
  inline bool has_initxystep() const;
  inline void clear_initxystep();
  static const int kInitxystepFieldNumber = 4;
  inline ::google::protobuf::int32 initxystep() const;
  inline void set_initxystep(::google::protobuf::int32 value);

  // optional int32 initbound = 5 [default = 0];
  inline bool has_initbound() const;
  inline void clear_initbound();
  static const int kInitboundFieldNumber = 5;
  inline ::google::protobuf::int32 initbound() const;
  inline void set_initbound(::google::protobuf::int32 value);

  // optional bool varyxyscale = 6 [default = true];
  inline bool has_varyxyscale() const;
  inline void clear_varyxyscale();
  static const int kVaryxyscaleFieldNumber = 6;
  inline bool varyxyscale() const;
  inline void set_varyxyscale(bool value);

  // optional bool varybdscale = 7 [default = false];
  inline bool has_varybdscale() const;
  inline void clear_varybdscale();
  static const int kVarybdscaleFieldNumber = 7;
  inline bool varybdscale() const;
  inline void set_varybdscale(bool value);

  // @@protoc_insertion_point(class_scope:svaf.DenseParamCP)
 private:
  inline void set_has_initfeatscale();
  inline void clear_has_initfeatscale();
  inline void set_has_featscalelevel();
  inline void clear_has_featscalelevel();
  inline void set_has_featscalemul();
  inline void clear_has_featscalemul();
  inline void set_has_initxystep();
  inline void clear_has_initxystep();
  inline void set_has_initbound();
  inline void clear_has_initbound();
  inline void set_has_varyxyscale();
  inline void clear_has_varyxyscale();
  inline void set_has_varybdscale();
  inline void clear_has_varybdscale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float initfeatscale_;
  ::google::protobuf::int32 featscalelevel_;
  float featscalemul_;
  ::google::protobuf::int32 initxystep_;
  ::google::protobuf::int32 initbound_;
  bool varyxyscale_;
  bool varybdscale_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static DenseParamCP* default_instance_;
};
// -------------------------------------------------------------------

class SimpleBlobParamCP : public ::google::protobuf::Message {
 public:
  SimpleBlobParamCP();
  virtual ~SimpleBlobParamCP();

  SimpleBlobParamCP(const SimpleBlobParamCP& from);

  inline SimpleBlobParamCP& operator=(const SimpleBlobParamCP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleBlobParamCP& default_instance();

  void Swap(SimpleBlobParamCP* other);

  // implements Message ----------------------------------------------

  SimpleBlobParamCP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimpleBlobParamCP& from);
  void MergeFrom(const SimpleBlobParamCP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.SimpleBlobParamCP)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static SimpleBlobParamCP* default_instance_;
};
// -------------------------------------------------------------------

class AkazeParamCP : public ::google::protobuf::Message {
 public:
  AkazeParamCP();
  virtual ~AkazeParamCP();

  AkazeParamCP(const AkazeParamCP& from);

  inline AkazeParamCP& operator=(const AkazeParamCP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AkazeParamCP& default_instance();

  void Swap(AkazeParamCP* other);

  // implements Message ----------------------------------------------

  AkazeParamCP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AkazeParamCP& from);
  void MergeFrom(const AkazeParamCP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.AkazeParamCP)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static AkazeParamCP* default_instance_;
};
// -------------------------------------------------------------------

class CVPointParameter : public ::google::protobuf::Message {
 public:
  CVPointParameter();
  virtual ~CVPointParameter();

  CVPointParameter(const CVPointParameter& from);

  inline CVPointParameter& operator=(const CVPointParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CVPointParameter& default_instance();

  void Swap(CVPointParameter* other);

  // implements Message ----------------------------------------------

  CVPointParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CVPointParameter& from);
  void MergeFrom(const CVPointParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CVPointParameter_PointType PointType;
  static const PointType FAST = CVPointParameter_PointType_FAST;
  static const PointType FASTX = CVPointParameter_PointType_FASTX;
  static const PointType MSER = CVPointParameter_PointType_MSER;
  static const PointType ORB = CVPointParameter_PointType_ORB;
  static const PointType BRISK = CVPointParameter_PointType_BRISK;
  static const PointType FREAK = CVPointParameter_PointType_FREAK;
  static const PointType STAR = CVPointParameter_PointType_STAR;
  static const PointType SIFT = CVPointParameter_PointType_SIFT;
  static const PointType SURF = CVPointParameter_PointType_SURF;
  static const PointType GFTT = CVPointParameter_PointType_GFTT;
  static const PointType HARRIS = CVPointParameter_PointType_HARRIS;
  static const PointType DENSE = CVPointParameter_PointType_DENSE;
  static const PointType SBLOB = CVPointParameter_PointType_SBLOB;
  static const PointType AKAZE = CVPointParameter_PointType_AKAZE;
  static inline bool PointType_IsValid(int value) {
    return CVPointParameter_PointType_IsValid(value);
  }
  static const PointType PointType_MIN =
    CVPointParameter_PointType_PointType_MIN;
  static const PointType PointType_MAX =
    CVPointParameter_PointType_PointType_MAX;
  static const int PointType_ARRAYSIZE =
    CVPointParameter_PointType_PointType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PointType_descriptor() {
    return CVPointParameter_PointType_descriptor();
  }
  static inline const ::std::string& PointType_Name(PointType value) {
    return CVPointParameter_PointType_Name(value);
  }
  static inline bool PointType_Parse(const ::std::string& name,
      PointType* value) {
    return CVPointParameter_PointType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .svaf.CVPointParameter.PointType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::svaf::CVPointParameter_PointType type() const;
  inline void set_type(::svaf::CVPointParameter_PointType value);

  // optional bool isadd = 2 [default = false];
  inline bool has_isadd() const;
  inline void clear_isadd();
  static const int kIsaddFieldNumber = 2;
  inline bool isadd() const;
  inline void set_isadd(bool value);

  // optional .svaf.FastParamCP fast_param = 11;
  inline bool has_fast_param() const;
  inline void clear_fast_param();
  static const int kFastParamFieldNumber = 11;
  inline const ::svaf::FastParamCP& fast_param() const;
  inline ::svaf::FastParamCP* mutable_fast_param();
  inline ::svaf::FastParamCP* release_fast_param();
  inline void set_allocated_fast_param(::svaf::FastParamCP* fast_param);

  // optional .svaf.MSERParamCP mser_param = 13;
  inline bool has_mser_param() const;
  inline void clear_mser_param();
  static const int kMserParamFieldNumber = 13;
  inline const ::svaf::MSERParamCP& mser_param() const;
  inline ::svaf::MSERParamCP* mutable_mser_param();
  inline ::svaf::MSERParamCP* release_mser_param();
  inline void set_allocated_mser_param(::svaf::MSERParamCP* mser_param);

  // optional .svaf.ORBParamCP orb_param = 14;
  inline bool has_orb_param() const;
  inline void clear_orb_param();
  static const int kOrbParamFieldNumber = 14;
  inline const ::svaf::ORBParamCP& orb_param() const;
  inline ::svaf::ORBParamCP* mutable_orb_param();
  inline ::svaf::ORBParamCP* release_orb_param();
  inline void set_allocated_orb_param(::svaf::ORBParamCP* orb_param);

  // optional .svaf.BriskParamCP brisk_param = 15;
  inline bool has_brisk_param() const;
  inline void clear_brisk_param();
  static const int kBriskParamFieldNumber = 15;
  inline const ::svaf::BriskParamCP& brisk_param() const;
  inline ::svaf::BriskParamCP* mutable_brisk_param();
  inline ::svaf::BriskParamCP* release_brisk_param();
  inline void set_allocated_brisk_param(::svaf::BriskParamCP* brisk_param);

  // optional .svaf.FreakParamCP freak_param = 16;
  inline bool has_freak_param() const;
  inline void clear_freak_param();
  static const int kFreakParamFieldNumber = 16;
  inline const ::svaf::FreakParamCP& freak_param() const;
  inline ::svaf::FreakParamCP* mutable_freak_param();
  inline ::svaf::FreakParamCP* release_freak_param();
  inline void set_allocated_freak_param(::svaf::FreakParamCP* freak_param);

  // optional .svaf.StarParamCP star_param = 17;
  inline bool has_star_param() const;
  inline void clear_star_param();
  static const int kStarParamFieldNumber = 17;
  inline const ::svaf::StarParamCP& star_param() const;
  inline ::svaf::StarParamCP* mutable_star_param();
  inline ::svaf::StarParamCP* release_star_param();
  inline void set_allocated_star_param(::svaf::StarParamCP* star_param);

  // optional .svaf.SiftParamCP sift_param = 18;
  inline bool has_sift_param() const;
  inline void clear_sift_param();
  static const int kSiftParamFieldNumber = 18;
  inline const ::svaf::SiftParamCP& sift_param() const;
  inline ::svaf::SiftParamCP* mutable_sift_param();
  inline ::svaf::SiftParamCP* release_sift_param();
  inline void set_allocated_sift_param(::svaf::SiftParamCP* sift_param);

  // optional .svaf.SurfParamCP surf_param = 19;
  inline bool has_surf_param() const;
  inline void clear_surf_param();
  static const int kSurfParamFieldNumber = 19;
  inline const ::svaf::SurfParamCP& surf_param() const;
  inline ::svaf::SurfParamCP* mutable_surf_param();
  inline ::svaf::SurfParamCP* release_surf_param();
  inline void set_allocated_surf_param(::svaf::SurfParamCP* surf_param);

  // optional .svaf.GFTTParamCP gftt_param = 20;
  inline bool has_gftt_param() const;
  inline void clear_gftt_param();
  static const int kGfttParamFieldNumber = 20;
  inline const ::svaf::GFTTParamCP& gftt_param() const;
  inline ::svaf::GFTTParamCP* mutable_gftt_param();
  inline ::svaf::GFTTParamCP* release_gftt_param();
  inline void set_allocated_gftt_param(::svaf::GFTTParamCP* gftt_param);

  // optional .svaf.HarrisParamCP harris_param = 21;
  inline bool has_harris_param() const;
  inline void clear_harris_param();
  static const int kHarrisParamFieldNumber = 21;
  inline const ::svaf::HarrisParamCP& harris_param() const;
  inline ::svaf::HarrisParamCP* mutable_harris_param();
  inline ::svaf::HarrisParamCP* release_harris_param();
  inline void set_allocated_harris_param(::svaf::HarrisParamCP* harris_param);

  // optional .svaf.DenseParamCP dense_param = 22;
  inline bool has_dense_param() const;
  inline void clear_dense_param();
  static const int kDenseParamFieldNumber = 22;
  inline const ::svaf::DenseParamCP& dense_param() const;
  inline ::svaf::DenseParamCP* mutable_dense_param();
  inline ::svaf::DenseParamCP* release_dense_param();
  inline void set_allocated_dense_param(::svaf::DenseParamCP* dense_param);

  // optional .svaf.SimpleBlobParamCP sb_param = 23;
  inline bool has_sb_param() const;
  inline void clear_sb_param();
  static const int kSbParamFieldNumber = 23;
  inline const ::svaf::SimpleBlobParamCP& sb_param() const;
  inline ::svaf::SimpleBlobParamCP* mutable_sb_param();
  inline ::svaf::SimpleBlobParamCP* release_sb_param();
  inline void set_allocated_sb_param(::svaf::SimpleBlobParamCP* sb_param);

  // optional .svaf.AkazeParamCP akaze_param = 24;
  inline bool has_akaze_param() const;
  inline void clear_akaze_param();
  static const int kAkazeParamFieldNumber = 24;
  inline const ::svaf::AkazeParamCP& akaze_param() const;
  inline ::svaf::AkazeParamCP* mutable_akaze_param();
  inline ::svaf::AkazeParamCP* release_akaze_param();
  inline void set_allocated_akaze_param(::svaf::AkazeParamCP* akaze_param);

  // @@protoc_insertion_point(class_scope:svaf.CVPointParameter)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_isadd();
  inline void clear_has_isadd();
  inline void set_has_fast_param();
  inline void clear_has_fast_param();
  inline void set_has_mser_param();
  inline void clear_has_mser_param();
  inline void set_has_orb_param();
  inline void clear_has_orb_param();
  inline void set_has_brisk_param();
  inline void clear_has_brisk_param();
  inline void set_has_freak_param();
  inline void clear_has_freak_param();
  inline void set_has_star_param();
  inline void clear_has_star_param();
  inline void set_has_sift_param();
  inline void clear_has_sift_param();
  inline void set_has_surf_param();
  inline void clear_has_surf_param();
  inline void set_has_gftt_param();
  inline void clear_has_gftt_param();
  inline void set_has_harris_param();
  inline void clear_has_harris_param();
  inline void set_has_dense_param();
  inline void clear_has_dense_param();
  inline void set_has_sb_param();
  inline void clear_has_sb_param();
  inline void set_has_akaze_param();
  inline void clear_has_akaze_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  bool isadd_;
  ::svaf::FastParamCP* fast_param_;
  ::svaf::MSERParamCP* mser_param_;
  ::svaf::ORBParamCP* orb_param_;
  ::svaf::BriskParamCP* brisk_param_;
  ::svaf::FreakParamCP* freak_param_;
  ::svaf::StarParamCP* star_param_;
  ::svaf::SiftParamCP* sift_param_;
  ::svaf::SurfParamCP* surf_param_;
  ::svaf::GFTTParamCP* gftt_param_;
  ::svaf::HarrisParamCP* harris_param_;
  ::svaf::DenseParamCP* dense_param_;
  ::svaf::SimpleBlobParamCP* sb_param_;
  ::svaf::AkazeParamCP* akaze_param_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static CVPointParameter* default_instance_;
};
// -------------------------------------------------------------------

class FeatureDescriptorParameter : public ::google::protobuf::Message {
 public:
  FeatureDescriptorParameter();
  virtual ~FeatureDescriptorParameter();

  FeatureDescriptorParameter(const FeatureDescriptorParameter& from);

  inline FeatureDescriptorParameter& operator=(const FeatureDescriptorParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureDescriptorParameter& default_instance();

  void Swap(FeatureDescriptorParameter* other);

  // implements Message ----------------------------------------------

  FeatureDescriptorParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeatureDescriptorParameter& from);
  void MergeFrom(const FeatureDescriptorParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.FeatureDescriptorParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static FeatureDescriptorParameter* default_instance_;
};
// -------------------------------------------------------------------

class SIFTDescriptorParameter : public ::google::protobuf::Message {
 public:
  SIFTDescriptorParameter();
  virtual ~SIFTDescriptorParameter();

  SIFTDescriptorParameter(const SIFTDescriptorParameter& from);

  inline SIFTDescriptorParameter& operator=(const SIFTDescriptorParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SIFTDescriptorParameter& default_instance();

  void Swap(SIFTDescriptorParameter* other);

  // implements Message ----------------------------------------------

  SIFTDescriptorParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SIFTDescriptorParameter& from);
  void MergeFrom(const SIFTDescriptorParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.SIFTDescriptorParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static SIFTDescriptorParameter* default_instance_;
};
// -------------------------------------------------------------------

class SURFDescriptorParameter : public ::google::protobuf::Message {
 public:
  SURFDescriptorParameter();
  virtual ~SURFDescriptorParameter();

  SURFDescriptorParameter(const SURFDescriptorParameter& from);

  inline SURFDescriptorParameter& operator=(const SURFDescriptorParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SURFDescriptorParameter& default_instance();

  void Swap(SURFDescriptorParameter* other);

  // implements Message ----------------------------------------------

  SURFDescriptorParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SURFDescriptorParameter& from);
  void MergeFrom(const SURFDescriptorParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool upright = 1 [default = false];
  inline bool has_upright() const;
  inline void clear_upright();
  static const int kUprightFieldNumber = 1;
  inline bool upright() const;
  inline void set_upright(bool value);

  // @@protoc_insertion_point(class_scope:svaf.SURFDescriptorParameter)
 private:
  inline void set_has_upright();
  inline void clear_has_upright();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool upright_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static SURFDescriptorParameter* default_instance_;
};
// -------------------------------------------------------------------

class STARDescriptorParameter : public ::google::protobuf::Message {
 public:
  STARDescriptorParameter();
  virtual ~STARDescriptorParameter();

  STARDescriptorParameter(const STARDescriptorParameter& from);

  inline STARDescriptorParameter& operator=(const STARDescriptorParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const STARDescriptorParameter& default_instance();

  void Swap(STARDescriptorParameter* other);

  // implements Message ----------------------------------------------

  STARDescriptorParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const STARDescriptorParameter& from);
  void MergeFrom(const STARDescriptorParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.STARDescriptorParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static STARDescriptorParameter* default_instance_;
};
// -------------------------------------------------------------------

class BRIEFDescriptorParameter : public ::google::protobuf::Message {
 public:
  BRIEFDescriptorParameter();
  virtual ~BRIEFDescriptorParameter();

  BRIEFDescriptorParameter(const BRIEFDescriptorParameter& from);

  inline BRIEFDescriptorParameter& operator=(const BRIEFDescriptorParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BRIEFDescriptorParameter& default_instance();

  void Swap(BRIEFDescriptorParameter* other);

  // implements Message ----------------------------------------------

  BRIEFDescriptorParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BRIEFDescriptorParameter& from);
  void MergeFrom(const BRIEFDescriptorParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.BRIEFDescriptorParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static BRIEFDescriptorParameter* default_instance_;
};
// -------------------------------------------------------------------

class BRISKDescriptorParameter : public ::google::protobuf::Message {
 public:
  BRISKDescriptorParameter();
  virtual ~BRISKDescriptorParameter();

  BRISKDescriptorParameter(const BRISKDescriptorParameter& from);

  inline BRISKDescriptorParameter& operator=(const BRISKDescriptorParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BRISKDescriptorParameter& default_instance();

  void Swap(BRISKDescriptorParameter* other);

  // implements Message ----------------------------------------------

  BRISKDescriptorParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BRISKDescriptorParameter& from);
  void MergeFrom(const BRISKDescriptorParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.BRISKDescriptorParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static BRISKDescriptorParameter* default_instance_;
};
// -------------------------------------------------------------------

class FASTDescriptorParameter : public ::google::protobuf::Message {
 public:
  FASTDescriptorParameter();
  virtual ~FASTDescriptorParameter();

  FASTDescriptorParameter(const FASTDescriptorParameter& from);

  inline FASTDescriptorParameter& operator=(const FASTDescriptorParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FASTDescriptorParameter& default_instance();

  void Swap(FASTDescriptorParameter* other);

  // implements Message ----------------------------------------------

  FASTDescriptorParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FASTDescriptorParameter& from);
  void MergeFrom(const FASTDescriptorParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.FASTDescriptorParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static FASTDescriptorParameter* default_instance_;
};
// -------------------------------------------------------------------

class ORBDescriptorParameter : public ::google::protobuf::Message {
 public:
  ORBDescriptorParameter();
  virtual ~ORBDescriptorParameter();

  ORBDescriptorParameter(const ORBDescriptorParameter& from);

  inline ORBDescriptorParameter& operator=(const ORBDescriptorParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ORBDescriptorParameter& default_instance();

  void Swap(ORBDescriptorParameter* other);

  // implements Message ----------------------------------------------

  ORBDescriptorParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ORBDescriptorParameter& from);
  void MergeFrom(const ORBDescriptorParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.ORBDescriptorParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static ORBDescriptorParameter* default_instance_;
};
// -------------------------------------------------------------------

class KAZEDescriptorParameter : public ::google::protobuf::Message {
 public:
  KAZEDescriptorParameter();
  virtual ~KAZEDescriptorParameter();

  KAZEDescriptorParameter(const KAZEDescriptorParameter& from);

  inline KAZEDescriptorParameter& operator=(const KAZEDescriptorParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KAZEDescriptorParameter& default_instance();

  void Swap(KAZEDescriptorParameter* other);

  // implements Message ----------------------------------------------

  KAZEDescriptorParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KAZEDescriptorParameter& from);
  void MergeFrom(const KAZEDescriptorParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.KAZEDescriptorParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static KAZEDescriptorParameter* default_instance_;
};
// -------------------------------------------------------------------

class BriefDespCV : public ::google::protobuf::Message {
 public:
  BriefDespCV();
  virtual ~BriefDespCV();

  BriefDespCV(const BriefDespCV& from);

  inline BriefDespCV& operator=(const BriefDespCV& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BriefDespCV& default_instance();

  void Swap(BriefDespCV* other);

  // implements Message ----------------------------------------------

  BriefDespCV* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BriefDespCV& from);
  void MergeFrom(const BriefDespCV& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 length = 1 [default = 32];
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 1;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:svaf.BriefDespCV)
 private:
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 length_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static BriefDespCV* default_instance_;
};
// -------------------------------------------------------------------

class CVDescriptorParameter : public ::google::protobuf::Message {
 public:
  CVDescriptorParameter();
  virtual ~CVDescriptorParameter();

  CVDescriptorParameter(const CVDescriptorParameter& from);

  inline CVDescriptorParameter& operator=(const CVDescriptorParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CVDescriptorParameter& default_instance();

  void Swap(CVDescriptorParameter* other);

  // implements Message ----------------------------------------------

  CVDescriptorParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CVDescriptorParameter& from);
  void MergeFrom(const CVDescriptorParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CVDescriptorParameter_DespType DespType;
  static const DespType SIFT = CVDescriptorParameter_DespType_SIFT;
  static const DespType SURF = CVDescriptorParameter_DespType_SURF;
  static const DespType BRIEF = CVDescriptorParameter_DespType_BRIEF;
  static const DespType BRISK = CVDescriptorParameter_DespType_BRISK;
  static const DespType ORB = CVDescriptorParameter_DespType_ORB;
  static const DespType FREAK = CVDescriptorParameter_DespType_FREAK;
  static const DespType OPPONENT = CVDescriptorParameter_DespType_OPPONENT;
  static inline bool DespType_IsValid(int value) {
    return CVDescriptorParameter_DespType_IsValid(value);
  }
  static const DespType DespType_MIN =
    CVDescriptorParameter_DespType_DespType_MIN;
  static const DespType DespType_MAX =
    CVDescriptorParameter_DespType_DespType_MAX;
  static const int DespType_ARRAYSIZE =
    CVDescriptorParameter_DespType_DespType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DespType_descriptor() {
    return CVDescriptorParameter_DespType_descriptor();
  }
  static inline const ::std::string& DespType_Name(DespType value) {
    return CVDescriptorParameter_DespType_Name(value);
  }
  static inline bool DespType_Parse(const ::std::string& name,
      DespType* value) {
    return CVDescriptorParameter_DespType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .svaf.CVDescriptorParameter.DespType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::svaf::CVDescriptorParameter_DespType type() const;
  inline void set_type(::svaf::CVDescriptorParameter_DespType value);

  // optional .svaf.BriefDespCV brief_param = 2;
  inline bool has_brief_param() const;
  inline void clear_brief_param();
  static const int kBriefParamFieldNumber = 2;
  inline const ::svaf::BriefDespCV& brief_param() const;
  inline ::svaf::BriefDespCV* mutable_brief_param();
  inline ::svaf::BriefDespCV* release_brief_param();
  inline void set_allocated_brief_param(::svaf::BriefDespCV* brief_param);

  // @@protoc_insertion_point(class_scope:svaf.CVDescriptorParameter)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_brief_param();
  inline void clear_has_brief_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::svaf::BriefDespCV* brief_param_;
  int type_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static CVDescriptorParameter* default_instance_;
};
// -------------------------------------------------------------------

class VectorMatchParameter : public ::google::protobuf::Message {
 public:
  VectorMatchParameter();
  virtual ~VectorMatchParameter();

  VectorMatchParameter(const VectorMatchParameter& from);

  inline VectorMatchParameter& operator=(const VectorMatchParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VectorMatchParameter& default_instance();

  void Swap(VectorMatchParameter* other);

  // implements Message ----------------------------------------------

  VectorMatchParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VectorMatchParameter& from);
  void MergeFrom(const VectorMatchParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.VectorMatchParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static VectorMatchParameter* default_instance_;
};
// -------------------------------------------------------------------

class KDTreeMatchParameter : public ::google::protobuf::Message {
 public:
  KDTreeMatchParameter();
  virtual ~KDTreeMatchParameter();

  KDTreeMatchParameter(const KDTreeMatchParameter& from);

  inline KDTreeMatchParameter& operator=(const KDTreeMatchParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KDTreeMatchParameter& default_instance();

  void Swap(KDTreeMatchParameter* other);

  // implements Message ----------------------------------------------

  KDTreeMatchParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KDTreeMatchParameter& from);
  void MergeFrom(const KDTreeMatchParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.KDTreeMatchParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static KDTreeMatchParameter* default_instance_;
};
// -------------------------------------------------------------------

class EularMatchParameter : public ::google::protobuf::Message {
 public:
  EularMatchParameter();
  virtual ~EularMatchParameter();

  EularMatchParameter(const EularMatchParameter& from);

  inline EularMatchParameter& operator=(const EularMatchParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EularMatchParameter& default_instance();

  void Swap(EularMatchParameter* other);

  // implements Message ----------------------------------------------

  EularMatchParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EularMatchParameter& from);
  void MergeFrom(const EularMatchParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float thresh = 1 [default = 0.65];
  inline bool has_thresh() const;
  inline void clear_thresh();
  static const int kThreshFieldNumber = 1;
  inline float thresh() const;
  inline void set_thresh(float value);

  // @@protoc_insertion_point(class_scope:svaf.EularMatchParameter)
 private:
  inline void set_has_thresh();
  inline void clear_has_thresh();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float thresh_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static EularMatchParameter* default_instance_;
};
// -------------------------------------------------------------------

class RansacParameter : public ::google::protobuf::Message {
 public:
  RansacParameter();
  virtual ~RansacParameter();

  RansacParameter(const RansacParameter& from);

  inline RansacParameter& operator=(const RansacParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RansacParameter& default_instance();

  void Swap(RansacParameter* other);

  // implements Message ----------------------------------------------

  RansacParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RansacParameter& from);
  void MergeFrom(const RansacParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float thresh = 1 [default = 5];
  inline bool has_thresh() const;
  inline void clear_thresh();
  static const int kThreshFieldNumber = 1;
  inline float thresh() const;
  inline void set_thresh(float value);

  // @@protoc_insertion_point(class_scope:svaf.RansacParameter)
 private:
  inline void set_has_thresh();
  inline void clear_has_thresh();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float thresh_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static RansacParameter* default_instance_;
};
// -------------------------------------------------------------------

class BruteForceMatchParameter : public ::google::protobuf::Message {
 public:
  BruteForceMatchParameter();
  virtual ~BruteForceMatchParameter();

  BruteForceMatchParameter(const BruteForceMatchParameter& from);

  inline BruteForceMatchParameter& operator=(const BruteForceMatchParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BruteForceMatchParameter& default_instance();

  void Swap(BruteForceMatchParameter* other);

  // implements Message ----------------------------------------------

  BruteForceMatchParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BruteForceMatchParameter& from);
  void MergeFrom(const BruteForceMatchParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.BruteForceMatchParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static BruteForceMatchParameter* default_instance_;
};
// -------------------------------------------------------------------

class FLANNMatchParameter : public ::google::protobuf::Message {
 public:
  FLANNMatchParameter();
  virtual ~FLANNMatchParameter();

  FLANNMatchParameter(const FLANNMatchParameter& from);

  inline FLANNMatchParameter& operator=(const FLANNMatchParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FLANNMatchParameter& default_instance();

  void Swap(FLANNMatchParameter* other);

  // implements Message ----------------------------------------------

  FLANNMatchParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FLANNMatchParameter& from);
  void MergeFrom(const FLANNMatchParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.FLANNMatchParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static FLANNMatchParameter* default_instance_;
};
// -------------------------------------------------------------------

class ECMatchParameter : public ::google::protobuf::Message {
 public:
  ECMatchParameter();
  virtual ~ECMatchParameter();

  ECMatchParameter(const ECMatchParameter& from);

  inline ECMatchParameter& operator=(const ECMatchParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ECMatchParameter& default_instance();

  void Swap(ECMatchParameter* other);

  // implements Message ----------------------------------------------

  ECMatchParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ECMatchParameter& from);
  void MergeFrom(const ECMatchParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.ECMatchParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static ECMatchParameter* default_instance_;
};
// -------------------------------------------------------------------

class CVMatchParameter : public ::google::protobuf::Message {
 public:
  CVMatchParameter();
  virtual ~CVMatchParameter();

  CVMatchParameter(const CVMatchParameter& from);

  inline CVMatchParameter& operator=(const CVMatchParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CVMatchParameter& default_instance();

  void Swap(CVMatchParameter* other);

  // implements Message ----------------------------------------------

  CVMatchParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CVMatchParameter& from);
  void MergeFrom(const CVMatchParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CVMatchParameter_MatchType MatchType;
  static const MatchType BFL1 = CVMatchParameter_MatchType_BFL1;
  static const MatchType BFL2 = CVMatchParameter_MatchType_BFL2;
  static const MatchType BFH1 = CVMatchParameter_MatchType_BFH1;
  static const MatchType BFH2 = CVMatchParameter_MatchType_BFH2;
  static const MatchType FLANN = CVMatchParameter_MatchType_FLANN;
  static inline bool MatchType_IsValid(int value) {
    return CVMatchParameter_MatchType_IsValid(value);
  }
  static const MatchType MatchType_MIN =
    CVMatchParameter_MatchType_MatchType_MIN;
  static const MatchType MatchType_MAX =
    CVMatchParameter_MatchType_MatchType_MAX;
  static const int MatchType_ARRAYSIZE =
    CVMatchParameter_MatchType_MatchType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MatchType_descriptor() {
    return CVMatchParameter_MatchType_descriptor();
  }
  static inline const ::std::string& MatchType_Name(MatchType value) {
    return CVMatchParameter_MatchType_Name(value);
  }
  static inline bool MatchType_Parse(const ::std::string& name,
      MatchType* value) {
    return CVMatchParameter_MatchType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .svaf.CVMatchParameter.MatchType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::svaf::CVMatchParameter_MatchType type() const;
  inline void set_type(::svaf::CVMatchParameter_MatchType value);

  // optional bool crosscheck = 2 [default = true];
  inline bool has_crosscheck() const;
  inline void clear_crosscheck();
  static const int kCrosscheckFieldNumber = 2;
  inline bool crosscheck() const;
  inline void set_crosscheck(bool value);

  // @@protoc_insertion_point(class_scope:svaf.CVMatchParameter)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_crosscheck();
  inline void clear_has_crosscheck();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  bool crosscheck_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static CVMatchParameter* default_instance_;
};
// -------------------------------------------------------------------

class StereoMatchParameter : public ::google::protobuf::Message {
 public:
  StereoMatchParameter();
  virtual ~StereoMatchParameter();

  StereoMatchParameter(const StereoMatchParameter& from);

  inline StereoMatchParameter& operator=(const StereoMatchParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StereoMatchParameter& default_instance();

  void Swap(StereoMatchParameter* other);

  // implements Message ----------------------------------------------

  StereoMatchParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StereoMatchParameter& from);
  void MergeFrom(const StereoMatchParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.StereoMatchParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static StereoMatchParameter* default_instance_;
};
// -------------------------------------------------------------------

class SGMMatchParameter : public ::google::protobuf::Message {
 public:
  SGMMatchParameter();
  virtual ~SGMMatchParameter();

  SGMMatchParameter(const SGMMatchParameter& from);

  inline SGMMatchParameter& operator=(const SGMMatchParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SGMMatchParameter& default_instance();

  void Swap(SGMMatchParameter* other);

  // implements Message ----------------------------------------------

  SGMMatchParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SGMMatchParameter& from);
  void MergeFrom(const SGMMatchParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 max_disp = 1 [default = 24];
  inline bool has_max_disp() const;
  inline void clear_max_disp();
  static const int kMaxDispFieldNumber = 1;
  inline ::google::protobuf::int32 max_disp() const;
  inline void set_max_disp(::google::protobuf::int32 value);

  // optional int32 factor = 2 [default = 2560];
  inline bool has_factor() const;
  inline void clear_factor();
  static const int kFactorFieldNumber = 2;
  inline ::google::protobuf::int32 factor() const;
  inline void set_factor(::google::protobuf::int32 value);

  // optional int32 dispmr = 3 [default = 1];
  inline bool has_dispmr() const;
  inline void clear_dispmr();
  static const int kDispmrFieldNumber = 3;
  inline ::google::protobuf::int32 dispmr() const;
  inline void set_dispmr(::google::protobuf::int32 value);

  // optional float r1 = 4 [default = 10];
  inline bool has_r1() const;
  inline void clear_r1();
  static const int kR1FieldNumber = 4;
  inline float r1() const;
  inline void set_r1(float value);

  // optional float r2 = 5 [default = 500];
  inline bool has_r2() const;
  inline void clear_r2();
  static const int kR2FieldNumber = 5;
  inline float r2() const;
  inline void set_r2(float value);

  // optional string prefix = 6 [default = "./sgm"];
  inline bool has_prefix() const;
  inline void clear_prefix();
  static const int kPrefixFieldNumber = 6;
  inline const ::std::string& prefix() const;
  inline void set_prefix(const ::std::string& value);
  inline void set_prefix(const char* value);
  inline void set_prefix(const char* value, size_t size);
  inline ::std::string* mutable_prefix();
  inline ::std::string* release_prefix();
  inline void set_allocated_prefix(::std::string* prefix);

  // optional bool savetxt = 7 [default = false];
  inline bool has_savetxt() const;
  inline void clear_savetxt();
  static const int kSavetxtFieldNumber = 7;
  inline bool savetxt() const;
  inline void set_savetxt(bool value);

  // @@protoc_insertion_point(class_scope:svaf.SGMMatchParameter)
 private:
  inline void set_has_max_disp();
  inline void clear_has_max_disp();
  inline void set_has_factor();
  inline void clear_has_factor();
  inline void set_has_dispmr();
  inline void clear_has_dispmr();
  inline void set_has_r1();
  inline void clear_has_r1();
  inline void set_has_r2();
  inline void clear_has_r2();
  inline void set_has_prefix();
  inline void clear_has_prefix();
  inline void set_has_savetxt();
  inline void clear_has_savetxt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 max_disp_;
  ::google::protobuf::int32 factor_;
  ::google::protobuf::int32 dispmr_;
  float r1_;
  static ::std::string* _default_prefix_;
  ::std::string* prefix_;
  float r2_;
  bool savetxt_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static SGMMatchParameter* default_instance_;
};
// -------------------------------------------------------------------

class EADPMatchParameter : public ::google::protobuf::Message {
 public:
  EADPMatchParameter();
  virtual ~EADPMatchParameter();

  EADPMatchParameter(const EADPMatchParameter& from);

  inline EADPMatchParameter& operator=(const EADPMatchParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EADPMatchParameter& default_instance();

  void Swap(EADPMatchParameter* other);

  // implements Message ----------------------------------------------

  EADPMatchParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EADPMatchParameter& from);
  void MergeFrom(const EADPMatchParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 max_disp = 1 [default = 24];
  inline bool has_max_disp() const;
  inline void clear_max_disp();
  static const int kMaxDispFieldNumber = 1;
  inline ::google::protobuf::int32 max_disp() const;
  inline void set_max_disp(::google::protobuf::int32 value);

  // optional int32 factor = 2 [default = 2560];
  inline bool has_factor() const;
  inline void clear_factor();
  static const int kFactorFieldNumber = 2;
  inline ::google::protobuf::int32 factor() const;
  inline void set_factor(::google::protobuf::int32 value);

  // optional int32 guidmr = 3 [default = 1];
  inline bool has_guidmr() const;
  inline void clear_guidmr();
  static const int kGuidmrFieldNumber = 3;
  inline ::google::protobuf::int32 guidmr() const;
  inline void set_guidmr(::google::protobuf::int32 value);

  // optional int32 dispmr = 4 [default = 1];
  inline bool has_dispmr() const;
  inline void clear_dispmr();
  static const int kDispmrFieldNumber = 4;
  inline ::google::protobuf::int32 dispmr() const;
  inline void set_dispmr(::google::protobuf::int32 value);

  // optional float sg = 5 [default = -25];
  inline bool has_sg() const;
  inline void clear_sg();
  static const int kSgFieldNumber = 5;
  inline float sg() const;
  inline void set_sg(float value);

  // optional float sc = 6 [default = 25.5];
  inline bool has_sc() const;
  inline void clear_sc();
  static const int kScFieldNumber = 6;
  inline float sc() const;
  inline void set_sc(float value);

  // optional float r1 = 7 [default = 10];
  inline bool has_r1() const;
  inline void clear_r1();
  static const int kR1FieldNumber = 7;
  inline float r1() const;
  inline void set_r1(float value);

  // optional float r2 = 8 [default = 500];
  inline bool has_r2() const;
  inline void clear_r2();
  static const int kR2FieldNumber = 8;
  inline float r2() const;
  inline void set_r2(float value);

  // optional string prefix = 9 [default = "./eadp"];
  inline bool has_prefix() const;
  inline void clear_prefix();
  static const int kPrefixFieldNumber = 9;
  inline const ::std::string& prefix() const;
  inline void set_prefix(const ::std::string& value);
  inline void set_prefix(const char* value);
  inline void set_prefix(const char* value, size_t size);
  inline ::std::string* mutable_prefix();
  inline ::std::string* release_prefix();
  inline void set_allocated_prefix(::std::string* prefix);

  // optional bool savetxt = 10 [default = false];
  inline bool has_savetxt() const;
  inline void clear_savetxt();
  static const int kSavetxtFieldNumber = 10;
  inline bool savetxt() const;
  inline void set_savetxt(bool value);

  // @@protoc_insertion_point(class_scope:svaf.EADPMatchParameter)
 private:
  inline void set_has_max_disp();
  inline void clear_has_max_disp();
  inline void set_has_factor();
  inline void clear_has_factor();
  inline void set_has_guidmr();
  inline void clear_has_guidmr();
  inline void set_has_dispmr();
  inline void clear_has_dispmr();
  inline void set_has_sg();
  inline void clear_has_sg();
  inline void set_has_sc();
  inline void clear_has_sc();
  inline void set_has_r1();
  inline void clear_has_r1();
  inline void set_has_r2();
  inline void clear_has_r2();
  inline void set_has_prefix();
  inline void clear_has_prefix();
  inline void set_has_savetxt();
  inline void clear_has_savetxt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 max_disp_;
  ::google::protobuf::int32 factor_;
  ::google::protobuf::int32 guidmr_;
  ::google::protobuf::int32 dispmr_;
  float sg_;
  float sc_;
  float r1_;
  float r2_;
  static ::std::string* _default_prefix_;
  ::std::string* prefix_;
  bool savetxt_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static EADPMatchParameter* default_instance_;
};
// -------------------------------------------------------------------

class OutputParameter : public ::google::protobuf::Message {
 public:
  OutputParameter();
  virtual ~OutputParameter();

  OutputParameter(const OutputParameter& from);

  inline OutputParameter& operator=(const OutputParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OutputParameter& default_instance();

  void Swap(OutputParameter* other);

  // implements Message ----------------------------------------------

  OutputParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OutputParameter& from);
  void MergeFrom(const OutputParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.OutputParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static OutputParameter* default_instance_;
};
// -------------------------------------------------------------------

class TriangularParameter : public ::google::protobuf::Message {
 public:
  TriangularParameter();
  virtual ~TriangularParameter();

  TriangularParameter(const TriangularParameter& from);

  inline TriangularParameter& operator=(const TriangularParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TriangularParameter& default_instance();

  void Swap(TriangularParameter* other);

  // implements Message ----------------------------------------------

  TriangularParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TriangularParameter& from);
  void MergeFrom(const TriangularParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool visible = 1 [default = true];
  inline bool has_visible() const;
  inline void clear_visible();
  static const int kVisibleFieldNumber = 1;
  inline bool visible() const;
  inline void set_visible(bool value);

  // optional string toolbox_dir = 2;
  inline bool has_toolbox_dir() const;
  inline void clear_toolbox_dir();
  static const int kToolboxDirFieldNumber = 2;
  inline const ::std::string& toolbox_dir() const;
  inline void set_toolbox_dir(const ::std::string& value);
  inline void set_toolbox_dir(const char* value);
  inline void set_toolbox_dir(const char* value, size_t size);
  inline ::std::string* mutable_toolbox_dir();
  inline ::std::string* release_toolbox_dir();
  inline void set_allocated_toolbox_dir(::std::string* toolbox_dir);

  // optional string calibmat_dir = 3;
  inline bool has_calibmat_dir() const;
  inline void clear_calibmat_dir();
  static const int kCalibmatDirFieldNumber = 3;
  inline const ::std::string& calibmat_dir() const;
  inline void set_calibmat_dir(const ::std::string& value);
  inline void set_calibmat_dir(const char* value);
  inline void set_calibmat_dir(const char* value, size_t size);
  inline ::std::string* mutable_calibmat_dir();
  inline ::std::string* release_calibmat_dir();
  inline void set_allocated_calibmat_dir(::std::string* calibmat_dir);

  // optional bool savepc = 4 [default = false];
  inline bool has_savepc() const;
  inline void clear_savepc();
  static const int kSavepcFieldNumber = 4;
  inline bool savepc() const;
  inline void set_savepc(bool value);

  // optional string pcname = 5 [default = "./ref_pointcloud.pc"];
  inline bool has_pcname() const;
  inline void clear_pcname();
  static const int kPcnameFieldNumber = 5;
  inline const ::std::string& pcname() const;
  inline void set_pcname(const ::std::string& value);
  inline void set_pcname(const char* value);
  inline void set_pcname(const char* value, size_t size);
  inline ::std::string* mutable_pcname();
  inline ::std::string* release_pcname();
  inline void set_allocated_pcname(::std::string* pcname);

  // @@protoc_insertion_point(class_scope:svaf.TriangularParameter)
 private:
  inline void set_has_visible();
  inline void clear_has_visible();
  inline void set_has_toolbox_dir();
  inline void clear_has_toolbox_dir();
  inline void set_has_calibmat_dir();
  inline void clear_has_calibmat_dir();
  inline void set_has_savepc();
  inline void clear_has_savepc();
  inline void set_has_pcname();
  inline void clear_has_pcname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* toolbox_dir_;
  ::std::string* calibmat_dir_;
  static ::std::string* _default_pcname_;
  ::std::string* pcname_;
  bool visible_;
  bool savepc_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static TriangularParameter* default_instance_;
};
// -------------------------------------------------------------------

class MatrixMulParameter : public ::google::protobuf::Message {
 public:
  MatrixMulParameter();
  virtual ~MatrixMulParameter();

  MatrixMulParameter(const MatrixMulParameter& from);

  inline MatrixMulParameter& operator=(const MatrixMulParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatrixMulParameter& default_instance();

  void Swap(MatrixMulParameter* other);

  // implements Message ----------------------------------------------

  MatrixMulParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatrixMulParameter& from);
  void MergeFrom(const MatrixMulParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string filename = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 1;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional string col0 = 2;
  inline bool has_col0() const;
  inline void clear_col0();
  static const int kCol0FieldNumber = 2;
  inline const ::std::string& col0() const;
  inline void set_col0(const ::std::string& value);
  inline void set_col0(const char* value);
  inline void set_col0(const char* value, size_t size);
  inline ::std::string* mutable_col0();
  inline ::std::string* release_col0();
  inline void set_allocated_col0(::std::string* col0);

  // optional string col1 = 3;
  inline bool has_col1() const;
  inline void clear_col1();
  static const int kCol1FieldNumber = 3;
  inline const ::std::string& col1() const;
  inline void set_col1(const ::std::string& value);
  inline void set_col1(const char* value);
  inline void set_col1(const char* value, size_t size);
  inline ::std::string* mutable_col1();
  inline ::std::string* release_col1();
  inline void set_allocated_col1(::std::string* col1);

  // optional string col2 = 4;
  inline bool has_col2() const;
  inline void clear_col2();
  static const int kCol2FieldNumber = 4;
  inline const ::std::string& col2() const;
  inline void set_col2(const ::std::string& value);
  inline void set_col2(const char* value);
  inline void set_col2(const char* value, size_t size);
  inline ::std::string* mutable_col2();
  inline ::std::string* release_col2();
  inline void set_allocated_col2(::std::string* col2);

  // @@protoc_insertion_point(class_scope:svaf.MatrixMulParameter)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_col0();
  inline void clear_has_col0();
  inline void set_has_col1();
  inline void clear_has_col1();
  inline void set_has_col2();
  inline void clear_has_col2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* filename_;
  ::std::string* col0_;
  ::std::string* col1_;
  ::std::string* col2_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static MatrixMulParameter* default_instance_;
};
// -------------------------------------------------------------------

class PositionEstimateParameter : public ::google::protobuf::Message {
 public:
  PositionEstimateParameter();
  virtual ~PositionEstimateParameter();

  PositionEstimateParameter(const PositionEstimateParameter& from);

  inline PositionEstimateParameter& operator=(const PositionEstimateParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PositionEstimateParameter& default_instance();

  void Swap(PositionEstimateParameter* other);

  // implements Message ----------------------------------------------

  PositionEstimateParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PositionEstimateParameter& from);
  void MergeFrom(const PositionEstimateParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.PositionEstimateParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static PositionEstimateParameter* default_instance_;
};
// -------------------------------------------------------------------

class CenterPointParameter : public ::google::protobuf::Message {
 public:
  CenterPointParameter();
  virtual ~CenterPointParameter();

  CenterPointParameter(const CenterPointParameter& from);

  inline CenterPointParameter& operator=(const CenterPointParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CenterPointParameter& default_instance();

  void Swap(CenterPointParameter* other);

  // implements Message ----------------------------------------------

  CenterPointParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CenterPointParameter& from);
  void MergeFrom(const CenterPointParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svaf.CenterPointParameter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static CenterPointParameter* default_instance_;
};
// -------------------------------------------------------------------

class CoordiParameter : public ::google::protobuf::Message {
 public:
  CoordiParameter();
  virtual ~CoordiParameter();

  CoordiParameter(const CoordiParameter& from);

  inline CoordiParameter& operator=(const CoordiParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CoordiParameter& default_instance();

  void Swap(CoordiParameter* other);

  // implements Message ----------------------------------------------

  CoordiParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CoordiParameter& from);
  void MergeFrom(const CoordiParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1 [default = 0];
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2 [default = 0];
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 3 [default = 0];
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // optional float a = 4 [default = 0];
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 4;
  inline float a() const;
  inline void set_a(float value);

  // optional float b = 5 [default = 0];
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 5;
  inline float b() const;
  inline void set_b(float value);

  // optional float c = 6 [default = 0];
  inline bool has_c() const;
  inline void clear_c();
  static const int kCFieldNumber = 6;
  inline float c() const;
  inline void set_c(float value);

  // @@protoc_insertion_point(class_scope:svaf.CoordiParameter)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_c();
  inline void clear_has_c();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  float a_;
  float b_;
  float c_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static CoordiParameter* default_instance_;
};
// -------------------------------------------------------------------

class SACIAParameter : public ::google::protobuf::Message {
 public:
  SACIAParameter();
  virtual ~SACIAParameter();

  SACIAParameter(const SACIAParameter& from);

  inline SACIAParameter& operator=(const SACIAParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SACIAParameter& default_instance();

  void Swap(SACIAParameter* other);

  // implements Message ----------------------------------------------

  SACIAParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SACIAParameter& from);
  void MergeFrom(const SACIAParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 max_iter = 1 [default = 1000];
  inline bool has_max_iter() const;
  inline void clear_max_iter();
  static const int kMaxIterFieldNumber = 1;
  inline ::google::protobuf::int32 max_iter() const;
  inline void set_max_iter(::google::protobuf::int32 value);

  // optional float min_cors = 2 [default = 3];
  inline bool has_min_cors() const;
  inline void clear_min_cors();
  static const int kMinCorsFieldNumber = 2;
  inline float min_cors() const;
  inline void set_min_cors(float value);

  // optional float max_cors = 3 [default = 1000];
  inline bool has_max_cors() const;
  inline void clear_max_cors();
  static const int kMaxCorsFieldNumber = 3;
  inline float max_cors() const;
  inline void set_max_cors(float value);

  // optional float voxel_grid = 4 [default = 3];
  inline bool has_voxel_grid() const;
  inline void clear_voxel_grid();
  static const int kVoxelGridFieldNumber = 4;
  inline float voxel_grid() const;
  inline void set_voxel_grid(float value);

  // optional float norm_rad = 5 [default = 20];
  inline bool has_norm_rad() const;
  inline void clear_norm_rad();
  static const int kNormRadFieldNumber = 5;
  inline float norm_rad() const;
  inline void set_norm_rad(float value);

  // optional float feat_rad = 6 [default = 50];
  inline bool has_feat_rad() const;
  inline void clear_feat_rad();
  static const int kFeatRadFieldNumber = 6;
  inline float feat_rad() const;
  inline void set_feat_rad(float value);

  // @@protoc_insertion_point(class_scope:svaf.SACIAParameter)
 private:
  inline void set_has_max_iter();
  inline void clear_has_max_iter();
  inline void set_has_min_cors();
  inline void clear_has_min_cors();
  inline void set_has_max_cors();
  inline void clear_has_max_cors();
  inline void set_has_voxel_grid();
  inline void clear_has_voxel_grid();
  inline void set_has_norm_rad();
  inline void clear_has_norm_rad();
  inline void set_has_feat_rad();
  inline void clear_has_feat_rad();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 max_iter_;
  float min_cors_;
  float max_cors_;
  float voxel_grid_;
  float norm_rad_;
  float feat_rad_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static SACIAParameter* default_instance_;
};
// -------------------------------------------------------------------

class SACIAEstimateParameter : public ::google::protobuf::Message {
 public:
  SACIAEstimateParameter();
  virtual ~SACIAEstimateParameter();

  SACIAEstimateParameter(const SACIAEstimateParameter& from);

  inline SACIAEstimateParameter& operator=(const SACIAEstimateParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SACIAEstimateParameter& default_instance();

  void Swap(SACIAEstimateParameter* other);

  // implements Message ----------------------------------------------

  SACIAEstimateParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SACIAEstimateParameter& from);
  void MergeFrom(const SACIAEstimateParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pcd_filename = 1;
  inline bool has_pcd_filename() const;
  inline void clear_pcd_filename();
  static const int kPcdFilenameFieldNumber = 1;
  inline const ::std::string& pcd_filename() const;
  inline void set_pcd_filename(const ::std::string& value);
  inline void set_pcd_filename(const char* value);
  inline void set_pcd_filename(const char* value, size_t size);
  inline ::std::string* mutable_pcd_filename();
  inline ::std::string* release_pcd_filename();
  inline void set_allocated_pcd_filename(::std::string* pcd_filename);

  // optional .svaf.SACIAParameter ia_param = 2;
  inline bool has_ia_param() const;
  inline void clear_ia_param();
  static const int kIaParamFieldNumber = 2;
  inline const ::svaf::SACIAParameter& ia_param() const;
  inline ::svaf::SACIAParameter* mutable_ia_param();
  inline ::svaf::SACIAParameter* release_ia_param();
  inline void set_allocated_ia_param(::svaf::SACIAParameter* ia_param);

  // optional .svaf.CoordiParameter coor_param = 3;
  inline bool has_coor_param() const;
  inline void clear_coor_param();
  static const int kCoorParamFieldNumber = 3;
  inline const ::svaf::CoordiParameter& coor_param() const;
  inline ::svaf::CoordiParameter* mutable_coor_param();
  inline ::svaf::CoordiParameter* release_coor_param();
  inline void set_allocated_coor_param(::svaf::CoordiParameter* coor_param);

  // @@protoc_insertion_point(class_scope:svaf.SACIAEstimateParameter)
 private:
  inline void set_has_pcd_filename();
  inline void clear_has_pcd_filename();
  inline void set_has_ia_param();
  inline void clear_has_ia_param();
  inline void set_has_coor_param();
  inline void clear_has_coor_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* pcd_filename_;
  ::svaf::SACIAParameter* ia_param_;
  ::svaf::CoordiParameter* coor_param_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static SACIAEstimateParameter* default_instance_;
};
// -------------------------------------------------------------------

class ICPParameter : public ::google::protobuf::Message {
 public:
  ICPParameter();
  virtual ~ICPParameter();

  ICPParameter(const ICPParameter& from);

  inline ICPParameter& operator=(const ICPParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ICPParameter& default_instance();

  void Swap(ICPParameter* other);

  // implements Message ----------------------------------------------

  ICPParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ICPParameter& from);
  void MergeFrom(const ICPParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 max_iter = 1 [default = 2];
  inline bool has_max_iter() const;
  inline void clear_max_iter();
  static const int kMaxIterFieldNumber = 1;
  inline ::google::protobuf::int32 max_iter() const;
  inline void set_max_iter(::google::protobuf::int32 value);

  // optional float max_resp = 2 [default = 10];
  inline bool has_max_resp() const;
  inline void clear_max_resp();
  static const int kMaxRespFieldNumber = 2;
  inline float max_resp() const;
  inline void set_max_resp(float value);

  // optional float esp = 3 [default = 0.1];
  inline bool has_esp() const;
  inline void clear_esp();
  static const int kEspFieldNumber = 3;
  inline float esp() const;
  inline void set_esp(float value);

  // @@protoc_insertion_point(class_scope:svaf.ICPParameter)
 private:
  inline void set_has_max_iter();
  inline void clear_has_max_iter();
  inline void set_has_max_resp();
  inline void clear_has_max_resp();
  inline void set_has_esp();
  inline void clear_has_esp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 max_iter_;
  float max_resp_;
  float esp_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static ICPParameter* default_instance_;
};
// -------------------------------------------------------------------

class IAICPEstimateParameter : public ::google::protobuf::Message {
 public:
  IAICPEstimateParameter();
  virtual ~IAICPEstimateParameter();

  IAICPEstimateParameter(const IAICPEstimateParameter& from);

  inline IAICPEstimateParameter& operator=(const IAICPEstimateParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IAICPEstimateParameter& default_instance();

  void Swap(IAICPEstimateParameter* other);

  // implements Message ----------------------------------------------

  IAICPEstimateParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IAICPEstimateParameter& from);
  void MergeFrom(const IAICPEstimateParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pcd_filename = 1;
  inline bool has_pcd_filename() const;
  inline void clear_pcd_filename();
  static const int kPcdFilenameFieldNumber = 1;
  inline const ::std::string& pcd_filename() const;
  inline void set_pcd_filename(const ::std::string& value);
  inline void set_pcd_filename(const char* value);
  inline void set_pcd_filename(const char* value, size_t size);
  inline ::std::string* mutable_pcd_filename();
  inline ::std::string* release_pcd_filename();
  inline void set_allocated_pcd_filename(::std::string* pcd_filename);

  // optional .svaf.SACIAParameter sacia_param = 2;
  inline bool has_sacia_param() const;
  inline void clear_sacia_param();
  static const int kSaciaParamFieldNumber = 2;
  inline const ::svaf::SACIAParameter& sacia_param() const;
  inline ::svaf::SACIAParameter* mutable_sacia_param();
  inline ::svaf::SACIAParameter* release_sacia_param();
  inline void set_allocated_sacia_param(::svaf::SACIAParameter* sacia_param);

  // optional .svaf.ICPParameter icp_param = 3;
  inline bool has_icp_param() const;
  inline void clear_icp_param();
  static const int kIcpParamFieldNumber = 3;
  inline const ::svaf::ICPParameter& icp_param() const;
  inline ::svaf::ICPParameter* mutable_icp_param();
  inline ::svaf::ICPParameter* release_icp_param();
  inline void set_allocated_icp_param(::svaf::ICPParameter* icp_param);

  // optional .svaf.CoordiParameter coor_param = 4;
  inline bool has_coor_param() const;
  inline void clear_coor_param();
  static const int kCoorParamFieldNumber = 4;
  inline const ::svaf::CoordiParameter& coor_param() const;
  inline ::svaf::CoordiParameter* mutable_coor_param();
  inline ::svaf::CoordiParameter* release_coor_param();
  inline void set_allocated_coor_param(::svaf::CoordiParameter* coor_param);

  // @@protoc_insertion_point(class_scope:svaf.IAICPEstimateParameter)
 private:
  inline void set_has_pcd_filename();
  inline void clear_has_pcd_filename();
  inline void set_has_sacia_param();
  inline void clear_has_sacia_param();
  inline void set_has_icp_param();
  inline void clear_has_icp_param();
  inline void set_has_coor_param();
  inline void clear_has_coor_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* pcd_filename_;
  ::svaf::SACIAParameter* sacia_param_;
  ::svaf::ICPParameter* icp_param_;
  ::svaf::CoordiParameter* coor_param_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static IAICPEstimateParameter* default_instance_;
};
// -------------------------------------------------------------------

class NDTParameter : public ::google::protobuf::Message {
 public:
  NDTParameter();
  virtual ~NDTParameter();

  NDTParameter(const NDTParameter& from);

  inline NDTParameter& operator=(const NDTParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NDTParameter& default_instance();

  void Swap(NDTParameter* other);

  // implements Message ----------------------------------------------

  NDTParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NDTParameter& from);
  void MergeFrom(const NDTParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 max_iter = 1 [default = 100];
  inline bool has_max_iter() const;
  inline void clear_max_iter();
  static const int kMaxIterFieldNumber = 1;
  inline ::google::protobuf::int32 max_iter() const;
  inline void set_max_iter(::google::protobuf::int32 value);

  // optional float step_size = 2 [default = 10];
  inline bool has_step_size() const;
  inline void clear_step_size();
  static const int kStepSizeFieldNumber = 2;
  inline float step_size() const;
  inline void set_step_size(float value);

  // optional float resolution = 3 [default = 10];
  inline bool has_resolution() const;
  inline void clear_resolution();
  static const int kResolutionFieldNumber = 3;
  inline float resolution() const;
  inline void set_resolution(float value);

  // optional float esp = 4 [default = 0.1];
  inline bool has_esp() const;
  inline void clear_esp();
  static const int kEspFieldNumber = 4;
  inline float esp() const;
  inline void set_esp(float value);

  // @@protoc_insertion_point(class_scope:svaf.NDTParameter)
 private:
  inline void set_has_max_iter();
  inline void clear_has_max_iter();
  inline void set_has_step_size();
  inline void clear_has_step_size();
  inline void set_has_resolution();
  inline void clear_has_resolution();
  inline void set_has_esp();
  inline void clear_has_esp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 max_iter_;
  float step_size_;
  float resolution_;
  float esp_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static NDTParameter* default_instance_;
};
// -------------------------------------------------------------------

class IANDTEstimateParameter : public ::google::protobuf::Message {
 public:
  IANDTEstimateParameter();
  virtual ~IANDTEstimateParameter();

  IANDTEstimateParameter(const IANDTEstimateParameter& from);

  inline IANDTEstimateParameter& operator=(const IANDTEstimateParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IANDTEstimateParameter& default_instance();

  void Swap(IANDTEstimateParameter* other);

  // implements Message ----------------------------------------------

  IANDTEstimateParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IANDTEstimateParameter& from);
  void MergeFrom(const IANDTEstimateParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pcd_filename = 1;
  inline bool has_pcd_filename() const;
  inline void clear_pcd_filename();
  static const int kPcdFilenameFieldNumber = 1;
  inline const ::std::string& pcd_filename() const;
  inline void set_pcd_filename(const ::std::string& value);
  inline void set_pcd_filename(const char* value);
  inline void set_pcd_filename(const char* value, size_t size);
  inline ::std::string* mutable_pcd_filename();
  inline ::std::string* release_pcd_filename();
  inline void set_allocated_pcd_filename(::std::string* pcd_filename);

  // optional .svaf.SACIAParameter sacia_param = 2;
  inline bool has_sacia_param() const;
  inline void clear_sacia_param();
  static const int kSaciaParamFieldNumber = 2;
  inline const ::svaf::SACIAParameter& sacia_param() const;
  inline ::svaf::SACIAParameter* mutable_sacia_param();
  inline ::svaf::SACIAParameter* release_sacia_param();
  inline void set_allocated_sacia_param(::svaf::SACIAParameter* sacia_param);

  // optional .svaf.NDTParameter ndt_param = 3;
  inline bool has_ndt_param() const;
  inline void clear_ndt_param();
  static const int kNdtParamFieldNumber = 3;
  inline const ::svaf::NDTParameter& ndt_param() const;
  inline ::svaf::NDTParameter* mutable_ndt_param();
  inline ::svaf::NDTParameter* release_ndt_param();
  inline void set_allocated_ndt_param(::svaf::NDTParameter* ndt_param);

  // optional .svaf.CoordiParameter coor_param = 4;
  inline bool has_coor_param() const;
  inline void clear_coor_param();
  static const int kCoorParamFieldNumber = 4;
  inline const ::svaf::CoordiParameter& coor_param() const;
  inline ::svaf::CoordiParameter* mutable_coor_param();
  inline ::svaf::CoordiParameter* release_coor_param();
  inline void set_allocated_coor_param(::svaf::CoordiParameter* coor_param);

  // @@protoc_insertion_point(class_scope:svaf.IANDTEstimateParameter)
 private:
  inline void set_has_pcd_filename();
  inline void clear_has_pcd_filename();
  inline void set_has_sacia_param();
  inline void clear_has_sacia_param();
  inline void set_has_ndt_param();
  inline void clear_has_ndt_param();
  inline void set_has_coor_param();
  inline void clear_has_coor_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* pcd_filename_;
  ::svaf::SACIAParameter* sacia_param_;
  ::svaf::NDTParameter* ndt_param_;
  ::svaf::CoordiParameter* coor_param_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static IANDTEstimateParameter* default_instance_;
};
// -------------------------------------------------------------------

class LayerParameter : public ::google::protobuf::Message {
 public:
  LayerParameter();
  virtual ~LayerParameter();

  LayerParameter(const LayerParameter& from);

  inline LayerParameter& operator=(const LayerParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerParameter& default_instance();

  void Swap(LayerParameter* other);

  // implements Message ----------------------------------------------

  LayerParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerParameter& from);
  void MergeFrom(const LayerParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LayerParameter_LayerType LayerType;
  static const LayerType NONE = LayerParameter_LayerType_NONE;
  static const LayerType IMAGE = LayerParameter_LayerType_IMAGE;
  static const LayerType IMAGE_PAIR = LayerParameter_LayerType_IMAGE_PAIR;
  static const LayerType VIDEO = LayerParameter_LayerType_VIDEO;
  static const LayerType VIDEO_PAIR = LayerParameter_LayerType_VIDEO_PAIR;
  static const LayerType CAMERA = LayerParameter_LayerType_CAMERA;
  static const LayerType CAMERA_PAIR = LayerParameter_LayerType_CAMERA_PAIR;
  static const LayerType DSP = LayerParameter_LayerType_DSP;
  static const LayerType DSP_PAIR = LayerParameter_LayerType_DSP_PAIR;
  static const LayerType KINECT = LayerParameter_LayerType_KINECT;
  static const LayerType IMAGE_FOLDER = LayerParameter_LayerType_IMAGE_FOLDER;
  static const LayerType IMAGE_PAIR_FOLDER = LayerParameter_LayerType_IMAGE_PAIR_FOLDER;
  static const LayerType ADABOOST = LayerParameter_LayerType_ADABOOST;
  static const LayerType MILTRACK = LayerParameter_LayerType_MILTRACK;
  static const LayerType BITTRACK = LayerParameter_LayerType_BITTRACK;
  static const LayerType SIFT_POINT = LayerParameter_LayerType_SIFT_POINT;
  static const LayerType SURF_POINT = LayerParameter_LayerType_SURF_POINT;
  static const LayerType STAR_POINT = LayerParameter_LayerType_STAR_POINT;
  static const LayerType BRISK_POINT = LayerParameter_LayerType_BRISK_POINT;
  static const LayerType FAST_POINT = LayerParameter_LayerType_FAST_POINT;
  static const LayerType ORB_POINT = LayerParameter_LayerType_ORB_POINT;
  static const LayerType KAZE_POINT = LayerParameter_LayerType_KAZE_POINT;
  static const LayerType HARRIS_POINT = LayerParameter_LayerType_HARRIS_POINT;
  static const LayerType CV_POINT = LayerParameter_LayerType_CV_POINT;
  static const LayerType SIFT_DESP = LayerParameter_LayerType_SIFT_DESP;
  static const LayerType SURF_DESP = LayerParameter_LayerType_SURF_DESP;
  static const LayerType STAR_DESP = LayerParameter_LayerType_STAR_DESP;
  static const LayerType BRIEF_DESP = LayerParameter_LayerType_BRIEF_DESP;
  static const LayerType BRISK_DESP = LayerParameter_LayerType_BRISK_DESP;
  static const LayerType FAST_DESP = LayerParameter_LayerType_FAST_DESP;
  static const LayerType ORB_DESP = LayerParameter_LayerType_ORB_DESP;
  static const LayerType KAZE_DESP = LayerParameter_LayerType_KAZE_DESP;
  static const LayerType CV_DESP = LayerParameter_LayerType_CV_DESP;
  static const LayerType KDTREE_MATCH = LayerParameter_LayerType_KDTREE_MATCH;
  static const LayerType EULAR_MATCH = LayerParameter_LayerType_EULAR_MATCH;
  static const LayerType RANSAC = LayerParameter_LayerType_RANSAC;
  static const LayerType BF_MATCH = LayerParameter_LayerType_BF_MATCH;
  static const LayerType FLANN_MATCH = LayerParameter_LayerType_FLANN_MATCH;
  static const LayerType EC_MATCH = LayerParameter_LayerType_EC_MATCH;
  static const LayerType CV_MATCH = LayerParameter_LayerType_CV_MATCH;
  static const LayerType SGM_MATCH = LayerParameter_LayerType_SGM_MATCH;
  static const LayerType EADP_MATCH = LayerParameter_LayerType_EADP_MATCH;
  static const LayerType TRIANG = LayerParameter_LayerType_TRIANG;
  static const LayerType MXMUL = LayerParameter_LayerType_MXMUL;
  static const LayerType CENTER_POS = LayerParameter_LayerType_CENTER_POS;
  static const LayerType IA_EST = LayerParameter_LayerType_IA_EST;
  static const LayerType IAICP_EST = LayerParameter_LayerType_IAICP_EST;
  static const LayerType IANDT_EST = LayerParameter_LayerType_IANDT_EST;
  static const LayerType SUPIX_SEG = LayerParameter_LayerType_SUPIX_SEG;
  static const LayerType RECTIFY = LayerParameter_LayerType_RECTIFY;
  static inline bool LayerType_IsValid(int value) {
    return LayerParameter_LayerType_IsValid(value);
  }
  static const LayerType LayerType_MIN =
    LayerParameter_LayerType_LayerType_MIN;
  static const LayerType LayerType_MAX =
    LayerParameter_LayerType_LayerType_MAX;
  static const int LayerType_ARRAYSIZE =
    LayerParameter_LayerType_LayerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LayerType_descriptor() {
    return LayerParameter_LayerType_descriptor();
  }
  static inline const ::std::string& LayerType_Name(LayerType value) {
    return LayerParameter_LayerType_Name(value);
  }
  static inline bool LayerType_Parse(const ::std::string& name,
      LayerType* value) {
    return LayerParameter_LayerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string bottom = 2;
  inline bool has_bottom() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 2;
  inline const ::std::string& bottom() const;
  inline void set_bottom(const ::std::string& value);
  inline void set_bottom(const char* value);
  inline void set_bottom(const char* value, size_t size);
  inline ::std::string* mutable_bottom();
  inline ::std::string* release_bottom();
  inline void set_allocated_bottom(::std::string* bottom);

  // optional string top = 3;
  inline bool has_top() const;
  inline void clear_top();
  static const int kTopFieldNumber = 3;
  inline const ::std::string& top() const;
  inline void set_top(const ::std::string& value);
  inline void set_top(const char* value);
  inline void set_top(const char* value, size_t size);
  inline ::std::string* mutable_top();
  inline ::std::string* release_top();
  inline void set_allocated_top(::std::string* top);

  // optional bool show = 4 [default = false];
  inline bool has_show() const;
  inline void clear_show();
  static const int kShowFieldNumber = 4;
  inline bool show() const;
  inline void set_show(bool value);

  // optional bool save = 5 [default = false];
  inline bool has_save() const;
  inline void clear_save();
  static const int kSaveFieldNumber = 5;
  inline bool save() const;
  inline void set_save(bool value);

  // optional bool logt = 6 [default = false];
  inline bool has_logt() const;
  inline void clear_logt();
  static const int kLogtFieldNumber = 6;
  inline bool logt() const;
  inline void set_logt(bool value);

  // optional bool logi = 7 [default = false];
  inline bool has_logi() const;
  inline void clear_logi();
  static const int kLogiFieldNumber = 7;
  inline bool logi() const;
  inline void set_logi(bool value);

  // optional .svaf.LayerParameter.LayerType type = 10;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 10;
  inline ::svaf::LayerParameter_LayerType type() const;
  inline void set_type(::svaf::LayerParameter_LayerType value);

  // optional .svaf.ImageOperationParameter imageop_param = 200;
  inline bool has_imageop_param() const;
  inline void clear_imageop_param();
  static const int kImageopParamFieldNumber = 200;
  inline const ::svaf::ImageOperationParameter& imageop_param() const;
  inline ::svaf::ImageOperationParameter* mutable_imageop_param();
  inline ::svaf::ImageOperationParameter* release_imageop_param();
  inline void set_allocated_imageop_param(::svaf::ImageOperationParameter* imageop_param);

  // optional .svaf.SuperPixelSegmentParameter supix_param = 201;
  inline bool has_supix_param() const;
  inline void clear_supix_param();
  static const int kSupixParamFieldNumber = 201;
  inline const ::svaf::SuperPixelSegmentParameter& supix_param() const;
  inline ::svaf::SuperPixelSegmentParameter* mutable_supix_param();
  inline ::svaf::SuperPixelSegmentParameter* release_supix_param();
  inline void set_allocated_supix_param(::svaf::SuperPixelSegmentParameter* supix_param);

  // optional .svaf.ImageResizeParameter resize_param = 202;
  inline bool has_resize_param() const;
  inline void clear_resize_param();
  static const int kResizeParamFieldNumber = 202;
  inline const ::svaf::ImageResizeParameter& resize_param() const;
  inline ::svaf::ImageResizeParameter* mutable_resize_param();
  inline ::svaf::ImageResizeParameter* release_resize_param();
  inline void set_allocated_resize_param(::svaf::ImageResizeParameter* resize_param);

  // optional .svaf.ImageCropParameter crop_param = 203;
  inline bool has_crop_param() const;
  inline void clear_crop_param();
  static const int kCropParamFieldNumber = 203;
  inline const ::svaf::ImageCropParameter& crop_param() const;
  inline ::svaf::ImageCropParameter* mutable_crop_param();
  inline ::svaf::ImageCropParameter* release_crop_param();
  inline void set_allocated_crop_param(::svaf::ImageCropParameter* crop_param);

  // optional .svaf.StereoOperationParameter stereoop_param = 240;
  inline bool has_stereoop_param() const;
  inline void clear_stereoop_param();
  static const int kStereoopParamFieldNumber = 240;
  inline const ::svaf::StereoOperationParameter& stereoop_param() const;
  inline ::svaf::StereoOperationParameter* mutable_stereoop_param();
  inline ::svaf::StereoOperationParameter* release_stereoop_param();
  inline void set_allocated_stereoop_param(::svaf::StereoOperationParameter* stereoop_param);

  // optional .svaf.StereoRectifyParameter rectify_param = 241;
  inline bool has_rectify_param() const;
  inline void clear_rectify_param();
  static const int kRectifyParamFieldNumber = 241;
  inline const ::svaf::StereoRectifyParameter& rectify_param() const;
  inline ::svaf::StereoRectifyParameter* mutable_rectify_param();
  inline ::svaf::StereoRectifyParameter* release_rectify_param();
  inline void set_allocated_rectify_param(::svaf::StereoRectifyParameter* rectify_param);

  // optional .svaf.DataParameter data_param = 100;
  inline bool has_data_param() const;
  inline void clear_data_param();
  static const int kDataParamFieldNumber = 100;
  inline const ::svaf::DataParameter& data_param() const;
  inline ::svaf::DataParameter* mutable_data_param();
  inline ::svaf::DataParameter* release_data_param();
  inline void set_allocated_data_param(::svaf::DataParameter* data_param);

  // optional .svaf.ImageDataParameter imagedata_param = 101;
  inline bool has_imagedata_param() const;
  inline void clear_imagedata_param();
  static const int kImagedataParamFieldNumber = 101;
  inline const ::svaf::ImageDataParameter& imagedata_param() const;
  inline ::svaf::ImageDataParameter* mutable_imagedata_param();
  inline ::svaf::ImageDataParameter* release_imagedata_param();
  inline void set_allocated_imagedata_param(::svaf::ImageDataParameter* imagedata_param);

  // optional .svaf.ImagePairParameter imagepair_param = 102;
  inline bool has_imagepair_param() const;
  inline void clear_imagepair_param();
  static const int kImagepairParamFieldNumber = 102;
  inline const ::svaf::ImagePairParameter& imagepair_param() const;
  inline ::svaf::ImagePairParameter* mutable_imagepair_param();
  inline ::svaf::ImagePairParameter* release_imagepair_param();
  inline void set_allocated_imagepair_param(::svaf::ImagePairParameter* imagepair_param);

  // optional .svaf.VideoDataParameter videodata_param = 103;
  inline bool has_videodata_param() const;
  inline void clear_videodata_param();
  static const int kVideodataParamFieldNumber = 103;
  inline const ::svaf::VideoDataParameter& videodata_param() const;
  inline ::svaf::VideoDataParameter* mutable_videodata_param();
  inline ::svaf::VideoDataParameter* release_videodata_param();
  inline void set_allocated_videodata_param(::svaf::VideoDataParameter* videodata_param);

  // optional .svaf.VideoPairParameter videopair_param = 104;
  inline bool has_videopair_param() const;
  inline void clear_videopair_param();
  static const int kVideopairParamFieldNumber = 104;
  inline const ::svaf::VideoPairParameter& videopair_param() const;
  inline ::svaf::VideoPairParameter* mutable_videopair_param();
  inline ::svaf::VideoPairParameter* release_videopair_param();
  inline void set_allocated_videopair_param(::svaf::VideoPairParameter* videopair_param);

  // optional .svaf.CameraDataParameter cameradata_param = 105;
  inline bool has_cameradata_param() const;
  inline void clear_cameradata_param();
  static const int kCameradataParamFieldNumber = 105;
  inline const ::svaf::CameraDataParameter& cameradata_param() const;
  inline ::svaf::CameraDataParameter* mutable_cameradata_param();
  inline ::svaf::CameraDataParameter* release_cameradata_param();
  inline void set_allocated_cameradata_param(::svaf::CameraDataParameter* cameradata_param);

  // optional .svaf.CameraPairParameter camerapair_param = 106;
  inline bool has_camerapair_param() const;
  inline void clear_camerapair_param();
  static const int kCamerapairParamFieldNumber = 106;
  inline const ::svaf::CameraPairParameter& camerapair_param() const;
  inline ::svaf::CameraPairParameter* mutable_camerapair_param();
  inline ::svaf::CameraPairParameter* release_camerapair_param();
  inline void set_allocated_camerapair_param(::svaf::CameraPairParameter* camerapair_param);

  // optional .svaf.DSPCameraDataParameter dspcameradata_param = 107;
  inline bool has_dspcameradata_param() const;
  inline void clear_dspcameradata_param();
  static const int kDspcameradataParamFieldNumber = 107;
  inline const ::svaf::DSPCameraDataParameter& dspcameradata_param() const;
  inline ::svaf::DSPCameraDataParameter* mutable_dspcameradata_param();
  inline ::svaf::DSPCameraDataParameter* release_dspcameradata_param();
  inline void set_allocated_dspcameradata_param(::svaf::DSPCameraDataParameter* dspcameradata_param);

  // optional .svaf.DSPCameraPairParameter dspcamerapair_param = 108;
  inline bool has_dspcamerapair_param() const;
  inline void clear_dspcamerapair_param();
  static const int kDspcamerapairParamFieldNumber = 108;
  inline const ::svaf::DSPCameraPairParameter& dspcamerapair_param() const;
  inline ::svaf::DSPCameraPairParameter* mutable_dspcamerapair_param();
  inline ::svaf::DSPCameraPairParameter* release_dspcamerapair_param();
  inline void set_allocated_dspcamerapair_param(::svaf::DSPCameraPairParameter* dspcamerapair_param);

  // optional .svaf.KinectDataParameter kinectdata_param = 109;
  inline bool has_kinectdata_param() const;
  inline void clear_kinectdata_param();
  static const int kKinectdataParamFieldNumber = 109;
  inline const ::svaf::KinectDataParameter& kinectdata_param() const;
  inline ::svaf::KinectDataParameter* mutable_kinectdata_param();
  inline ::svaf::KinectDataParameter* release_kinectdata_param();
  inline void set_allocated_kinectdata_param(::svaf::KinectDataParameter* kinectdata_param);

  // optional .svaf.ImageFolderParameter folder_param = 111;
  inline bool has_folder_param() const;
  inline void clear_folder_param();
  static const int kFolderParamFieldNumber = 111;
  inline const ::svaf::ImageFolderParameter& folder_param() const;
  inline ::svaf::ImageFolderParameter* mutable_folder_param();
  inline ::svaf::ImageFolderParameter* release_folder_param();
  inline void set_allocated_folder_param(::svaf::ImageFolderParameter* folder_param);

  // optional .svaf.ImagePairFolderParameter pairfolder_param = 112;
  inline bool has_pairfolder_param() const;
  inline void clear_pairfolder_param();
  static const int kPairfolderParamFieldNumber = 112;
  inline const ::svaf::ImagePairFolderParameter& pairfolder_param() const;
  inline ::svaf::ImagePairFolderParameter* mutable_pairfolder_param();
  inline ::svaf::ImagePairFolderParameter* release_pairfolder_param();
  inline void set_allocated_pairfolder_param(::svaf::ImagePairFolderParameter* pairfolder_param);

  // optional .svaf.RecognizeParameter recognize_param = 120;
  inline bool has_recognize_param() const;
  inline void clear_recognize_param();
  static const int kRecognizeParamFieldNumber = 120;
  inline const ::svaf::RecognizeParameter& recognize_param() const;
  inline ::svaf::RecognizeParameter* mutable_recognize_param();
  inline ::svaf::RecognizeParameter* release_recognize_param();
  inline void set_allocated_recognize_param(::svaf::RecognizeParameter* recognize_param);

  // optional .svaf.AdaboostParameter adaboost_param = 121;
  inline bool has_adaboost_param() const;
  inline void clear_adaboost_param();
  static const int kAdaboostParamFieldNumber = 121;
  inline const ::svaf::AdaboostParameter& adaboost_param() const;
  inline ::svaf::AdaboostParameter* mutable_adaboost_param();
  inline ::svaf::AdaboostParameter* release_adaboost_param();
  inline void set_allocated_adaboost_param(::svaf::AdaboostParameter* adaboost_param);

  // optional .svaf.TrackParameter track_param = 130;
  inline bool has_track_param() const;
  inline void clear_track_param();
  static const int kTrackParamFieldNumber = 130;
  inline const ::svaf::TrackParameter& track_param() const;
  inline ::svaf::TrackParameter* mutable_track_param();
  inline ::svaf::TrackParameter* release_track_param();
  inline void set_allocated_track_param(::svaf::TrackParameter* track_param);

  // optional .svaf.MilTrackParameter miltrack_param = 131;
  inline bool has_miltrack_param() const;
  inline void clear_miltrack_param();
  static const int kMiltrackParamFieldNumber = 131;
  inline const ::svaf::MilTrackParameter& miltrack_param() const;
  inline ::svaf::MilTrackParameter* mutable_miltrack_param();
  inline ::svaf::MilTrackParameter* release_miltrack_param();
  inline void set_allocated_miltrack_param(::svaf::MilTrackParameter* miltrack_param);

  // optional .svaf.MilTrackParameter bittrack_param = 132;
  inline bool has_bittrack_param() const;
  inline void clear_bittrack_param();
  static const int kBittrackParamFieldNumber = 132;
  inline const ::svaf::MilTrackParameter& bittrack_param() const;
  inline ::svaf::MilTrackParameter* mutable_bittrack_param();
  inline ::svaf::MilTrackParameter* release_bittrack_param();
  inline void set_allocated_bittrack_param(::svaf::MilTrackParameter* bittrack_param);

  // optional .svaf.FeaturePointParameter featurepoint_param = 140;
  inline bool has_featurepoint_param() const;
  inline void clear_featurepoint_param();
  static const int kFeaturepointParamFieldNumber = 140;
  inline const ::svaf::FeaturePointParameter& featurepoint_param() const;
  inline ::svaf::FeaturePointParameter* mutable_featurepoint_param();
  inline ::svaf::FeaturePointParameter* release_featurepoint_param();
  inline void set_allocated_featurepoint_param(::svaf::FeaturePointParameter* featurepoint_param);

  // optional .svaf.SIFTPointParameter siftpoint_param = 141;
  inline bool has_siftpoint_param() const;
  inline void clear_siftpoint_param();
  static const int kSiftpointParamFieldNumber = 141;
  inline const ::svaf::SIFTPointParameter& siftpoint_param() const;
  inline ::svaf::SIFTPointParameter* mutable_siftpoint_param();
  inline ::svaf::SIFTPointParameter* release_siftpoint_param();
  inline void set_allocated_siftpoint_param(::svaf::SIFTPointParameter* siftpoint_param);

  // optional .svaf.SURFPointParameter surfpoint_param = 142;
  inline bool has_surfpoint_param() const;
  inline void clear_surfpoint_param();
  static const int kSurfpointParamFieldNumber = 142;
  inline const ::svaf::SURFPointParameter& surfpoint_param() const;
  inline ::svaf::SURFPointParameter* mutable_surfpoint_param();
  inline ::svaf::SURFPointParameter* release_surfpoint_param();
  inline void set_allocated_surfpoint_param(::svaf::SURFPointParameter* surfpoint_param);

  // optional .svaf.STARPointParameter starpoint_param = 143;
  inline bool has_starpoint_param() const;
  inline void clear_starpoint_param();
  static const int kStarpointParamFieldNumber = 143;
  inline const ::svaf::STARPointParameter& starpoint_param() const;
  inline ::svaf::STARPointParameter* mutable_starpoint_param();
  inline ::svaf::STARPointParameter* release_starpoint_param();
  inline void set_allocated_starpoint_param(::svaf::STARPointParameter* starpoint_param);

  // optional .svaf.BRISKPointParameter briskpoint_param = 144;
  inline bool has_briskpoint_param() const;
  inline void clear_briskpoint_param();
  static const int kBriskpointParamFieldNumber = 144;
  inline const ::svaf::BRISKPointParameter& briskpoint_param() const;
  inline ::svaf::BRISKPointParameter* mutable_briskpoint_param();
  inline ::svaf::BRISKPointParameter* release_briskpoint_param();
  inline void set_allocated_briskpoint_param(::svaf::BRISKPointParameter* briskpoint_param);

  // optional .svaf.FASTPointParameter fastpoint_param = 145;
  inline bool has_fastpoint_param() const;
  inline void clear_fastpoint_param();
  static const int kFastpointParamFieldNumber = 145;
  inline const ::svaf::FASTPointParameter& fastpoint_param() const;
  inline ::svaf::FASTPointParameter* mutable_fastpoint_param();
  inline ::svaf::FASTPointParameter* release_fastpoint_param();
  inline void set_allocated_fastpoint_param(::svaf::FASTPointParameter* fastpoint_param);

  // optional .svaf.ORBPointParameter orbpoint_param = 146;
  inline bool has_orbpoint_param() const;
  inline void clear_orbpoint_param();
  static const int kOrbpointParamFieldNumber = 146;
  inline const ::svaf::ORBPointParameter& orbpoint_param() const;
  inline ::svaf::ORBPointParameter* mutable_orbpoint_param();
  inline ::svaf::ORBPointParameter* release_orbpoint_param();
  inline void set_allocated_orbpoint_param(::svaf::ORBPointParameter* orbpoint_param);

  // optional .svaf.KAZEPointParameter kazepoint_param = 147;
  inline bool has_kazepoint_param() const;
  inline void clear_kazepoint_param();
  static const int kKazepointParamFieldNumber = 147;
  inline const ::svaf::KAZEPointParameter& kazepoint_param() const;
  inline ::svaf::KAZEPointParameter* mutable_kazepoint_param();
  inline ::svaf::KAZEPointParameter* release_kazepoint_param();
  inline void set_allocated_kazepoint_param(::svaf::KAZEPointParameter* kazepoint_param);

  // optional .svaf.HarrisPointParameter harrispoint_param = 148;
  inline bool has_harrispoint_param() const;
  inline void clear_harrispoint_param();
  static const int kHarrispointParamFieldNumber = 148;
  inline const ::svaf::HarrisPointParameter& harrispoint_param() const;
  inline ::svaf::HarrisPointParameter* mutable_harrispoint_param();
  inline ::svaf::HarrisPointParameter* release_harrispoint_param();
  inline void set_allocated_harrispoint_param(::svaf::HarrisPointParameter* harrispoint_param);

  // optional .svaf.CVPointParameter cvpoint_param = 149;
  inline bool has_cvpoint_param() const;
  inline void clear_cvpoint_param();
  static const int kCvpointParamFieldNumber = 149;
  inline const ::svaf::CVPointParameter& cvpoint_param() const;
  inline ::svaf::CVPointParameter* mutable_cvpoint_param();
  inline ::svaf::CVPointParameter* release_cvpoint_param();
  inline void set_allocated_cvpoint_param(::svaf::CVPointParameter* cvpoint_param);

  // optional .svaf.FeatureDescriptorParameter featuredescriptor_param = 150;
  inline bool has_featuredescriptor_param() const;
  inline void clear_featuredescriptor_param();
  static const int kFeaturedescriptorParamFieldNumber = 150;
  inline const ::svaf::FeatureDescriptorParameter& featuredescriptor_param() const;
  inline ::svaf::FeatureDescriptorParameter* mutable_featuredescriptor_param();
  inline ::svaf::FeatureDescriptorParameter* release_featuredescriptor_param();
  inline void set_allocated_featuredescriptor_param(::svaf::FeatureDescriptorParameter* featuredescriptor_param);

  // optional .svaf.SIFTDescriptorParameter siftdescriptor_param = 151;
  inline bool has_siftdescriptor_param() const;
  inline void clear_siftdescriptor_param();
  static const int kSiftdescriptorParamFieldNumber = 151;
  inline const ::svaf::SIFTDescriptorParameter& siftdescriptor_param() const;
  inline ::svaf::SIFTDescriptorParameter* mutable_siftdescriptor_param();
  inline ::svaf::SIFTDescriptorParameter* release_siftdescriptor_param();
  inline void set_allocated_siftdescriptor_param(::svaf::SIFTDescriptorParameter* siftdescriptor_param);

  // optional .svaf.SURFDescriptorParameter surfdescriptor_param = 152;
  inline bool has_surfdescriptor_param() const;
  inline void clear_surfdescriptor_param();
  static const int kSurfdescriptorParamFieldNumber = 152;
  inline const ::svaf::SURFDescriptorParameter& surfdescriptor_param() const;
  inline ::svaf::SURFDescriptorParameter* mutable_surfdescriptor_param();
  inline ::svaf::SURFDescriptorParameter* release_surfdescriptor_param();
  inline void set_allocated_surfdescriptor_param(::svaf::SURFDescriptorParameter* surfdescriptor_param);

  // optional .svaf.STARDescriptorParameter stardescriptor_param = 153;
  inline bool has_stardescriptor_param() const;
  inline void clear_stardescriptor_param();
  static const int kStardescriptorParamFieldNumber = 153;
  inline const ::svaf::STARDescriptorParameter& stardescriptor_param() const;
  inline ::svaf::STARDescriptorParameter* mutable_stardescriptor_param();
  inline ::svaf::STARDescriptorParameter* release_stardescriptor_param();
  inline void set_allocated_stardescriptor_param(::svaf::STARDescriptorParameter* stardescriptor_param);

  // optional .svaf.BRIEFDescriptorParameter briefdescriptor_param = 154;
  inline bool has_briefdescriptor_param() const;
  inline void clear_briefdescriptor_param();
  static const int kBriefdescriptorParamFieldNumber = 154;
  inline const ::svaf::BRIEFDescriptorParameter& briefdescriptor_param() const;
  inline ::svaf::BRIEFDescriptorParameter* mutable_briefdescriptor_param();
  inline ::svaf::BRIEFDescriptorParameter* release_briefdescriptor_param();
  inline void set_allocated_briefdescriptor_param(::svaf::BRIEFDescriptorParameter* briefdescriptor_param);

  // optional .svaf.BRISKDescriptorParameter briskdescriptor_param = 155;
  inline bool has_briskdescriptor_param() const;
  inline void clear_briskdescriptor_param();
  static const int kBriskdescriptorParamFieldNumber = 155;
  inline const ::svaf::BRISKDescriptorParameter& briskdescriptor_param() const;
  inline ::svaf::BRISKDescriptorParameter* mutable_briskdescriptor_param();
  inline ::svaf::BRISKDescriptorParameter* release_briskdescriptor_param();
  inline void set_allocated_briskdescriptor_param(::svaf::BRISKDescriptorParameter* briskdescriptor_param);

  // optional .svaf.FASTDescriptorParameter fastdescriptor_param = 156;
  inline bool has_fastdescriptor_param() const;
  inline void clear_fastdescriptor_param();
  static const int kFastdescriptorParamFieldNumber = 156;
  inline const ::svaf::FASTDescriptorParameter& fastdescriptor_param() const;
  inline ::svaf::FASTDescriptorParameter* mutable_fastdescriptor_param();
  inline ::svaf::FASTDescriptorParameter* release_fastdescriptor_param();
  inline void set_allocated_fastdescriptor_param(::svaf::FASTDescriptorParameter* fastdescriptor_param);

  // optional .svaf.ORBDescriptorParameter orbdescriptor_param = 157;
  inline bool has_orbdescriptor_param() const;
  inline void clear_orbdescriptor_param();
  static const int kOrbdescriptorParamFieldNumber = 157;
  inline const ::svaf::ORBDescriptorParameter& orbdescriptor_param() const;
  inline ::svaf::ORBDescriptorParameter* mutable_orbdescriptor_param();
  inline ::svaf::ORBDescriptorParameter* release_orbdescriptor_param();
  inline void set_allocated_orbdescriptor_param(::svaf::ORBDescriptorParameter* orbdescriptor_param);

  // optional .svaf.KAZEDescriptorParameter kazedescriptor_param = 158;
  inline bool has_kazedescriptor_param() const;
  inline void clear_kazedescriptor_param();
  static const int kKazedescriptorParamFieldNumber = 158;
  inline const ::svaf::KAZEDescriptorParameter& kazedescriptor_param() const;
  inline ::svaf::KAZEDescriptorParameter* mutable_kazedescriptor_param();
  inline ::svaf::KAZEDescriptorParameter* release_kazedescriptor_param();
  inline void set_allocated_kazedescriptor_param(::svaf::KAZEDescriptorParameter* kazedescriptor_param);

  // optional .svaf.CVDescriptorParameter cvdescriptor_param = 159;
  inline bool has_cvdescriptor_param() const;
  inline void clear_cvdescriptor_param();
  static const int kCvdescriptorParamFieldNumber = 159;
  inline const ::svaf::CVDescriptorParameter& cvdescriptor_param() const;
  inline ::svaf::CVDescriptorParameter* mutable_cvdescriptor_param();
  inline ::svaf::CVDescriptorParameter* release_cvdescriptor_param();
  inline void set_allocated_cvdescriptor_param(::svaf::CVDescriptorParameter* cvdescriptor_param);

  // optional .svaf.VectorMatchParameter vectormatch_param = 160;
  inline bool has_vectormatch_param() const;
  inline void clear_vectormatch_param();
  static const int kVectormatchParamFieldNumber = 160;
  inline const ::svaf::VectorMatchParameter& vectormatch_param() const;
  inline ::svaf::VectorMatchParameter* mutable_vectormatch_param();
  inline ::svaf::VectorMatchParameter* release_vectormatch_param();
  inline void set_allocated_vectormatch_param(::svaf::VectorMatchParameter* vectormatch_param);

  // optional .svaf.KDTreeMatchParameter kdtreematch_param = 161;
  inline bool has_kdtreematch_param() const;
  inline void clear_kdtreematch_param();
  static const int kKdtreematchParamFieldNumber = 161;
  inline const ::svaf::KDTreeMatchParameter& kdtreematch_param() const;
  inline ::svaf::KDTreeMatchParameter* mutable_kdtreematch_param();
  inline ::svaf::KDTreeMatchParameter* release_kdtreematch_param();
  inline void set_allocated_kdtreematch_param(::svaf::KDTreeMatchParameter* kdtreematch_param);

  // optional .svaf.EularMatchParameter eularmatch_param = 162;
  inline bool has_eularmatch_param() const;
  inline void clear_eularmatch_param();
  static const int kEularmatchParamFieldNumber = 162;
  inline const ::svaf::EularMatchParameter& eularmatch_param() const;
  inline ::svaf::EularMatchParameter* mutable_eularmatch_param();
  inline ::svaf::EularMatchParameter* release_eularmatch_param();
  inline void set_allocated_eularmatch_param(::svaf::EularMatchParameter* eularmatch_param);

  // optional .svaf.RansacParameter ransac_param = 163;
  inline bool has_ransac_param() const;
  inline void clear_ransac_param();
  static const int kRansacParamFieldNumber = 163;
  inline const ::svaf::RansacParameter& ransac_param() const;
  inline ::svaf::RansacParameter* mutable_ransac_param();
  inline ::svaf::RansacParameter* release_ransac_param();
  inline void set_allocated_ransac_param(::svaf::RansacParameter* ransac_param);

  // optional .svaf.BruteForceMatchParameter bfmatch_param = 164;
  inline bool has_bfmatch_param() const;
  inline void clear_bfmatch_param();
  static const int kBfmatchParamFieldNumber = 164;
  inline const ::svaf::BruteForceMatchParameter& bfmatch_param() const;
  inline ::svaf::BruteForceMatchParameter* mutable_bfmatch_param();
  inline ::svaf::BruteForceMatchParameter* release_bfmatch_param();
  inline void set_allocated_bfmatch_param(::svaf::BruteForceMatchParameter* bfmatch_param);

  // optional .svaf.FLANNMatchParameter flannmatch_param = 165;
  inline bool has_flannmatch_param() const;
  inline void clear_flannmatch_param();
  static const int kFlannmatchParamFieldNumber = 165;
  inline const ::svaf::FLANNMatchParameter& flannmatch_param() const;
  inline ::svaf::FLANNMatchParameter* mutable_flannmatch_param();
  inline ::svaf::FLANNMatchParameter* release_flannmatch_param();
  inline void set_allocated_flannmatch_param(::svaf::FLANNMatchParameter* flannmatch_param);

  // optional .svaf.ECMatchParameter ecmatch_param = 168;
  inline bool has_ecmatch_param() const;
  inline void clear_ecmatch_param();
  static const int kEcmatchParamFieldNumber = 168;
  inline const ::svaf::ECMatchParameter& ecmatch_param() const;
  inline ::svaf::ECMatchParameter* mutable_ecmatch_param();
  inline ::svaf::ECMatchParameter* release_ecmatch_param();
  inline void set_allocated_ecmatch_param(::svaf::ECMatchParameter* ecmatch_param);

  // optional .svaf.CVMatchParameter cvmatch_param = 169;
  inline bool has_cvmatch_param() const;
  inline void clear_cvmatch_param();
  static const int kCvmatchParamFieldNumber = 169;
  inline const ::svaf::CVMatchParameter& cvmatch_param() const;
  inline ::svaf::CVMatchParameter* mutable_cvmatch_param();
  inline ::svaf::CVMatchParameter* release_cvmatch_param();
  inline void set_allocated_cvmatch_param(::svaf::CVMatchParameter* cvmatch_param);

  // optional .svaf.StereoMatchParameter stereomatch_param = 170;
  inline bool has_stereomatch_param() const;
  inline void clear_stereomatch_param();
  static const int kStereomatchParamFieldNumber = 170;
  inline const ::svaf::StereoMatchParameter& stereomatch_param() const;
  inline ::svaf::StereoMatchParameter* mutable_stereomatch_param();
  inline ::svaf::StereoMatchParameter* release_stereomatch_param();
  inline void set_allocated_stereomatch_param(::svaf::StereoMatchParameter* stereomatch_param);

  // optional .svaf.SGMMatchParameter sgm_param = 171;
  inline bool has_sgm_param() const;
  inline void clear_sgm_param();
  static const int kSgmParamFieldNumber = 171;
  inline const ::svaf::SGMMatchParameter& sgm_param() const;
  inline ::svaf::SGMMatchParameter* mutable_sgm_param();
  inline ::svaf::SGMMatchParameter* release_sgm_param();
  inline void set_allocated_sgm_param(::svaf::SGMMatchParameter* sgm_param);

  // optional .svaf.EADPMatchParameter eadp_param = 172;
  inline bool has_eadp_param() const;
  inline void clear_eadp_param();
  static const int kEadpParamFieldNumber = 172;
  inline const ::svaf::EADPMatchParameter& eadp_param() const;
  inline ::svaf::EADPMatchParameter* mutable_eadp_param();
  inline ::svaf::EADPMatchParameter* release_eadp_param();
  inline void set_allocated_eadp_param(::svaf::EADPMatchParameter* eadp_param);

  // optional .svaf.OutputParameter output_param = 180;
  inline bool has_output_param() const;
  inline void clear_output_param();
  static const int kOutputParamFieldNumber = 180;
  inline const ::svaf::OutputParameter& output_param() const;
  inline ::svaf::OutputParameter* mutable_output_param();
  inline ::svaf::OutputParameter* release_output_param();
  inline void set_allocated_output_param(::svaf::OutputParameter* output_param);

  // optional .svaf.TriangularParameter triang_param = 181;
  inline bool has_triang_param() const;
  inline void clear_triang_param();
  static const int kTriangParamFieldNumber = 181;
  inline const ::svaf::TriangularParameter& triang_param() const;
  inline ::svaf::TriangularParameter* mutable_triang_param();
  inline ::svaf::TriangularParameter* release_triang_param();
  inline void set_allocated_triang_param(::svaf::TriangularParameter* triang_param);

  // optional .svaf.MatrixMulParameter mxmul_param = 182;
  inline bool has_mxmul_param() const;
  inline void clear_mxmul_param();
  static const int kMxmulParamFieldNumber = 182;
  inline const ::svaf::MatrixMulParameter& mxmul_param() const;
  inline ::svaf::MatrixMulParameter* mutable_mxmul_param();
  inline ::svaf::MatrixMulParameter* release_mxmul_param();
  inline void set_allocated_mxmul_param(::svaf::MatrixMulParameter* mxmul_param);

  // optional .svaf.PositionEstimateParameter posest_param = 190;
  inline bool has_posest_param() const;
  inline void clear_posest_param();
  static const int kPosestParamFieldNumber = 190;
  inline const ::svaf::PositionEstimateParameter& posest_param() const;
  inline ::svaf::PositionEstimateParameter* mutable_posest_param();
  inline ::svaf::PositionEstimateParameter* release_posest_param();
  inline void set_allocated_posest_param(::svaf::PositionEstimateParameter* posest_param);

  // optional .svaf.CenterPointParameter centerpoint_param = 191;
  inline bool has_centerpoint_param() const;
  inline void clear_centerpoint_param();
  static const int kCenterpointParamFieldNumber = 191;
  inline const ::svaf::CenterPointParameter& centerpoint_param() const;
  inline ::svaf::CenterPointParameter* mutable_centerpoint_param();
  inline ::svaf::CenterPointParameter* release_centerpoint_param();
  inline void set_allocated_centerpoint_param(::svaf::CenterPointParameter* centerpoint_param);

  // optional .svaf.SACIAEstimateParameter sacia_param = 194;
  inline bool has_sacia_param() const;
  inline void clear_sacia_param();
  static const int kSaciaParamFieldNumber = 194;
  inline const ::svaf::SACIAEstimateParameter& sacia_param() const;
  inline ::svaf::SACIAEstimateParameter* mutable_sacia_param();
  inline ::svaf::SACIAEstimateParameter* release_sacia_param();
  inline void set_allocated_sacia_param(::svaf::SACIAEstimateParameter* sacia_param);

  // optional .svaf.IAICPEstimateParameter iaicp_param = 195;
  inline bool has_iaicp_param() const;
  inline void clear_iaicp_param();
  static const int kIaicpParamFieldNumber = 195;
  inline const ::svaf::IAICPEstimateParameter& iaicp_param() const;
  inline ::svaf::IAICPEstimateParameter* mutable_iaicp_param();
  inline ::svaf::IAICPEstimateParameter* release_iaicp_param();
  inline void set_allocated_iaicp_param(::svaf::IAICPEstimateParameter* iaicp_param);

  // optional .svaf.IANDTEstimateParameter iandt_param = 196;
  inline bool has_iandt_param() const;
  inline void clear_iandt_param();
  static const int kIandtParamFieldNumber = 196;
  inline const ::svaf::IANDTEstimateParameter& iandt_param() const;
  inline ::svaf::IANDTEstimateParameter* mutable_iandt_param();
  inline ::svaf::IANDTEstimateParameter* release_iandt_param();
  inline void set_allocated_iandt_param(::svaf::IANDTEstimateParameter* iandt_param);

  // @@protoc_insertion_point(class_scope:svaf.LayerParameter)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_bottom();
  inline void clear_has_bottom();
  inline void set_has_top();
  inline void clear_has_top();
  inline void set_has_show();
  inline void clear_has_show();
  inline void set_has_save();
  inline void clear_has_save();
  inline void set_has_logt();
  inline void clear_has_logt();
  inline void set_has_logi();
  inline void clear_has_logi();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_imageop_param();
  inline void clear_has_imageop_param();
  inline void set_has_supix_param();
  inline void clear_has_supix_param();
  inline void set_has_resize_param();
  inline void clear_has_resize_param();
  inline void set_has_crop_param();
  inline void clear_has_crop_param();
  inline void set_has_stereoop_param();
  inline void clear_has_stereoop_param();
  inline void set_has_rectify_param();
  inline void clear_has_rectify_param();
  inline void set_has_data_param();
  inline void clear_has_data_param();
  inline void set_has_imagedata_param();
  inline void clear_has_imagedata_param();
  inline void set_has_imagepair_param();
  inline void clear_has_imagepair_param();
  inline void set_has_videodata_param();
  inline void clear_has_videodata_param();
  inline void set_has_videopair_param();
  inline void clear_has_videopair_param();
  inline void set_has_cameradata_param();
  inline void clear_has_cameradata_param();
  inline void set_has_camerapair_param();
  inline void clear_has_camerapair_param();
  inline void set_has_dspcameradata_param();
  inline void clear_has_dspcameradata_param();
  inline void set_has_dspcamerapair_param();
  inline void clear_has_dspcamerapair_param();
  inline void set_has_kinectdata_param();
  inline void clear_has_kinectdata_param();
  inline void set_has_folder_param();
  inline void clear_has_folder_param();
  inline void set_has_pairfolder_param();
  inline void clear_has_pairfolder_param();
  inline void set_has_recognize_param();
  inline void clear_has_recognize_param();
  inline void set_has_adaboost_param();
  inline void clear_has_adaboost_param();
  inline void set_has_track_param();
  inline void clear_has_track_param();
  inline void set_has_miltrack_param();
  inline void clear_has_miltrack_param();
  inline void set_has_bittrack_param();
  inline void clear_has_bittrack_param();
  inline void set_has_featurepoint_param();
  inline void clear_has_featurepoint_param();
  inline void set_has_siftpoint_param();
  inline void clear_has_siftpoint_param();
  inline void set_has_surfpoint_param();
  inline void clear_has_surfpoint_param();
  inline void set_has_starpoint_param();
  inline void clear_has_starpoint_param();
  inline void set_has_briskpoint_param();
  inline void clear_has_briskpoint_param();
  inline void set_has_fastpoint_param();
  inline void clear_has_fastpoint_param();
  inline void set_has_orbpoint_param();
  inline void clear_has_orbpoint_param();
  inline void set_has_kazepoint_param();
  inline void clear_has_kazepoint_param();
  inline void set_has_harrispoint_param();
  inline void clear_has_harrispoint_param();
  inline void set_has_cvpoint_param();
  inline void clear_has_cvpoint_param();
  inline void set_has_featuredescriptor_param();
  inline void clear_has_featuredescriptor_param();
  inline void set_has_siftdescriptor_param();
  inline void clear_has_siftdescriptor_param();
  inline void set_has_surfdescriptor_param();
  inline void clear_has_surfdescriptor_param();
  inline void set_has_stardescriptor_param();
  inline void clear_has_stardescriptor_param();
  inline void set_has_briefdescriptor_param();
  inline void clear_has_briefdescriptor_param();
  inline void set_has_briskdescriptor_param();
  inline void clear_has_briskdescriptor_param();
  inline void set_has_fastdescriptor_param();
  inline void clear_has_fastdescriptor_param();
  inline void set_has_orbdescriptor_param();
  inline void clear_has_orbdescriptor_param();
  inline void set_has_kazedescriptor_param();
  inline void clear_has_kazedescriptor_param();
  inline void set_has_cvdescriptor_param();
  inline void clear_has_cvdescriptor_param();
  inline void set_has_vectormatch_param();
  inline void clear_has_vectormatch_param();
  inline void set_has_kdtreematch_param();
  inline void clear_has_kdtreematch_param();
  inline void set_has_eularmatch_param();
  inline void clear_has_eularmatch_param();
  inline void set_has_ransac_param();
  inline void clear_has_ransac_param();
  inline void set_has_bfmatch_param();
  inline void clear_has_bfmatch_param();
  inline void set_has_flannmatch_param();
  inline void clear_has_flannmatch_param();
  inline void set_has_ecmatch_param();
  inline void clear_has_ecmatch_param();
  inline void set_has_cvmatch_param();
  inline void clear_has_cvmatch_param();
  inline void set_has_stereomatch_param();
  inline void clear_has_stereomatch_param();
  inline void set_has_sgm_param();
  inline void clear_has_sgm_param();
  inline void set_has_eadp_param();
  inline void clear_has_eadp_param();
  inline void set_has_output_param();
  inline void clear_has_output_param();
  inline void set_has_triang_param();
  inline void clear_has_triang_param();
  inline void set_has_mxmul_param();
  inline void clear_has_mxmul_param();
  inline void set_has_posest_param();
  inline void clear_has_posest_param();
  inline void set_has_centerpoint_param();
  inline void clear_has_centerpoint_param();
  inline void set_has_sacia_param();
  inline void clear_has_sacia_param();
  inline void set_has_iaicp_param();
  inline void clear_has_iaicp_param();
  inline void set_has_iandt_param();
  inline void clear_has_iandt_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[3];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* bottom_;
  ::std::string* top_;
  bool show_;
  bool save_;
  bool logt_;
  bool logi_;
  int type_;
  ::svaf::ImageOperationParameter* imageop_param_;
  ::svaf::SuperPixelSegmentParameter* supix_param_;
  ::svaf::ImageResizeParameter* resize_param_;
  ::svaf::ImageCropParameter* crop_param_;
  ::svaf::StereoOperationParameter* stereoop_param_;
  ::svaf::StereoRectifyParameter* rectify_param_;
  ::svaf::DataParameter* data_param_;
  ::svaf::ImageDataParameter* imagedata_param_;
  ::svaf::ImagePairParameter* imagepair_param_;
  ::svaf::VideoDataParameter* videodata_param_;
  ::svaf::VideoPairParameter* videopair_param_;
  ::svaf::CameraDataParameter* cameradata_param_;
  ::svaf::CameraPairParameter* camerapair_param_;
  ::svaf::DSPCameraDataParameter* dspcameradata_param_;
  ::svaf::DSPCameraPairParameter* dspcamerapair_param_;
  ::svaf::KinectDataParameter* kinectdata_param_;
  ::svaf::ImageFolderParameter* folder_param_;
  ::svaf::ImagePairFolderParameter* pairfolder_param_;
  ::svaf::RecognizeParameter* recognize_param_;
  ::svaf::AdaboostParameter* adaboost_param_;
  ::svaf::TrackParameter* track_param_;
  ::svaf::MilTrackParameter* miltrack_param_;
  ::svaf::MilTrackParameter* bittrack_param_;
  ::svaf::FeaturePointParameter* featurepoint_param_;
  ::svaf::SIFTPointParameter* siftpoint_param_;
  ::svaf::SURFPointParameter* surfpoint_param_;
  ::svaf::STARPointParameter* starpoint_param_;
  ::svaf::BRISKPointParameter* briskpoint_param_;
  ::svaf::FASTPointParameter* fastpoint_param_;
  ::svaf::ORBPointParameter* orbpoint_param_;
  ::svaf::KAZEPointParameter* kazepoint_param_;
  ::svaf::HarrisPointParameter* harrispoint_param_;
  ::svaf::CVPointParameter* cvpoint_param_;
  ::svaf::FeatureDescriptorParameter* featuredescriptor_param_;
  ::svaf::SIFTDescriptorParameter* siftdescriptor_param_;
  ::svaf::SURFDescriptorParameter* surfdescriptor_param_;
  ::svaf::STARDescriptorParameter* stardescriptor_param_;
  ::svaf::BRIEFDescriptorParameter* briefdescriptor_param_;
  ::svaf::BRISKDescriptorParameter* briskdescriptor_param_;
  ::svaf::FASTDescriptorParameter* fastdescriptor_param_;
  ::svaf::ORBDescriptorParameter* orbdescriptor_param_;
  ::svaf::KAZEDescriptorParameter* kazedescriptor_param_;
  ::svaf::CVDescriptorParameter* cvdescriptor_param_;
  ::svaf::VectorMatchParameter* vectormatch_param_;
  ::svaf::KDTreeMatchParameter* kdtreematch_param_;
  ::svaf::EularMatchParameter* eularmatch_param_;
  ::svaf::RansacParameter* ransac_param_;
  ::svaf::BruteForceMatchParameter* bfmatch_param_;
  ::svaf::FLANNMatchParameter* flannmatch_param_;
  ::svaf::ECMatchParameter* ecmatch_param_;
  ::svaf::CVMatchParameter* cvmatch_param_;
  ::svaf::StereoMatchParameter* stereomatch_param_;
  ::svaf::SGMMatchParameter* sgm_param_;
  ::svaf::EADPMatchParameter* eadp_param_;
  ::svaf::OutputParameter* output_param_;
  ::svaf::TriangularParameter* triang_param_;
  ::svaf::MatrixMulParameter* mxmul_param_;
  ::svaf::PositionEstimateParameter* posest_param_;
  ::svaf::CenterPointParameter* centerpoint_param_;
  ::svaf::SACIAEstimateParameter* sacia_param_;
  ::svaf::IAICPEstimateParameter* iaicp_param_;
  ::svaf::IANDTEstimateParameter* iandt_param_;
  friend void  protobuf_AddDesc_svaf_2eproto();
  friend void protobuf_AssignDesc_svaf_2eproto();
  friend void protobuf_ShutdownFile_svaf_2eproto();

  void InitAsDefaultInstance();
  static LayerParameter* default_instance_;
};
// ===================================================================


// ===================================================================

// SvafTask

// optional string name = 1 [default = "Untitled Algorithm"];
inline bool SvafTask::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SvafTask::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SvafTask::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SvafTask::clear_name() {
  if (name_ != _default_name_) {
    name_->assign(*_default_name_);
  }
  clear_has_name();
}
inline const ::std::string& SvafTask::name() const {
  // @@protoc_insertion_point(field_get:svaf.SvafTask.name)
  return *name_;
}
inline void SvafTask::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:svaf.SvafTask.name)
}
inline void SvafTask::set_name(const char* value) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.SvafTask.name)
}
inline void SvafTask::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.SvafTask.name)
}
inline ::std::string* SvafTask::mutable_name() {
  set_has_name();
  if (name_ == _default_name_) {
    name_ = new ::std::string(*_default_name_);
  }
  // @@protoc_insertion_point(field_mutable:svaf.SvafTask.name)
  return name_;
}
inline ::std::string* SvafTask::release_name() {
  clear_has_name();
  if (name_ == _default_name_) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(_default_name_);
    return temp;
  }
}
inline void SvafTask::set_allocated_name(::std::string* name) {
  if (name_ != _default_name_) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(_default_name_);
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.SvafTask.name)
}

// optional string version = 2;
inline bool SvafTask::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SvafTask::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SvafTask::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SvafTask::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& SvafTask::version() const {
  // @@protoc_insertion_point(field_get:svaf.SvafTask.version)
  return *version_;
}
inline void SvafTask::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:svaf.SvafTask.version)
}
inline void SvafTask::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.SvafTask.version)
}
inline void SvafTask::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.SvafTask.version)
}
inline ::std::string* SvafTask::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svaf.SvafTask.version)
  return version_;
}
inline ::std::string* SvafTask::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SvafTask::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.SvafTask.version)
}

// repeated .svaf.LayerParameter layer = 3;
inline int SvafTask::layer_size() const {
  return layer_.size();
}
inline void SvafTask::clear_layer() {
  layer_.Clear();
}
inline const ::svaf::LayerParameter& SvafTask::layer(int index) const {
  // @@protoc_insertion_point(field_get:svaf.SvafTask.layer)
  return layer_.Get(index);
}
inline ::svaf::LayerParameter* SvafTask::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:svaf.SvafTask.layer)
  return layer_.Mutable(index);
}
inline ::svaf::LayerParameter* SvafTask::add_layer() {
  // @@protoc_insertion_point(field_add:svaf.SvafTask.layer)
  return layer_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::svaf::LayerParameter >&
SvafTask::layer() const {
  // @@protoc_insertion_point(field_list:svaf.SvafTask.layer)
  return layer_;
}
inline ::google::protobuf::RepeatedPtrField< ::svaf::LayerParameter >*
SvafTask::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:svaf.SvafTask.layer)
  return &layer_;
}

// optional int32 pause = 4 [default = 10];
inline bool SvafTask::has_pause() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SvafTask::set_has_pause() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SvafTask::clear_has_pause() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SvafTask::clear_pause() {
  pause_ = 10;
  clear_has_pause();
}
inline ::google::protobuf::int32 SvafTask::pause() const {
  // @@protoc_insertion_point(field_get:svaf.SvafTask.pause)
  return pause_;
}
inline void SvafTask::set_pause(::google::protobuf::int32 value) {
  set_has_pause();
  pause_ = value;
  // @@protoc_insertion_point(field_set:svaf.SvafTask.pause)
}

// -------------------------------------------------------------------

// ImageOperationParameter

// -------------------------------------------------------------------

// SuperPixelSegmentParameter

// optional int32 K = 1 [default = 400];
inline bool SuperPixelSegmentParameter::has_k() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuperPixelSegmentParameter::set_has_k() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuperPixelSegmentParameter::clear_has_k() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuperPixelSegmentParameter::clear_k() {
  k_ = 400;
  clear_has_k();
}
inline ::google::protobuf::int32 SuperPixelSegmentParameter::k() const {
  // @@protoc_insertion_point(field_get:svaf.SuperPixelSegmentParameter.K)
  return k_;
}
inline void SuperPixelSegmentParameter::set_k(::google::protobuf::int32 value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:svaf.SuperPixelSegmentParameter.K)
}

// optional int32 M = 2 [default = 10];
inline bool SuperPixelSegmentParameter::has_m() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuperPixelSegmentParameter::set_has_m() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuperPixelSegmentParameter::clear_has_m() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuperPixelSegmentParameter::clear_m() {
  m_ = 10;
  clear_has_m();
}
inline ::google::protobuf::int32 SuperPixelSegmentParameter::m() const {
  // @@protoc_insertion_point(field_get:svaf.SuperPixelSegmentParameter.M)
  return m_;
}
inline void SuperPixelSegmentParameter::set_m(::google::protobuf::int32 value) {
  set_has_m();
  m_ = value;
  // @@protoc_insertion_point(field_set:svaf.SuperPixelSegmentParameter.M)
}

// optional bool optint = 3 [default = true];
inline bool SuperPixelSegmentParameter::has_optint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SuperPixelSegmentParameter::set_has_optint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SuperPixelSegmentParameter::clear_has_optint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SuperPixelSegmentParameter::clear_optint() {
  optint_ = true;
  clear_has_optint();
}
inline bool SuperPixelSegmentParameter::optint() const {
  // @@protoc_insertion_point(field_get:svaf.SuperPixelSegmentParameter.optint)
  return optint_;
}
inline void SuperPixelSegmentParameter::set_optint(bool value) {
  set_has_optint();
  optint_ = value;
  // @@protoc_insertion_point(field_set:svaf.SuperPixelSegmentParameter.optint)
}

// optional bool saveseg = 4 [default = false];
inline bool SuperPixelSegmentParameter::has_saveseg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SuperPixelSegmentParameter::set_has_saveseg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SuperPixelSegmentParameter::clear_has_saveseg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SuperPixelSegmentParameter::clear_saveseg() {
  saveseg_ = false;
  clear_has_saveseg();
}
inline bool SuperPixelSegmentParameter::saveseg() const {
  // @@protoc_insertion_point(field_get:svaf.SuperPixelSegmentParameter.saveseg)
  return saveseg_;
}
inline void SuperPixelSegmentParameter::set_saveseg(bool value) {
  set_has_saveseg();
  saveseg_ = value;
  // @@protoc_insertion_point(field_set:svaf.SuperPixelSegmentParameter.saveseg)
}

// optional string segname = 5 [default = "./supix.seg"];
inline bool SuperPixelSegmentParameter::has_segname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SuperPixelSegmentParameter::set_has_segname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SuperPixelSegmentParameter::clear_has_segname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SuperPixelSegmentParameter::clear_segname() {
  if (segname_ != _default_segname_) {
    segname_->assign(*_default_segname_);
  }
  clear_has_segname();
}
inline const ::std::string& SuperPixelSegmentParameter::segname() const {
  // @@protoc_insertion_point(field_get:svaf.SuperPixelSegmentParameter.segname)
  return *segname_;
}
inline void SuperPixelSegmentParameter::set_segname(const ::std::string& value) {
  set_has_segname();
  if (segname_ == _default_segname_) {
    segname_ = new ::std::string;
  }
  segname_->assign(value);
  // @@protoc_insertion_point(field_set:svaf.SuperPixelSegmentParameter.segname)
}
inline void SuperPixelSegmentParameter::set_segname(const char* value) {
  set_has_segname();
  if (segname_ == _default_segname_) {
    segname_ = new ::std::string;
  }
  segname_->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.SuperPixelSegmentParameter.segname)
}
inline void SuperPixelSegmentParameter::set_segname(const char* value, size_t size) {
  set_has_segname();
  if (segname_ == _default_segname_) {
    segname_ = new ::std::string;
  }
  segname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.SuperPixelSegmentParameter.segname)
}
inline ::std::string* SuperPixelSegmentParameter::mutable_segname() {
  set_has_segname();
  if (segname_ == _default_segname_) {
    segname_ = new ::std::string(*_default_segname_);
  }
  // @@protoc_insertion_point(field_mutable:svaf.SuperPixelSegmentParameter.segname)
  return segname_;
}
inline ::std::string* SuperPixelSegmentParameter::release_segname() {
  clear_has_segname();
  if (segname_ == _default_segname_) {
    return NULL;
  } else {
    ::std::string* temp = segname_;
    segname_ = const_cast< ::std::string*>(_default_segname_);
    return temp;
  }
}
inline void SuperPixelSegmentParameter::set_allocated_segname(::std::string* segname) {
  if (segname_ != _default_segname_) {
    delete segname_;
  }
  if (segname) {
    set_has_segname();
    segname_ = segname;
  } else {
    clear_has_segname();
    segname_ = const_cast< ::std::string*>(_default_segname_);
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.SuperPixelSegmentParameter.segname)
}

// -------------------------------------------------------------------

// ImageResizeParameter

// -------------------------------------------------------------------

// ImageCropParameter

// -------------------------------------------------------------------

// StereoOperationParameter

// -------------------------------------------------------------------

// StereoRectifyParameter

// optional string filename = 1;
inline bool StereoRectifyParameter::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StereoRectifyParameter::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StereoRectifyParameter::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StereoRectifyParameter::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& StereoRectifyParameter::filename() const {
  // @@protoc_insertion_point(field_get:svaf.StereoRectifyParameter.filename)
  return *filename_;
}
inline void StereoRectifyParameter::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:svaf.StereoRectifyParameter.filename)
}
inline void StereoRectifyParameter::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.StereoRectifyParameter.filename)
}
inline void StereoRectifyParameter::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.StereoRectifyParameter.filename)
}
inline ::std::string* StereoRectifyParameter::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svaf.StereoRectifyParameter.filename)
  return filename_;
}
inline ::std::string* StereoRectifyParameter::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StereoRectifyParameter::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.StereoRectifyParameter.filename)
}

// -------------------------------------------------------------------

// DataParameter

// optional bool color = 1;
inline bool DataParameter::has_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataParameter::set_has_color() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataParameter::clear_has_color() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataParameter::clear_color() {
  color_ = false;
  clear_has_color();
}
inline bool DataParameter::color() const {
  // @@protoc_insertion_point(field_get:svaf.DataParameter.color)
  return color_;
}
inline void DataParameter::set_color(bool value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:svaf.DataParameter.color)
}

// -------------------------------------------------------------------

// ImageDataParameter

// repeated string name = 1;
inline int ImageDataParameter::name_size() const {
  return name_.size();
}
inline void ImageDataParameter::clear_name() {
  name_.Clear();
}
inline const ::std::string& ImageDataParameter::name(int index) const {
  // @@protoc_insertion_point(field_get:svaf.ImageDataParameter.name)
  return name_.Get(index);
}
inline ::std::string* ImageDataParameter::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:svaf.ImageDataParameter.name)
  return name_.Mutable(index);
}
inline void ImageDataParameter::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:svaf.ImageDataParameter.name)
  name_.Mutable(index)->assign(value);
}
inline void ImageDataParameter::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.ImageDataParameter.name)
}
inline void ImageDataParameter::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.ImageDataParameter.name)
}
inline ::std::string* ImageDataParameter::add_name() {
  return name_.Add();
}
inline void ImageDataParameter::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:svaf.ImageDataParameter.name)
}
inline void ImageDataParameter::add_name(const char* value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:svaf.ImageDataParameter.name)
}
inline void ImageDataParameter::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:svaf.ImageDataParameter.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImageDataParameter::name() const {
  // @@protoc_insertion_point(field_list:svaf.ImageDataParameter.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ImageDataParameter::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:svaf.ImageDataParameter.name)
  return &name_;
}

// -------------------------------------------------------------------

// BinocularPair

// optional string left = 1;
inline bool BinocularPair::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BinocularPair::set_has_left() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BinocularPair::clear_has_left() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BinocularPair::clear_left() {
  if (left_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    left_->clear();
  }
  clear_has_left();
}
inline const ::std::string& BinocularPair::left() const {
  // @@protoc_insertion_point(field_get:svaf.BinocularPair.left)
  return *left_;
}
inline void BinocularPair::set_left(const ::std::string& value) {
  set_has_left();
  if (left_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    left_ = new ::std::string;
  }
  left_->assign(value);
  // @@protoc_insertion_point(field_set:svaf.BinocularPair.left)
}
inline void BinocularPair::set_left(const char* value) {
  set_has_left();
  if (left_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    left_ = new ::std::string;
  }
  left_->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.BinocularPair.left)
}
inline void BinocularPair::set_left(const char* value, size_t size) {
  set_has_left();
  if (left_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    left_ = new ::std::string;
  }
  left_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.BinocularPair.left)
}
inline ::std::string* BinocularPair::mutable_left() {
  set_has_left();
  if (left_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    left_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svaf.BinocularPair.left)
  return left_;
}
inline ::std::string* BinocularPair::release_left() {
  clear_has_left();
  if (left_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = left_;
    left_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BinocularPair::set_allocated_left(::std::string* left) {
  if (left_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete left_;
  }
  if (left) {
    set_has_left();
    left_ = left;
  } else {
    clear_has_left();
    left_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.BinocularPair.left)
}

// optional string right = 2;
inline bool BinocularPair::has_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BinocularPair::set_has_right() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BinocularPair::clear_has_right() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BinocularPair::clear_right() {
  if (right_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    right_->clear();
  }
  clear_has_right();
}
inline const ::std::string& BinocularPair::right() const {
  // @@protoc_insertion_point(field_get:svaf.BinocularPair.right)
  return *right_;
}
inline void BinocularPair::set_right(const ::std::string& value) {
  set_has_right();
  if (right_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    right_ = new ::std::string;
  }
  right_->assign(value);
  // @@protoc_insertion_point(field_set:svaf.BinocularPair.right)
}
inline void BinocularPair::set_right(const char* value) {
  set_has_right();
  if (right_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    right_ = new ::std::string;
  }
  right_->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.BinocularPair.right)
}
inline void BinocularPair::set_right(const char* value, size_t size) {
  set_has_right();
  if (right_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    right_ = new ::std::string;
  }
  right_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.BinocularPair.right)
}
inline ::std::string* BinocularPair::mutable_right() {
  set_has_right();
  if (right_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    right_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svaf.BinocularPair.right)
  return right_;
}
inline ::std::string* BinocularPair::release_right() {
  clear_has_right();
  if (right_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = right_;
    right_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BinocularPair::set_allocated_right(::std::string* right) {
  if (right_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete right_;
  }
  if (right) {
    set_has_right();
    right_ = right;
  } else {
    clear_has_right();
    right_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.BinocularPair.right)
}

// -------------------------------------------------------------------

// ImagePairParameter

// repeated .svaf.BinocularPair pair = 1;
inline int ImagePairParameter::pair_size() const {
  return pair_.size();
}
inline void ImagePairParameter::clear_pair() {
  pair_.Clear();
}
inline const ::svaf::BinocularPair& ImagePairParameter::pair(int index) const {
  // @@protoc_insertion_point(field_get:svaf.ImagePairParameter.pair)
  return pair_.Get(index);
}
inline ::svaf::BinocularPair* ImagePairParameter::mutable_pair(int index) {
  // @@protoc_insertion_point(field_mutable:svaf.ImagePairParameter.pair)
  return pair_.Mutable(index);
}
inline ::svaf::BinocularPair* ImagePairParameter::add_pair() {
  // @@protoc_insertion_point(field_add:svaf.ImagePairParameter.pair)
  return pair_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >&
ImagePairParameter::pair() const {
  // @@protoc_insertion_point(field_list:svaf.ImagePairParameter.pair)
  return pair_;
}
inline ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >*
ImagePairParameter::mutable_pair() {
  // @@protoc_insertion_point(field_mutable_list:svaf.ImagePairParameter.pair)
  return &pair_;
}

// repeated .svaf.BinocularPair _pair = 255;
inline int ImagePairParameter::_pair_size() const {
  return _pair_.size();
}
inline void ImagePairParameter::clear__pair() {
  _pair_.Clear();
}
inline const ::svaf::BinocularPair& ImagePairParameter::_pair(int index) const {
  // @@protoc_insertion_point(field_get:svaf.ImagePairParameter._pair)
  return _pair_.Get(index);
}
inline ::svaf::BinocularPair* ImagePairParameter::mutable__pair(int index) {
  // @@protoc_insertion_point(field_mutable:svaf.ImagePairParameter._pair)
  return _pair_.Mutable(index);
}
inline ::svaf::BinocularPair* ImagePairParameter::add__pair() {
  // @@protoc_insertion_point(field_add:svaf.ImagePairParameter._pair)
  return _pair_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >&
ImagePairParameter::_pair() const {
  // @@protoc_insertion_point(field_list:svaf.ImagePairParameter._pair)
  return _pair_;
}
inline ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >*
ImagePairParameter::mutable__pair() {
  // @@protoc_insertion_point(field_mutable_list:svaf.ImagePairParameter._pair)
  return &_pair_;
}

// -------------------------------------------------------------------

// VideoDataParameter

// repeated string name = 1;
inline int VideoDataParameter::name_size() const {
  return name_.size();
}
inline void VideoDataParameter::clear_name() {
  name_.Clear();
}
inline const ::std::string& VideoDataParameter::name(int index) const {
  // @@protoc_insertion_point(field_get:svaf.VideoDataParameter.name)
  return name_.Get(index);
}
inline ::std::string* VideoDataParameter::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:svaf.VideoDataParameter.name)
  return name_.Mutable(index);
}
inline void VideoDataParameter::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:svaf.VideoDataParameter.name)
  name_.Mutable(index)->assign(value);
}
inline void VideoDataParameter::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.VideoDataParameter.name)
}
inline void VideoDataParameter::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.VideoDataParameter.name)
}
inline ::std::string* VideoDataParameter::add_name() {
  return name_.Add();
}
inline void VideoDataParameter::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:svaf.VideoDataParameter.name)
}
inline void VideoDataParameter::add_name(const char* value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:svaf.VideoDataParameter.name)
}
inline void VideoDataParameter::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:svaf.VideoDataParameter.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VideoDataParameter::name() const {
  // @@protoc_insertion_point(field_list:svaf.VideoDataParameter.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VideoDataParameter::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:svaf.VideoDataParameter.name)
  return &name_;
}

// -------------------------------------------------------------------

// VideoPairParameter

// repeated .svaf.BinocularPair pair = 1;
inline int VideoPairParameter::pair_size() const {
  return pair_.size();
}
inline void VideoPairParameter::clear_pair() {
  pair_.Clear();
}
inline const ::svaf::BinocularPair& VideoPairParameter::pair(int index) const {
  // @@protoc_insertion_point(field_get:svaf.VideoPairParameter.pair)
  return pair_.Get(index);
}
inline ::svaf::BinocularPair* VideoPairParameter::mutable_pair(int index) {
  // @@protoc_insertion_point(field_mutable:svaf.VideoPairParameter.pair)
  return pair_.Mutable(index);
}
inline ::svaf::BinocularPair* VideoPairParameter::add_pair() {
  // @@protoc_insertion_point(field_add:svaf.VideoPairParameter.pair)
  return pair_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >&
VideoPairParameter::pair() const {
  // @@protoc_insertion_point(field_list:svaf.VideoPairParameter.pair)
  return pair_;
}
inline ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >*
VideoPairParameter::mutable_pair() {
  // @@protoc_insertion_point(field_mutable_list:svaf.VideoPairParameter.pair)
  return &pair_;
}

// repeated .svaf.BinocularPair _pair = 255;
inline int VideoPairParameter::_pair_size() const {
  return _pair_.size();
}
inline void VideoPairParameter::clear__pair() {
  _pair_.Clear();
}
inline const ::svaf::BinocularPair& VideoPairParameter::_pair(int index) const {
  // @@protoc_insertion_point(field_get:svaf.VideoPairParameter._pair)
  return _pair_.Get(index);
}
inline ::svaf::BinocularPair* VideoPairParameter::mutable__pair(int index) {
  // @@protoc_insertion_point(field_mutable:svaf.VideoPairParameter._pair)
  return _pair_.Mutable(index);
}
inline ::svaf::BinocularPair* VideoPairParameter::add__pair() {
  // @@protoc_insertion_point(field_add:svaf.VideoPairParameter._pair)
  return _pair_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >&
VideoPairParameter::_pair() const {
  // @@protoc_insertion_point(field_list:svaf.VideoPairParameter._pair)
  return _pair_;
}
inline ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >*
VideoPairParameter::mutable__pair() {
  // @@protoc_insertion_point(field_mutable_list:svaf.VideoPairParameter._pair)
  return &_pair_;
}

// -------------------------------------------------------------------

// CameraDataParameter

// optional int32 camera = 1;
inline bool CameraDataParameter::has_camera() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraDataParameter::set_has_camera() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraDataParameter::clear_has_camera() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraDataParameter::clear_camera() {
  camera_ = 0;
  clear_has_camera();
}
inline ::google::protobuf::int32 CameraDataParameter::camera() const {
  // @@protoc_insertion_point(field_get:svaf.CameraDataParameter.camera)
  return camera_;
}
inline void CameraDataParameter::set_camera(::google::protobuf::int32 value) {
  set_has_camera();
  camera_ = value;
  // @@protoc_insertion_point(field_set:svaf.CameraDataParameter.camera)
}

// -------------------------------------------------------------------

// CameraPairParameter

// optional int32 leftcamera = 1;
inline bool CameraPairParameter::has_leftcamera() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraPairParameter::set_has_leftcamera() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraPairParameter::clear_has_leftcamera() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraPairParameter::clear_leftcamera() {
  leftcamera_ = 0;
  clear_has_leftcamera();
}
inline ::google::protobuf::int32 CameraPairParameter::leftcamera() const {
  // @@protoc_insertion_point(field_get:svaf.CameraPairParameter.leftcamera)
  return leftcamera_;
}
inline void CameraPairParameter::set_leftcamera(::google::protobuf::int32 value) {
  set_has_leftcamera();
  leftcamera_ = value;
  // @@protoc_insertion_point(field_set:svaf.CameraPairParameter.leftcamera)
}

// optional int32 rightcamera = 2;
inline bool CameraPairParameter::has_rightcamera() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraPairParameter::set_has_rightcamera() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraPairParameter::clear_has_rightcamera() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraPairParameter::clear_rightcamera() {
  rightcamera_ = 0;
  clear_has_rightcamera();
}
inline ::google::protobuf::int32 CameraPairParameter::rightcamera() const {
  // @@protoc_insertion_point(field_get:svaf.CameraPairParameter.rightcamera)
  return rightcamera_;
}
inline void CameraPairParameter::set_rightcamera(::google::protobuf::int32 value) {
  set_has_rightcamera();
  rightcamera_ = value;
  // @@protoc_insertion_point(field_set:svaf.CameraPairParameter.rightcamera)
}

// -------------------------------------------------------------------

// DSPCameraDataParameter

// optional int32 chns = 1;
inline bool DSPCameraDataParameter::has_chns() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DSPCameraDataParameter::set_has_chns() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DSPCameraDataParameter::clear_has_chns() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DSPCameraDataParameter::clear_chns() {
  chns_ = 0;
  clear_has_chns();
}
inline ::google::protobuf::int32 DSPCameraDataParameter::chns() const {
  // @@protoc_insertion_point(field_get:svaf.DSPCameraDataParameter.chns)
  return chns_;
}
inline void DSPCameraDataParameter::set_chns(::google::protobuf::int32 value) {
  set_has_chns();
  chns_ = value;
  // @@protoc_insertion_point(field_set:svaf.DSPCameraDataParameter.chns)
}

// -------------------------------------------------------------------

// DSPCameraPairParameter

// optional int32 chns = 1;
inline bool DSPCameraPairParameter::has_chns() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DSPCameraPairParameter::set_has_chns() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DSPCameraPairParameter::clear_has_chns() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DSPCameraPairParameter::clear_chns() {
  chns_ = 0;
  clear_has_chns();
}
inline ::google::protobuf::int32 DSPCameraPairParameter::chns() const {
  // @@protoc_insertion_point(field_get:svaf.DSPCameraPairParameter.chns)
  return chns_;
}
inline void DSPCameraPairParameter::set_chns(::google::protobuf::int32 value) {
  set_has_chns();
  chns_ = value;
  // @@protoc_insertion_point(field_set:svaf.DSPCameraPairParameter.chns)
}

// -------------------------------------------------------------------

// KinectDataParameter

// -------------------------------------------------------------------

// ImageFolderParameter

// repeated string name = 1;
inline int ImageFolderParameter::name_size() const {
  return name_.size();
}
inline void ImageFolderParameter::clear_name() {
  name_.Clear();
}
inline const ::std::string& ImageFolderParameter::name(int index) const {
  // @@protoc_insertion_point(field_get:svaf.ImageFolderParameter.name)
  return name_.Get(index);
}
inline ::std::string* ImageFolderParameter::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:svaf.ImageFolderParameter.name)
  return name_.Mutable(index);
}
inline void ImageFolderParameter::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:svaf.ImageFolderParameter.name)
  name_.Mutable(index)->assign(value);
}
inline void ImageFolderParameter::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.ImageFolderParameter.name)
}
inline void ImageFolderParameter::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.ImageFolderParameter.name)
}
inline ::std::string* ImageFolderParameter::add_name() {
  return name_.Add();
}
inline void ImageFolderParameter::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:svaf.ImageFolderParameter.name)
}
inline void ImageFolderParameter::add_name(const char* value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:svaf.ImageFolderParameter.name)
}
inline void ImageFolderParameter::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:svaf.ImageFolderParameter.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ImageFolderParameter::name() const {
  // @@protoc_insertion_point(field_list:svaf.ImageFolderParameter.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ImageFolderParameter::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:svaf.ImageFolderParameter.name)
  return &name_;
}

// -------------------------------------------------------------------

// ImagePairFolderParameter

// repeated .svaf.BinocularPair pair = 1;
inline int ImagePairFolderParameter::pair_size() const {
  return pair_.size();
}
inline void ImagePairFolderParameter::clear_pair() {
  pair_.Clear();
}
inline const ::svaf::BinocularPair& ImagePairFolderParameter::pair(int index) const {
  // @@protoc_insertion_point(field_get:svaf.ImagePairFolderParameter.pair)
  return pair_.Get(index);
}
inline ::svaf::BinocularPair* ImagePairFolderParameter::mutable_pair(int index) {
  // @@protoc_insertion_point(field_mutable:svaf.ImagePairFolderParameter.pair)
  return pair_.Mutable(index);
}
inline ::svaf::BinocularPair* ImagePairFolderParameter::add_pair() {
  // @@protoc_insertion_point(field_add:svaf.ImagePairFolderParameter.pair)
  return pair_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >&
ImagePairFolderParameter::pair() const {
  // @@protoc_insertion_point(field_list:svaf.ImagePairFolderParameter.pair)
  return pair_;
}
inline ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >*
ImagePairFolderParameter::mutable_pair() {
  // @@protoc_insertion_point(field_mutable_list:svaf.ImagePairFolderParameter.pair)
  return &pair_;
}

// repeated .svaf.BinocularPair _pair = 255;
inline int ImagePairFolderParameter::_pair_size() const {
  return _pair_.size();
}
inline void ImagePairFolderParameter::clear__pair() {
  _pair_.Clear();
}
inline const ::svaf::BinocularPair& ImagePairFolderParameter::_pair(int index) const {
  // @@protoc_insertion_point(field_get:svaf.ImagePairFolderParameter._pair)
  return _pair_.Get(index);
}
inline ::svaf::BinocularPair* ImagePairFolderParameter::mutable__pair(int index) {
  // @@protoc_insertion_point(field_mutable:svaf.ImagePairFolderParameter._pair)
  return _pair_.Mutable(index);
}
inline ::svaf::BinocularPair* ImagePairFolderParameter::add__pair() {
  // @@protoc_insertion_point(field_add:svaf.ImagePairFolderParameter._pair)
  return _pair_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >&
ImagePairFolderParameter::_pair() const {
  // @@protoc_insertion_point(field_list:svaf.ImagePairFolderParameter._pair)
  return _pair_;
}
inline ::google::protobuf::RepeatedPtrField< ::svaf::BinocularPair >*
ImagePairFolderParameter::mutable__pair() {
  // @@protoc_insertion_point(field_mutable_list:svaf.ImagePairFolderParameter._pair)
  return &_pair_;
}

// -------------------------------------------------------------------

// RecognizeParameter

// -------------------------------------------------------------------

// ROIExtention

// optional int32 left = 1 [default = 0];
inline bool ROIExtention::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ROIExtention::set_has_left() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ROIExtention::clear_has_left() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ROIExtention::clear_left() {
  left_ = 0;
  clear_has_left();
}
inline ::google::protobuf::int32 ROIExtention::left() const {
  // @@protoc_insertion_point(field_get:svaf.ROIExtention.left)
  return left_;
}
inline void ROIExtention::set_left(::google::protobuf::int32 value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:svaf.ROIExtention.left)
}

// optional int32 right = 2 [default = 0];
inline bool ROIExtention::has_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ROIExtention::set_has_right() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ROIExtention::clear_has_right() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ROIExtention::clear_right() {
  right_ = 0;
  clear_has_right();
}
inline ::google::protobuf::int32 ROIExtention::right() const {
  // @@protoc_insertion_point(field_get:svaf.ROIExtention.right)
  return right_;
}
inline void ROIExtention::set_right(::google::protobuf::int32 value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:svaf.ROIExtention.right)
}

// optional int32 top = 3 [default = 0];
inline bool ROIExtention::has_top() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ROIExtention::set_has_top() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ROIExtention::clear_has_top() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ROIExtention::clear_top() {
  top_ = 0;
  clear_has_top();
}
inline ::google::protobuf::int32 ROIExtention::top() const {
  // @@protoc_insertion_point(field_get:svaf.ROIExtention.top)
  return top_;
}
inline void ROIExtention::set_top(::google::protobuf::int32 value) {
  set_has_top();
  top_ = value;
  // @@protoc_insertion_point(field_set:svaf.ROIExtention.top)
}

// optional int32 bottom = 4 [default = 0];
inline bool ROIExtention::has_bottom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ROIExtention::set_has_bottom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ROIExtention::clear_has_bottom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ROIExtention::clear_bottom() {
  bottom_ = 0;
  clear_has_bottom();
}
inline ::google::protobuf::int32 ROIExtention::bottom() const {
  // @@protoc_insertion_point(field_get:svaf.ROIExtention.bottom)
  return bottom_;
}
inline void ROIExtention::set_bottom(::google::protobuf::int32 value) {
  set_has_bottom();
  bottom_ = value;
  // @@protoc_insertion_point(field_set:svaf.ROIExtention.bottom)
}

// optional int32 xshift = 5 [default = 0];
inline bool ROIExtention::has_xshift() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ROIExtention::set_has_xshift() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ROIExtention::clear_has_xshift() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ROIExtention::clear_xshift() {
  xshift_ = 0;
  clear_has_xshift();
}
inline ::google::protobuf::int32 ROIExtention::xshift() const {
  // @@protoc_insertion_point(field_get:svaf.ROIExtention.xshift)
  return xshift_;
}
inline void ROIExtention::set_xshift(::google::protobuf::int32 value) {
  set_has_xshift();
  xshift_ = value;
  // @@protoc_insertion_point(field_set:svaf.ROIExtention.xshift)
}

// -------------------------------------------------------------------

// AdaboostParameter

// optional string detector = 1;
inline bool AdaboostParameter::has_detector() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdaboostParameter::set_has_detector() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdaboostParameter::clear_has_detector() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdaboostParameter::clear_detector() {
  if (detector_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detector_->clear();
  }
  clear_has_detector();
}
inline const ::std::string& AdaboostParameter::detector() const {
  // @@protoc_insertion_point(field_get:svaf.AdaboostParameter.detector)
  return *detector_;
}
inline void AdaboostParameter::set_detector(const ::std::string& value) {
  set_has_detector();
  if (detector_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detector_ = new ::std::string;
  }
  detector_->assign(value);
  // @@protoc_insertion_point(field_set:svaf.AdaboostParameter.detector)
}
inline void AdaboostParameter::set_detector(const char* value) {
  set_has_detector();
  if (detector_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detector_ = new ::std::string;
  }
  detector_->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.AdaboostParameter.detector)
}
inline void AdaboostParameter::set_detector(const char* value, size_t size) {
  set_has_detector();
  if (detector_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detector_ = new ::std::string;
  }
  detector_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.AdaboostParameter.detector)
}
inline ::std::string* AdaboostParameter::mutable_detector() {
  set_has_detector();
  if (detector_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    detector_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svaf.AdaboostParameter.detector)
  return detector_;
}
inline ::std::string* AdaboostParameter::release_detector() {
  clear_has_detector();
  if (detector_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = detector_;
    detector_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AdaboostParameter::set_allocated_detector(::std::string* detector) {
  if (detector_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete detector_;
  }
  if (detector) {
    set_has_detector();
    detector_ = detector;
  } else {
    clear_has_detector();
    detector_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.AdaboostParameter.detector)
}

// optional bool sync_frame = 2 [default = false];
inline bool AdaboostParameter::has_sync_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdaboostParameter::set_has_sync_frame() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdaboostParameter::clear_has_sync_frame() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdaboostParameter::clear_sync_frame() {
  sync_frame_ = false;
  clear_has_sync_frame();
}
inline bool AdaboostParameter::sync_frame() const {
  // @@protoc_insertion_point(field_get:svaf.AdaboostParameter.sync_frame)
  return sync_frame_;
}
inline void AdaboostParameter::set_sync_frame(bool value) {
  set_has_sync_frame();
  sync_frame_ = value;
  // @@protoc_insertion_point(field_set:svaf.AdaboostParameter.sync_frame)
}

// optional bool sync_video = 3 [default = false];
inline bool AdaboostParameter::has_sync_video() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdaboostParameter::set_has_sync_video() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdaboostParameter::clear_has_sync_video() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdaboostParameter::clear_sync_video() {
  sync_video_ = false;
  clear_has_sync_video();
}
inline bool AdaboostParameter::sync_video() const {
  // @@protoc_insertion_point(field_get:svaf.AdaboostParameter.sync_video)
  return sync_video_;
}
inline void AdaboostParameter::set_sync_video(bool value) {
  set_has_sync_video();
  sync_video_ = value;
  // @@protoc_insertion_point(field_set:svaf.AdaboostParameter.sync_video)
}

// optional bool sync_epipolar = 4 [default = false];
inline bool AdaboostParameter::has_sync_epipolar() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdaboostParameter::set_has_sync_epipolar() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdaboostParameter::clear_has_sync_epipolar() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdaboostParameter::clear_sync_epipolar() {
  sync_epipolar_ = false;
  clear_has_sync_epipolar();
}
inline bool AdaboostParameter::sync_epipolar() const {
  // @@protoc_insertion_point(field_get:svaf.AdaboostParameter.sync_epipolar)
  return sync_epipolar_;
}
inline void AdaboostParameter::set_sync_epipolar(bool value) {
  set_has_sync_epipolar();
  sync_epipolar_ = value;
  // @@protoc_insertion_point(field_set:svaf.AdaboostParameter.sync_epipolar)
}

// optional float thresh = 5 [default = 0];
inline bool AdaboostParameter::has_thresh() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AdaboostParameter::set_has_thresh() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AdaboostParameter::clear_has_thresh() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AdaboostParameter::clear_thresh() {
  thresh_ = 0;
  clear_has_thresh();
}
inline float AdaboostParameter::thresh() const {
  // @@protoc_insertion_point(field_get:svaf.AdaboostParameter.thresh)
  return thresh_;
}
inline void AdaboostParameter::set_thresh(float value) {
  set_has_thresh();
  thresh_ = value;
  // @@protoc_insertion_point(field_set:svaf.AdaboostParameter.thresh)
}

// optional float nms = 6 [default = 0.65];
inline bool AdaboostParameter::has_nms() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AdaboostParameter::set_has_nms() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AdaboostParameter::clear_has_nms() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AdaboostParameter::clear_nms() {
  nms_ = 0.65f;
  clear_has_nms();
}
inline float AdaboostParameter::nms() const {
  // @@protoc_insertion_point(field_get:svaf.AdaboostParameter.nms)
  return nms_;
}
inline void AdaboostParameter::set_nms(float value) {
  set_has_nms();
  nms_ = value;
  // @@protoc_insertion_point(field_set:svaf.AdaboostParameter.nms)
}

// optional .svaf.ROIExtention pad_rect = 7;
inline bool AdaboostParameter::has_pad_rect() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AdaboostParameter::set_has_pad_rect() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AdaboostParameter::clear_has_pad_rect() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AdaboostParameter::clear_pad_rect() {
  if (pad_rect_ != NULL) pad_rect_->::svaf::ROIExtention::Clear();
  clear_has_pad_rect();
}
inline const ::svaf::ROIExtention& AdaboostParameter::pad_rect() const {
  // @@protoc_insertion_point(field_get:svaf.AdaboostParameter.pad_rect)
  return pad_rect_ != NULL ? *pad_rect_ : *default_instance_->pad_rect_;
}
inline ::svaf::ROIExtention* AdaboostParameter::mutable_pad_rect() {
  set_has_pad_rect();
  if (pad_rect_ == NULL) pad_rect_ = new ::svaf::ROIExtention;
  // @@protoc_insertion_point(field_mutable:svaf.AdaboostParameter.pad_rect)
  return pad_rect_;
}
inline ::svaf::ROIExtention* AdaboostParameter::release_pad_rect() {
  clear_has_pad_rect();
  ::svaf::ROIExtention* temp = pad_rect_;
  pad_rect_ = NULL;
  return temp;
}
inline void AdaboostParameter::set_allocated_pad_rect(::svaf::ROIExtention* pad_rect) {
  delete pad_rect_;
  pad_rect_ = pad_rect;
  if (pad_rect) {
    set_has_pad_rect();
  } else {
    clear_has_pad_rect();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.AdaboostParameter.pad_rect)
}

// -------------------------------------------------------------------

// TrackParameter

// -------------------------------------------------------------------

// InitRectParameter

// optional uint32 x = 1;
inline bool InitRectParameter::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InitRectParameter::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InitRectParameter::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InitRectParameter::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 InitRectParameter::x() const {
  // @@protoc_insertion_point(field_get:svaf.InitRectParameter.x)
  return x_;
}
inline void InitRectParameter::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:svaf.InitRectParameter.x)
}

// optional uint32 y = 2;
inline bool InitRectParameter::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InitRectParameter::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InitRectParameter::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InitRectParameter::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 InitRectParameter::y() const {
  // @@protoc_insertion_point(field_get:svaf.InitRectParameter.y)
  return y_;
}
inline void InitRectParameter::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:svaf.InitRectParameter.y)
}

// optional uint32 width = 3;
inline bool InitRectParameter::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InitRectParameter::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InitRectParameter::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InitRectParameter::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 InitRectParameter::width() const {
  // @@protoc_insertion_point(field_get:svaf.InitRectParameter.width)
  return width_;
}
inline void InitRectParameter::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:svaf.InitRectParameter.width)
}

// optional uint32 height = 4;
inline bool InitRectParameter::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InitRectParameter::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InitRectParameter::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InitRectParameter::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 InitRectParameter::height() const {
  // @@protoc_insertion_point(field_get:svaf.InitRectParameter.height)
  return height_;
}
inline void InitRectParameter::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:svaf.InitRectParameter.height)
}

// -------------------------------------------------------------------

// MilTrackParameter

// optional .svaf.MilTrackParameter.InitType init_type = 1 [default = AUTORECT];
inline bool MilTrackParameter::has_init_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MilTrackParameter::set_has_init_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MilTrackParameter::clear_has_init_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MilTrackParameter::clear_init_type() {
  init_type_ = 3;
  clear_has_init_type();
}
inline ::svaf::MilTrackParameter_InitType MilTrackParameter::init_type() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.init_type)
  return static_cast< ::svaf::MilTrackParameter_InitType >(init_type_);
}
inline void MilTrackParameter::set_init_type(::svaf::MilTrackParameter_InitType value) {
  assert(::svaf::MilTrackParameter_InitType_IsValid(value));
  set_has_init_type();
  init_type_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.init_type)
}

// optional .svaf.MilTrackParameter.TrackType track_type = 2 [default = MIL];
inline bool MilTrackParameter::has_track_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MilTrackParameter::set_has_track_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MilTrackParameter::clear_has_track_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MilTrackParameter::clear_track_type() {
  track_type_ = 1;
  clear_has_track_type();
}
inline ::svaf::MilTrackParameter_TrackType MilTrackParameter::track_type() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.track_type)
  return static_cast< ::svaf::MilTrackParameter_TrackType >(track_type_);
}
inline void MilTrackParameter::set_track_type(::svaf::MilTrackParameter_TrackType value) {
  assert(::svaf::MilTrackParameter_TrackType_IsValid(value));
  set_has_track_type();
  track_type_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.track_type)
}

// optional int32 track_count = 3 [default = 20];
inline bool MilTrackParameter::has_track_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MilTrackParameter::set_has_track_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MilTrackParameter::clear_has_track_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MilTrackParameter::clear_track_count() {
  track_count_ = 20;
  clear_has_track_count();
}
inline ::google::protobuf::int32 MilTrackParameter::track_count() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.track_count)
  return track_count_;
}
inline void MilTrackParameter::set_track_count(::google::protobuf::int32 value) {
  set_has_track_count();
  track_count_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.track_count)
}

// repeated .svaf.InitRectParameter init_rect = 4;
inline int MilTrackParameter::init_rect_size() const {
  return init_rect_.size();
}
inline void MilTrackParameter::clear_init_rect() {
  init_rect_.Clear();
}
inline const ::svaf::InitRectParameter& MilTrackParameter::init_rect(int index) const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.init_rect)
  return init_rect_.Get(index);
}
inline ::svaf::InitRectParameter* MilTrackParameter::mutable_init_rect(int index) {
  // @@protoc_insertion_point(field_mutable:svaf.MilTrackParameter.init_rect)
  return init_rect_.Mutable(index);
}
inline ::svaf::InitRectParameter* MilTrackParameter::add_init_rect() {
  // @@protoc_insertion_point(field_add:svaf.MilTrackParameter.init_rect)
  return init_rect_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::svaf::InitRectParameter >&
MilTrackParameter::init_rect() const {
  // @@protoc_insertion_point(field_list:svaf.MilTrackParameter.init_rect)
  return init_rect_;
}
inline ::google::protobuf::RepeatedPtrField< ::svaf::InitRectParameter >*
MilTrackParameter::mutable_init_rect() {
  // @@protoc_insertion_point(field_mutable_list:svaf.MilTrackParameter.init_rect)
  return &init_rect_;
}

// optional uint32 tr_width = 5 [default = 200];
inline bool MilTrackParameter::has_tr_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MilTrackParameter::set_has_tr_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MilTrackParameter::clear_has_tr_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MilTrackParameter::clear_tr_width() {
  tr_width_ = 200u;
  clear_has_tr_width();
}
inline ::google::protobuf::uint32 MilTrackParameter::tr_width() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.tr_width)
  return tr_width_;
}
inline void MilTrackParameter::set_tr_width(::google::protobuf::uint32 value) {
  set_has_tr_width();
  tr_width_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.tr_width)
}

// optional uint32 tr_height = 6 [default = 150];
inline bool MilTrackParameter::has_tr_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MilTrackParameter::set_has_tr_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MilTrackParameter::clear_has_tr_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MilTrackParameter::clear_tr_height() {
  tr_height_ = 150u;
  clear_has_tr_height();
}
inline ::google::protobuf::uint32 MilTrackParameter::tr_height() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.tr_height)
  return tr_height_;
}
inline void MilTrackParameter::set_tr_height(::google::protobuf::uint32 value) {
  set_has_tr_height();
  tr_height_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.tr_height)
}

// optional float scalefactor = 7 [default = 0.5];
inline bool MilTrackParameter::has_scalefactor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MilTrackParameter::set_has_scalefactor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MilTrackParameter::clear_has_scalefactor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MilTrackParameter::clear_scalefactor() {
  scalefactor_ = 0.5f;
  clear_has_scalefactor();
}
inline float MilTrackParameter::scalefactor() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.scalefactor)
  return scalefactor_;
}
inline void MilTrackParameter::set_scalefactor(float value) {
  set_has_scalefactor();
  scalefactor_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.scalefactor)
}

// optional uint32 init_negnum = 11 [default = 65];
inline bool MilTrackParameter::has_init_negnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MilTrackParameter::set_has_init_negnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MilTrackParameter::clear_has_init_negnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MilTrackParameter::clear_init_negnum() {
  init_negnum_ = 65u;
  clear_has_init_negnum();
}
inline ::google::protobuf::uint32 MilTrackParameter::init_negnum() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.init_negnum)
  return init_negnum_;
}
inline void MilTrackParameter::set_init_negnum(::google::protobuf::uint32 value) {
  set_has_init_negnum();
  init_negnum_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.init_negnum)
}

// optional uint32 negnum = 12 [default = 65];
inline bool MilTrackParameter::has_negnum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MilTrackParameter::set_has_negnum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MilTrackParameter::clear_has_negnum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MilTrackParameter::clear_negnum() {
  negnum_ = 65u;
  clear_has_negnum();
}
inline ::google::protobuf::uint32 MilTrackParameter::negnum() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.negnum)
  return negnum_;
}
inline void MilTrackParameter::set_negnum(::google::protobuf::uint32 value) {
  set_has_negnum();
  negnum_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.negnum)
}

// optional uint32 posmax = 13 [default = 100000];
inline bool MilTrackParameter::has_posmax() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MilTrackParameter::set_has_posmax() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MilTrackParameter::clear_has_posmax() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MilTrackParameter::clear_posmax() {
  posmax_ = 100000u;
  clear_has_posmax();
}
inline ::google::protobuf::uint32 MilTrackParameter::posmax() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.posmax)
  return posmax_;
}
inline void MilTrackParameter::set_posmax(::google::protobuf::uint32 value) {
  set_has_posmax();
  posmax_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.posmax)
}

// optional uint32 srchwinsz = 14 [default = 25];
inline bool MilTrackParameter::has_srchwinsz() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MilTrackParameter::set_has_srchwinsz() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MilTrackParameter::clear_has_srchwinsz() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MilTrackParameter::clear_srchwinsz() {
  srchwinsz_ = 25u;
  clear_has_srchwinsz();
}
inline ::google::protobuf::uint32 MilTrackParameter::srchwinsz() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.srchwinsz)
  return srchwinsz_;
}
inline void MilTrackParameter::set_srchwinsz(::google::protobuf::uint32 value) {
  set_has_srchwinsz();
  srchwinsz_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.srchwinsz)
}

// optional uint32 negsample_strat = 15 [default = 1];
inline bool MilTrackParameter::has_negsample_strat() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MilTrackParameter::set_has_negsample_strat() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MilTrackParameter::clear_has_negsample_strat() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MilTrackParameter::clear_negsample_strat() {
  negsample_strat_ = 1u;
  clear_has_negsample_strat();
}
inline ::google::protobuf::uint32 MilTrackParameter::negsample_strat() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.negsample_strat)
  return negsample_strat_;
}
inline void MilTrackParameter::set_negsample_strat(::google::protobuf::uint32 value) {
  set_has_negsample_strat();
  negsample_strat_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.negsample_strat)
}

// optional uint32 numfeat = 16 [default = 250];
inline bool MilTrackParameter::has_numfeat() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MilTrackParameter::set_has_numfeat() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MilTrackParameter::clear_has_numfeat() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MilTrackParameter::clear_numfeat() {
  numfeat_ = 250u;
  clear_has_numfeat();
}
inline ::google::protobuf::uint32 MilTrackParameter::numfeat() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.numfeat)
  return numfeat_;
}
inline void MilTrackParameter::set_numfeat(::google::protobuf::uint32 value) {
  set_has_numfeat();
  numfeat_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.numfeat)
}

// optional uint32 numsel = 17 [default = 50];
inline bool MilTrackParameter::has_numsel() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MilTrackParameter::set_has_numsel() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MilTrackParameter::clear_has_numsel() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MilTrackParameter::clear_numsel() {
  numsel_ = 50u;
  clear_has_numsel();
}
inline ::google::protobuf::uint32 MilTrackParameter::numsel() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.numsel)
  return numsel_;
}
inline void MilTrackParameter::set_numsel(::google::protobuf::uint32 value) {
  set_has_numsel();
  numsel_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.numsel)
}

// optional float lrate = 21 [default = 0.85];
inline bool MilTrackParameter::has_lrate() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MilTrackParameter::set_has_lrate() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MilTrackParameter::clear_has_lrate() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MilTrackParameter::clear_lrate() {
  lrate_ = 0.85f;
  clear_has_lrate();
}
inline float MilTrackParameter::lrate() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.lrate)
  return lrate_;
}
inline void MilTrackParameter::set_lrate(float value) {
  set_has_lrate();
  lrate_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.lrate)
}

// optional float posrad = 22 [default = 1];
inline bool MilTrackParameter::has_posrad() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MilTrackParameter::set_has_posrad() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MilTrackParameter::clear_has_posrad() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MilTrackParameter::clear_posrad() {
  posrad_ = 1;
  clear_has_posrad();
}
inline float MilTrackParameter::posrad() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.posrad)
  return posrad_;
}
inline void MilTrackParameter::set_posrad(float value) {
  set_has_posrad();
  posrad_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.posrad)
}

// optional float init_posrad = 23 [default = 3];
inline bool MilTrackParameter::has_init_posrad() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MilTrackParameter::set_has_init_posrad() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MilTrackParameter::clear_has_init_posrad() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MilTrackParameter::clear_init_posrad() {
  init_posrad_ = 3;
  clear_has_init_posrad();
}
inline float MilTrackParameter::init_posrad() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.init_posrad)
  return init_posrad_;
}
inline void MilTrackParameter::set_init_posrad(float value) {
  set_has_init_posrad();
  init_posrad_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.init_posrad)
}

// optional uint32 haarmin_rectnum = 24 [default = 2];
inline bool MilTrackParameter::has_haarmin_rectnum() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MilTrackParameter::set_has_haarmin_rectnum() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MilTrackParameter::clear_has_haarmin_rectnum() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MilTrackParameter::clear_haarmin_rectnum() {
  haarmin_rectnum_ = 2u;
  clear_has_haarmin_rectnum();
}
inline ::google::protobuf::uint32 MilTrackParameter::haarmin_rectnum() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.haarmin_rectnum)
  return haarmin_rectnum_;
}
inline void MilTrackParameter::set_haarmin_rectnum(::google::protobuf::uint32 value) {
  set_has_haarmin_rectnum();
  haarmin_rectnum_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.haarmin_rectnum)
}

// optional uint32 haarmax_rectnum = 25 [default = 6];
inline bool MilTrackParameter::has_haarmax_rectnum() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MilTrackParameter::set_has_haarmax_rectnum() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MilTrackParameter::clear_has_haarmax_rectnum() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MilTrackParameter::clear_haarmax_rectnum() {
  haarmax_rectnum_ = 6u;
  clear_has_haarmax_rectnum();
}
inline ::google::protobuf::uint32 MilTrackParameter::haarmax_rectnum() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.haarmax_rectnum)
  return haarmax_rectnum_;
}
inline void MilTrackParameter::set_haarmax_rectnum(::google::protobuf::uint32 value) {
  set_has_haarmax_rectnum();
  haarmax_rectnum_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.haarmax_rectnum)
}

// optional bool uselogr = 29 [default = true];
inline bool MilTrackParameter::has_uselogr() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MilTrackParameter::set_has_uselogr() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MilTrackParameter::clear_has_uselogr() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MilTrackParameter::clear_uselogr() {
  uselogr_ = true;
  clear_has_uselogr();
}
inline bool MilTrackParameter::uselogr() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.uselogr)
  return uselogr_;
}
inline void MilTrackParameter::set_uselogr(bool value) {
  set_has_uselogr();
  uselogr_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.uselogr)
}

// optional bool tss = 31 [default = false];
inline bool MilTrackParameter::has_tss() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MilTrackParameter::set_has_tss() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MilTrackParameter::clear_has_tss() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MilTrackParameter::clear_tss() {
  tss_ = false;
  clear_has_tss();
}
inline bool MilTrackParameter::tss() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.tss)
  return tss_;
}
inline void MilTrackParameter::set_tss(bool value) {
  set_has_tss();
  tss_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.tss)
}

// optional bool pool = 32 [default = false];
inline bool MilTrackParameter::has_pool() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MilTrackParameter::set_has_pool() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MilTrackParameter::clear_has_pool() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MilTrackParameter::clear_pool() {
  pool_ = false;
  clear_has_pool();
}
inline bool MilTrackParameter::pool() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.pool)
  return pool_;
}
inline void MilTrackParameter::set_pool(bool value) {
  set_has_pool();
  pool_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.pool)
}

// optional bool sync = 33 [default = false];
inline bool MilTrackParameter::has_sync() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void MilTrackParameter::set_has_sync() {
  _has_bits_[0] |= 0x00400000u;
}
inline void MilTrackParameter::clear_has_sync() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void MilTrackParameter::clear_sync() {
  sync_ = false;
  clear_has_sync();
}
inline bool MilTrackParameter::sync() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.sync)
  return sync_;
}
inline void MilTrackParameter::set_sync(bool value) {
  set_has_sync();
  sync_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.sync)
}

// optional bool mixfeat = 34 [default = false];
inline bool MilTrackParameter::has_mixfeat() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void MilTrackParameter::set_has_mixfeat() {
  _has_bits_[0] |= 0x00800000u;
}
inline void MilTrackParameter::clear_has_mixfeat() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void MilTrackParameter::clear_mixfeat() {
  mixfeat_ = false;
  clear_has_mixfeat();
}
inline bool MilTrackParameter::mixfeat() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.mixfeat)
  return mixfeat_;
}
inline void MilTrackParameter::set_mixfeat(bool value) {
  set_has_mixfeat();
  mixfeat_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.mixfeat)
}

// optional bool showprob = 35 [default = false];
inline bool MilTrackParameter::has_showprob() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void MilTrackParameter::set_has_showprob() {
  _has_bits_[0] |= 0x01000000u;
}
inline void MilTrackParameter::clear_has_showprob() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void MilTrackParameter::clear_showprob() {
  showprob_ = false;
  clear_has_showprob();
}
inline bool MilTrackParameter::showprob() const {
  // @@protoc_insertion_point(field_get:svaf.MilTrackParameter.showprob)
  return showprob_;
}
inline void MilTrackParameter::set_showprob(bool value) {
  set_has_showprob();
  showprob_ = value;
  // @@protoc_insertion_point(field_set:svaf.MilTrackParameter.showprob)
}

// -------------------------------------------------------------------

// FeaturePointParameter

// -------------------------------------------------------------------

// SIFTPointParameter

// -------------------------------------------------------------------

// SURFPointParameter

// optional int32 stride = 1 [default = 2];
inline bool SURFPointParameter::has_stride() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SURFPointParameter::set_has_stride() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SURFPointParameter::clear_has_stride() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SURFPointParameter::clear_stride() {
  stride_ = 2;
  clear_has_stride();
}
inline ::google::protobuf::int32 SURFPointParameter::stride() const {
  // @@protoc_insertion_point(field_get:svaf.SURFPointParameter.stride)
  return stride_;
}
inline void SURFPointParameter::set_stride(::google::protobuf::int32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:svaf.SURFPointParameter.stride)
}

// optional int32 octaves = 2 [default = 5];
inline bool SURFPointParameter::has_octaves() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SURFPointParameter::set_has_octaves() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SURFPointParameter::clear_has_octaves() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SURFPointParameter::clear_octaves() {
  octaves_ = 5;
  clear_has_octaves();
}
inline ::google::protobuf::int32 SURFPointParameter::octaves() const {
  // @@protoc_insertion_point(field_get:svaf.SURFPointParameter.octaves)
  return octaves_;
}
inline void SURFPointParameter::set_octaves(::google::protobuf::int32 value) {
  set_has_octaves();
  octaves_ = value;
  // @@protoc_insertion_point(field_set:svaf.SURFPointParameter.octaves)
}

// optional int32 intervals = 3 [default = 4];
inline bool SURFPointParameter::has_intervals() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SURFPointParameter::set_has_intervals() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SURFPointParameter::clear_has_intervals() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SURFPointParameter::clear_intervals() {
  intervals_ = 4;
  clear_has_intervals();
}
inline ::google::protobuf::int32 SURFPointParameter::intervals() const {
  // @@protoc_insertion_point(field_get:svaf.SURFPointParameter.intervals)
  return intervals_;
}
inline void SURFPointParameter::set_intervals(::google::protobuf::int32 value) {
  set_has_intervals();
  intervals_ = value;
  // @@protoc_insertion_point(field_set:svaf.SURFPointParameter.intervals)
}

// optional float thresh = 4 [default = 0.0004];
inline bool SURFPointParameter::has_thresh() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SURFPointParameter::set_has_thresh() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SURFPointParameter::clear_has_thresh() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SURFPointParameter::clear_thresh() {
  thresh_ = 0.0004f;
  clear_has_thresh();
}
inline float SURFPointParameter::thresh() const {
  // @@protoc_insertion_point(field_get:svaf.SURFPointParameter.thresh)
  return thresh_;
}
inline void SURFPointParameter::set_thresh(float value) {
  set_has_thresh();
  thresh_ = value;
  // @@protoc_insertion_point(field_set:svaf.SURFPointParameter.thresh)
}

// -------------------------------------------------------------------

// STARPointParameter

// -------------------------------------------------------------------

// BRISKPointParameter

// -------------------------------------------------------------------

// FASTPointParameter

// optional int32 thresh = 1 [default = 40];
inline bool FASTPointParameter::has_thresh() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FASTPointParameter::set_has_thresh() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FASTPointParameter::clear_has_thresh() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FASTPointParameter::clear_thresh() {
  thresh_ = 40;
  clear_has_thresh();
}
inline ::google::protobuf::int32 FASTPointParameter::thresh() const {
  // @@protoc_insertion_point(field_get:svaf.FASTPointParameter.thresh)
  return thresh_;
}
inline void FASTPointParameter::set_thresh(::google::protobuf::int32 value) {
  set_has_thresh();
  thresh_ = value;
  // @@protoc_insertion_point(field_set:svaf.FASTPointParameter.thresh)
}

// optional bool nms = 2 [default = true];
inline bool FASTPointParameter::has_nms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FASTPointParameter::set_has_nms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FASTPointParameter::clear_has_nms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FASTPointParameter::clear_nms() {
  nms_ = true;
  clear_has_nms();
}
inline bool FASTPointParameter::nms() const {
  // @@protoc_insertion_point(field_get:svaf.FASTPointParameter.nms)
  return nms_;
}
inline void FASTPointParameter::set_nms(bool value) {
  set_has_nms();
  nms_ = value;
  // @@protoc_insertion_point(field_set:svaf.FASTPointParameter.nms)
}

// -------------------------------------------------------------------

// ORBPointParameter

// -------------------------------------------------------------------

// KAZEPointParameter

// -------------------------------------------------------------------

// HarrisPointParameter

// -------------------------------------------------------------------

// FastParamCP

// optional int32 thresh = 1 [default = 40];
inline bool FastParamCP::has_thresh() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FastParamCP::set_has_thresh() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FastParamCP::clear_has_thresh() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FastParamCP::clear_thresh() {
  thresh_ = 40;
  clear_has_thresh();
}
inline ::google::protobuf::int32 FastParamCP::thresh() const {
  // @@protoc_insertion_point(field_get:svaf.FastParamCP.thresh)
  return thresh_;
}
inline void FastParamCP::set_thresh(::google::protobuf::int32 value) {
  set_has_thresh();
  thresh_ = value;
  // @@protoc_insertion_point(field_set:svaf.FastParamCP.thresh)
}

// optional bool isnms = 2 [default = true];
inline bool FastParamCP::has_isnms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FastParamCP::set_has_isnms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FastParamCP::clear_has_isnms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FastParamCP::clear_isnms() {
  isnms_ = true;
  clear_has_isnms();
}
inline bool FastParamCP::isnms() const {
  // @@protoc_insertion_point(field_get:svaf.FastParamCP.isnms)
  return isnms_;
}
inline void FastParamCP::set_isnms(bool value) {
  set_has_isnms();
  isnms_ = value;
  // @@protoc_insertion_point(field_set:svaf.FastParamCP.isnms)
}

// optional .svaf.FastParamCP.FastType ftype = 3 [default = T_9_16];
inline bool FastParamCP::has_ftype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FastParamCP::set_has_ftype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FastParamCP::clear_has_ftype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FastParamCP::clear_ftype() {
  ftype_ = 1;
  clear_has_ftype();
}
inline ::svaf::FastParamCP_FastType FastParamCP::ftype() const {
  // @@protoc_insertion_point(field_get:svaf.FastParamCP.ftype)
  return static_cast< ::svaf::FastParamCP_FastType >(ftype_);
}
inline void FastParamCP::set_ftype(::svaf::FastParamCP_FastType value) {
  assert(::svaf::FastParamCP_FastType_IsValid(value));
  set_has_ftype();
  ftype_ = value;
  // @@protoc_insertion_point(field_set:svaf.FastParamCP.ftype)
}

// -------------------------------------------------------------------

// MSERParamCP

// optional int32 delta = 1 [default = 5];
inline bool MSERParamCP::has_delta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSERParamCP::set_has_delta() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSERParamCP::clear_has_delta() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSERParamCP::clear_delta() {
  delta_ = 5;
  clear_has_delta();
}
inline ::google::protobuf::int32 MSERParamCP::delta() const {
  // @@protoc_insertion_point(field_get:svaf.MSERParamCP.delta)
  return delta_;
}
inline void MSERParamCP::set_delta(::google::protobuf::int32 value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:svaf.MSERParamCP.delta)
}

// optional int32 min_area = 2 [default = 60];
inline bool MSERParamCP::has_min_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MSERParamCP::set_has_min_area() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MSERParamCP::clear_has_min_area() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MSERParamCP::clear_min_area() {
  min_area_ = 60;
  clear_has_min_area();
}
inline ::google::protobuf::int32 MSERParamCP::min_area() const {
  // @@protoc_insertion_point(field_get:svaf.MSERParamCP.min_area)
  return min_area_;
}
inline void MSERParamCP::set_min_area(::google::protobuf::int32 value) {
  set_has_min_area();
  min_area_ = value;
  // @@protoc_insertion_point(field_set:svaf.MSERParamCP.min_area)
}

// optional int32 max_area = 3 [default = 14400];
inline bool MSERParamCP::has_max_area() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MSERParamCP::set_has_max_area() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MSERParamCP::clear_has_max_area() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MSERParamCP::clear_max_area() {
  max_area_ = 14400;
  clear_has_max_area();
}
inline ::google::protobuf::int32 MSERParamCP::max_area() const {
  // @@protoc_insertion_point(field_get:svaf.MSERParamCP.max_area)
  return max_area_;
}
inline void MSERParamCP::set_max_area(::google::protobuf::int32 value) {
  set_has_max_area();
  max_area_ = value;
  // @@protoc_insertion_point(field_set:svaf.MSERParamCP.max_area)
}

// optional float max_varia = 4 [default = 0.25];
inline bool MSERParamCP::has_max_varia() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MSERParamCP::set_has_max_varia() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MSERParamCP::clear_has_max_varia() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MSERParamCP::clear_max_varia() {
  max_varia_ = 0.25f;
  clear_has_max_varia();
}
inline float MSERParamCP::max_varia() const {
  // @@protoc_insertion_point(field_get:svaf.MSERParamCP.max_varia)
  return max_varia_;
}
inline void MSERParamCP::set_max_varia(float value) {
  set_has_max_varia();
  max_varia_ = value;
  // @@protoc_insertion_point(field_set:svaf.MSERParamCP.max_varia)
}

// optional float min_divers = 5 [default = 0.2];
inline bool MSERParamCP::has_min_divers() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MSERParamCP::set_has_min_divers() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MSERParamCP::clear_has_min_divers() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MSERParamCP::clear_min_divers() {
  min_divers_ = 0.2f;
  clear_has_min_divers();
}
inline float MSERParamCP::min_divers() const {
  // @@protoc_insertion_point(field_get:svaf.MSERParamCP.min_divers)
  return min_divers_;
}
inline void MSERParamCP::set_min_divers(float value) {
  set_has_min_divers();
  min_divers_ = value;
  // @@protoc_insertion_point(field_set:svaf.MSERParamCP.min_divers)
}

// optional int32 max_evolution = 6 [default = 200];
inline bool MSERParamCP::has_max_evolution() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MSERParamCP::set_has_max_evolution() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MSERParamCP::clear_has_max_evolution() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MSERParamCP::clear_max_evolution() {
  max_evolution_ = 200;
  clear_has_max_evolution();
}
inline ::google::protobuf::int32 MSERParamCP::max_evolution() const {
  // @@protoc_insertion_point(field_get:svaf.MSERParamCP.max_evolution)
  return max_evolution_;
}
inline void MSERParamCP::set_max_evolution(::google::protobuf::int32 value) {
  set_has_max_evolution();
  max_evolution_ = value;
  // @@protoc_insertion_point(field_set:svaf.MSERParamCP.max_evolution)
}

// optional float area_thresh = 7 [default = 1.01];
inline bool MSERParamCP::has_area_thresh() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MSERParamCP::set_has_area_thresh() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MSERParamCP::clear_has_area_thresh() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MSERParamCP::clear_area_thresh() {
  area_thresh_ = 1.01f;
  clear_has_area_thresh();
}
inline float MSERParamCP::area_thresh() const {
  // @@protoc_insertion_point(field_get:svaf.MSERParamCP.area_thresh)
  return area_thresh_;
}
inline void MSERParamCP::set_area_thresh(float value) {
  set_has_area_thresh();
  area_thresh_ = value;
  // @@protoc_insertion_point(field_set:svaf.MSERParamCP.area_thresh)
}

// optional float min_margin = 8 [default = 0.003];
inline bool MSERParamCP::has_min_margin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MSERParamCP::set_has_min_margin() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MSERParamCP::clear_has_min_margin() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MSERParamCP::clear_min_margin() {
  min_margin_ = 0.003f;
  clear_has_min_margin();
}
inline float MSERParamCP::min_margin() const {
  // @@protoc_insertion_point(field_get:svaf.MSERParamCP.min_margin)
  return min_margin_;
}
inline void MSERParamCP::set_min_margin(float value) {
  set_has_min_margin();
  min_margin_ = value;
  // @@protoc_insertion_point(field_set:svaf.MSERParamCP.min_margin)
}

// optional int32 edgeblur_size = 9 [default = 5];
inline bool MSERParamCP::has_edgeblur_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MSERParamCP::set_has_edgeblur_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MSERParamCP::clear_has_edgeblur_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MSERParamCP::clear_edgeblur_size() {
  edgeblur_size_ = 5;
  clear_has_edgeblur_size();
}
inline ::google::protobuf::int32 MSERParamCP::edgeblur_size() const {
  // @@protoc_insertion_point(field_get:svaf.MSERParamCP.edgeblur_size)
  return edgeblur_size_;
}
inline void MSERParamCP::set_edgeblur_size(::google::protobuf::int32 value) {
  set_has_edgeblur_size();
  edgeblur_size_ = value;
  // @@protoc_insertion_point(field_set:svaf.MSERParamCP.edgeblur_size)
}

// -------------------------------------------------------------------

// ORBParamCP

// optional int32 nfeatures = 1 [default = 500];
inline bool ORBParamCP::has_nfeatures() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ORBParamCP::set_has_nfeatures() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ORBParamCP::clear_has_nfeatures() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ORBParamCP::clear_nfeatures() {
  nfeatures_ = 500;
  clear_has_nfeatures();
}
inline ::google::protobuf::int32 ORBParamCP::nfeatures() const {
  // @@protoc_insertion_point(field_get:svaf.ORBParamCP.nfeatures)
  return nfeatures_;
}
inline void ORBParamCP::set_nfeatures(::google::protobuf::int32 value) {
  set_has_nfeatures();
  nfeatures_ = value;
  // @@protoc_insertion_point(field_set:svaf.ORBParamCP.nfeatures)
}

// optional float scalefactor = 2 [default = 1.2];
inline bool ORBParamCP::has_scalefactor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ORBParamCP::set_has_scalefactor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ORBParamCP::clear_has_scalefactor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ORBParamCP::clear_scalefactor() {
  scalefactor_ = 1.2f;
  clear_has_scalefactor();
}
inline float ORBParamCP::scalefactor() const {
  // @@protoc_insertion_point(field_get:svaf.ORBParamCP.scalefactor)
  return scalefactor_;
}
inline void ORBParamCP::set_scalefactor(float value) {
  set_has_scalefactor();
  scalefactor_ = value;
  // @@protoc_insertion_point(field_set:svaf.ORBParamCP.scalefactor)
}

// optional int32 nlevels = 3 [default = 8];
inline bool ORBParamCP::has_nlevels() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ORBParamCP::set_has_nlevels() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ORBParamCP::clear_has_nlevels() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ORBParamCP::clear_nlevels() {
  nlevels_ = 8;
  clear_has_nlevels();
}
inline ::google::protobuf::int32 ORBParamCP::nlevels() const {
  // @@protoc_insertion_point(field_get:svaf.ORBParamCP.nlevels)
  return nlevels_;
}
inline void ORBParamCP::set_nlevels(::google::protobuf::int32 value) {
  set_has_nlevels();
  nlevels_ = value;
  // @@protoc_insertion_point(field_set:svaf.ORBParamCP.nlevels)
}

// optional int32 edgethresh = 4 [default = 31];
inline bool ORBParamCP::has_edgethresh() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ORBParamCP::set_has_edgethresh() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ORBParamCP::clear_has_edgethresh() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ORBParamCP::clear_edgethresh() {
  edgethresh_ = 31;
  clear_has_edgethresh();
}
inline ::google::protobuf::int32 ORBParamCP::edgethresh() const {
  // @@protoc_insertion_point(field_get:svaf.ORBParamCP.edgethresh)
  return edgethresh_;
}
inline void ORBParamCP::set_edgethresh(::google::protobuf::int32 value) {
  set_has_edgethresh();
  edgethresh_ = value;
  // @@protoc_insertion_point(field_set:svaf.ORBParamCP.edgethresh)
}

// optional int32 firstlevel = 5 [default = 0];
inline bool ORBParamCP::has_firstlevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ORBParamCP::set_has_firstlevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ORBParamCP::clear_has_firstlevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ORBParamCP::clear_firstlevel() {
  firstlevel_ = 0;
  clear_has_firstlevel();
}
inline ::google::protobuf::int32 ORBParamCP::firstlevel() const {
  // @@protoc_insertion_point(field_get:svaf.ORBParamCP.firstlevel)
  return firstlevel_;
}
inline void ORBParamCP::set_firstlevel(::google::protobuf::int32 value) {
  set_has_firstlevel();
  firstlevel_ = value;
  // @@protoc_insertion_point(field_set:svaf.ORBParamCP.firstlevel)
}

// optional int32 wta_k = 6 [default = 2];
inline bool ORBParamCP::has_wta_k() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ORBParamCP::set_has_wta_k() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ORBParamCP::clear_has_wta_k() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ORBParamCP::clear_wta_k() {
  wta_k_ = 2;
  clear_has_wta_k();
}
inline ::google::protobuf::int32 ORBParamCP::wta_k() const {
  // @@protoc_insertion_point(field_get:svaf.ORBParamCP.wta_k)
  return wta_k_;
}
inline void ORBParamCP::set_wta_k(::google::protobuf::int32 value) {
  set_has_wta_k();
  wta_k_ = value;
  // @@protoc_insertion_point(field_set:svaf.ORBParamCP.wta_k)
}

// optional .svaf.ORBParamCP.OBRScoreType scoretype = 7 [default = HARRIS_SCORE];
inline bool ORBParamCP::has_scoretype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ORBParamCP::set_has_scoretype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ORBParamCP::clear_has_scoretype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ORBParamCP::clear_scoretype() {
  scoretype_ = 1;
  clear_has_scoretype();
}
inline ::svaf::ORBParamCP_OBRScoreType ORBParamCP::scoretype() const {
  // @@protoc_insertion_point(field_get:svaf.ORBParamCP.scoretype)
  return static_cast< ::svaf::ORBParamCP_OBRScoreType >(scoretype_);
}
inline void ORBParamCP::set_scoretype(::svaf::ORBParamCP_OBRScoreType value) {
  assert(::svaf::ORBParamCP_OBRScoreType_IsValid(value));
  set_has_scoretype();
  scoretype_ = value;
  // @@protoc_insertion_point(field_set:svaf.ORBParamCP.scoretype)
}

// optional int32 patchsize = 8 [default = 31];
inline bool ORBParamCP::has_patchsize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ORBParamCP::set_has_patchsize() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ORBParamCP::clear_has_patchsize() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ORBParamCP::clear_patchsize() {
  patchsize_ = 31;
  clear_has_patchsize();
}
inline ::google::protobuf::int32 ORBParamCP::patchsize() const {
  // @@protoc_insertion_point(field_get:svaf.ORBParamCP.patchsize)
  return patchsize_;
}
inline void ORBParamCP::set_patchsize(::google::protobuf::int32 value) {
  set_has_patchsize();
  patchsize_ = value;
  // @@protoc_insertion_point(field_set:svaf.ORBParamCP.patchsize)
}

// -------------------------------------------------------------------

// BriskParamCP

// optional int32 thresh = 1 [default = 30];
inline bool BriskParamCP::has_thresh() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BriskParamCP::set_has_thresh() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BriskParamCP::clear_has_thresh() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BriskParamCP::clear_thresh() {
  thresh_ = 30;
  clear_has_thresh();
}
inline ::google::protobuf::int32 BriskParamCP::thresh() const {
  // @@protoc_insertion_point(field_get:svaf.BriskParamCP.thresh)
  return thresh_;
}
inline void BriskParamCP::set_thresh(::google::protobuf::int32 value) {
  set_has_thresh();
  thresh_ = value;
  // @@protoc_insertion_point(field_set:svaf.BriskParamCP.thresh)
}

// optional int32 octaves = 2 [default = 3];
inline bool BriskParamCP::has_octaves() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BriskParamCP::set_has_octaves() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BriskParamCP::clear_has_octaves() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BriskParamCP::clear_octaves() {
  octaves_ = 3;
  clear_has_octaves();
}
inline ::google::protobuf::int32 BriskParamCP::octaves() const {
  // @@protoc_insertion_point(field_get:svaf.BriskParamCP.octaves)
  return octaves_;
}
inline void BriskParamCP::set_octaves(::google::protobuf::int32 value) {
  set_has_octaves();
  octaves_ = value;
  // @@protoc_insertion_point(field_set:svaf.BriskParamCP.octaves)
}

// optional float ptscale = 3 [default = 1];
inline bool BriskParamCP::has_ptscale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BriskParamCP::set_has_ptscale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BriskParamCP::clear_has_ptscale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BriskParamCP::clear_ptscale() {
  ptscale_ = 1;
  clear_has_ptscale();
}
inline float BriskParamCP::ptscale() const {
  // @@protoc_insertion_point(field_get:svaf.BriskParamCP.ptscale)
  return ptscale_;
}
inline void BriskParamCP::set_ptscale(float value) {
  set_has_ptscale();
  ptscale_ = value;
  // @@protoc_insertion_point(field_set:svaf.BriskParamCP.ptscale)
}

// -------------------------------------------------------------------

// FreakParamCP

// optional bool orientnorm = 1 [default = true];
inline bool FreakParamCP::has_orientnorm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FreakParamCP::set_has_orientnorm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FreakParamCP::clear_has_orientnorm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FreakParamCP::clear_orientnorm() {
  orientnorm_ = true;
  clear_has_orientnorm();
}
inline bool FreakParamCP::orientnorm() const {
  // @@protoc_insertion_point(field_get:svaf.FreakParamCP.orientnorm)
  return orientnorm_;
}
inline void FreakParamCP::set_orientnorm(bool value) {
  set_has_orientnorm();
  orientnorm_ = value;
  // @@protoc_insertion_point(field_set:svaf.FreakParamCP.orientnorm)
}

// optional bool scalenorm = 2 [default = true];
inline bool FreakParamCP::has_scalenorm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FreakParamCP::set_has_scalenorm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FreakParamCP::clear_has_scalenorm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FreakParamCP::clear_scalenorm() {
  scalenorm_ = true;
  clear_has_scalenorm();
}
inline bool FreakParamCP::scalenorm() const {
  // @@protoc_insertion_point(field_get:svaf.FreakParamCP.scalenorm)
  return scalenorm_;
}
inline void FreakParamCP::set_scalenorm(bool value) {
  set_has_scalenorm();
  scalenorm_ = value;
  // @@protoc_insertion_point(field_set:svaf.FreakParamCP.scalenorm)
}

// optional float ptscale = 3 [default = 22];
inline bool FreakParamCP::has_ptscale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FreakParamCP::set_has_ptscale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FreakParamCP::clear_has_ptscale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FreakParamCP::clear_ptscale() {
  ptscale_ = 22;
  clear_has_ptscale();
}
inline float FreakParamCP::ptscale() const {
  // @@protoc_insertion_point(field_get:svaf.FreakParamCP.ptscale)
  return ptscale_;
}
inline void FreakParamCP::set_ptscale(float value) {
  set_has_ptscale();
  ptscale_ = value;
  // @@protoc_insertion_point(field_set:svaf.FreakParamCP.ptscale)
}

// optional int32 octaves = 4 [default = 4];
inline bool FreakParamCP::has_octaves() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FreakParamCP::set_has_octaves() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FreakParamCP::clear_has_octaves() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FreakParamCP::clear_octaves() {
  octaves_ = 4;
  clear_has_octaves();
}
inline ::google::protobuf::int32 FreakParamCP::octaves() const {
  // @@protoc_insertion_point(field_get:svaf.FreakParamCP.octaves)
  return octaves_;
}
inline void FreakParamCP::set_octaves(::google::protobuf::int32 value) {
  set_has_octaves();
  octaves_ = value;
  // @@protoc_insertion_point(field_set:svaf.FreakParamCP.octaves)
}

// -------------------------------------------------------------------

// StarParamCP

// optional int32 maxsize = 1 [default = 16];
inline bool StarParamCP::has_maxsize() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StarParamCP::set_has_maxsize() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StarParamCP::clear_has_maxsize() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StarParamCP::clear_maxsize() {
  maxsize_ = 16;
  clear_has_maxsize();
}
inline ::google::protobuf::int32 StarParamCP::maxsize() const {
  // @@protoc_insertion_point(field_get:svaf.StarParamCP.maxsize)
  return maxsize_;
}
inline void StarParamCP::set_maxsize(::google::protobuf::int32 value) {
  set_has_maxsize();
  maxsize_ = value;
  // @@protoc_insertion_point(field_set:svaf.StarParamCP.maxsize)
}

// optional int32 response_thresh = 2 [default = 30];
inline bool StarParamCP::has_response_thresh() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StarParamCP::set_has_response_thresh() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StarParamCP::clear_has_response_thresh() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StarParamCP::clear_response_thresh() {
  response_thresh_ = 30;
  clear_has_response_thresh();
}
inline ::google::protobuf::int32 StarParamCP::response_thresh() const {
  // @@protoc_insertion_point(field_get:svaf.StarParamCP.response_thresh)
  return response_thresh_;
}
inline void StarParamCP::set_response_thresh(::google::protobuf::int32 value) {
  set_has_response_thresh();
  response_thresh_ = value;
  // @@protoc_insertion_point(field_set:svaf.StarParamCP.response_thresh)
}

// optional int32 projected_thresh = 3 [default = 10];
inline bool StarParamCP::has_projected_thresh() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StarParamCP::set_has_projected_thresh() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StarParamCP::clear_has_projected_thresh() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StarParamCP::clear_projected_thresh() {
  projected_thresh_ = 10;
  clear_has_projected_thresh();
}
inline ::google::protobuf::int32 StarParamCP::projected_thresh() const {
  // @@protoc_insertion_point(field_get:svaf.StarParamCP.projected_thresh)
  return projected_thresh_;
}
inline void StarParamCP::set_projected_thresh(::google::protobuf::int32 value) {
  set_has_projected_thresh();
  projected_thresh_ = value;
  // @@protoc_insertion_point(field_set:svaf.StarParamCP.projected_thresh)
}

// optional int32 binarized_thresh = 4 [default = 8];
inline bool StarParamCP::has_binarized_thresh() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StarParamCP::set_has_binarized_thresh() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StarParamCP::clear_has_binarized_thresh() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StarParamCP::clear_binarized_thresh() {
  binarized_thresh_ = 8;
  clear_has_binarized_thresh();
}
inline ::google::protobuf::int32 StarParamCP::binarized_thresh() const {
  // @@protoc_insertion_point(field_get:svaf.StarParamCP.binarized_thresh)
  return binarized_thresh_;
}
inline void StarParamCP::set_binarized_thresh(::google::protobuf::int32 value) {
  set_has_binarized_thresh();
  binarized_thresh_ = value;
  // @@protoc_insertion_point(field_set:svaf.StarParamCP.binarized_thresh)
}

// optional int32 nms_size = 5 [default = 5];
inline bool StarParamCP::has_nms_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StarParamCP::set_has_nms_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StarParamCP::clear_has_nms_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StarParamCP::clear_nms_size() {
  nms_size_ = 5;
  clear_has_nms_size();
}
inline ::google::protobuf::int32 StarParamCP::nms_size() const {
  // @@protoc_insertion_point(field_get:svaf.StarParamCP.nms_size)
  return nms_size_;
}
inline void StarParamCP::set_nms_size(::google::protobuf::int32 value) {
  set_has_nms_size();
  nms_size_ = value;
  // @@protoc_insertion_point(field_set:svaf.StarParamCP.nms_size)
}

// -------------------------------------------------------------------

// SiftParamCP

// optional int32 nfeatures = 1 [default = 0];
inline bool SiftParamCP::has_nfeatures() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiftParamCP::set_has_nfeatures() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SiftParamCP::clear_has_nfeatures() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SiftParamCP::clear_nfeatures() {
  nfeatures_ = 0;
  clear_has_nfeatures();
}
inline ::google::protobuf::int32 SiftParamCP::nfeatures() const {
  // @@protoc_insertion_point(field_get:svaf.SiftParamCP.nfeatures)
  return nfeatures_;
}
inline void SiftParamCP::set_nfeatures(::google::protobuf::int32 value) {
  set_has_nfeatures();
  nfeatures_ = value;
  // @@protoc_insertion_point(field_set:svaf.SiftParamCP.nfeatures)
}

// optional int32 octaves = 2 [default = 3];
inline bool SiftParamCP::has_octaves() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SiftParamCP::set_has_octaves() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SiftParamCP::clear_has_octaves() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SiftParamCP::clear_octaves() {
  octaves_ = 3;
  clear_has_octaves();
}
inline ::google::protobuf::int32 SiftParamCP::octaves() const {
  // @@protoc_insertion_point(field_get:svaf.SiftParamCP.octaves)
  return octaves_;
}
inline void SiftParamCP::set_octaves(::google::protobuf::int32 value) {
  set_has_octaves();
  octaves_ = value;
  // @@protoc_insertion_point(field_set:svaf.SiftParamCP.octaves)
}

// optional float contrast_thresh = 3 [default = 0.04];
inline bool SiftParamCP::has_contrast_thresh() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SiftParamCP::set_has_contrast_thresh() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SiftParamCP::clear_has_contrast_thresh() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SiftParamCP::clear_contrast_thresh() {
  contrast_thresh_ = 0.04f;
  clear_has_contrast_thresh();
}
inline float SiftParamCP::contrast_thresh() const {
  // @@protoc_insertion_point(field_get:svaf.SiftParamCP.contrast_thresh)
  return contrast_thresh_;
}
inline void SiftParamCP::set_contrast_thresh(float value) {
  set_has_contrast_thresh();
  contrast_thresh_ = value;
  // @@protoc_insertion_point(field_set:svaf.SiftParamCP.contrast_thresh)
}

// optional float edge_thresh = 4 [default = 10];
inline bool SiftParamCP::has_edge_thresh() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SiftParamCP::set_has_edge_thresh() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SiftParamCP::clear_has_edge_thresh() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SiftParamCP::clear_edge_thresh() {
  edge_thresh_ = 10;
  clear_has_edge_thresh();
}
inline float SiftParamCP::edge_thresh() const {
  // @@protoc_insertion_point(field_get:svaf.SiftParamCP.edge_thresh)
  return edge_thresh_;
}
inline void SiftParamCP::set_edge_thresh(float value) {
  set_has_edge_thresh();
  edge_thresh_ = value;
  // @@protoc_insertion_point(field_set:svaf.SiftParamCP.edge_thresh)
}

// optional float sigma = 5 [default = 1.6];
inline bool SiftParamCP::has_sigma() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SiftParamCP::set_has_sigma() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SiftParamCP::clear_has_sigma() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SiftParamCP::clear_sigma() {
  sigma_ = 1.6f;
  clear_has_sigma();
}
inline float SiftParamCP::sigma() const {
  // @@protoc_insertion_point(field_get:svaf.SiftParamCP.sigma)
  return sigma_;
}
inline void SiftParamCP::set_sigma(float value) {
  set_has_sigma();
  sigma_ = value;
  // @@protoc_insertion_point(field_set:svaf.SiftParamCP.sigma)
}

// -------------------------------------------------------------------

// SurfParamCP

// optional float hassian_thresh = 1 [default = 0.0004];
inline bool SurfParamCP::has_hassian_thresh() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SurfParamCP::set_has_hassian_thresh() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SurfParamCP::clear_has_hassian_thresh() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SurfParamCP::clear_hassian_thresh() {
  hassian_thresh_ = 0.0004f;
  clear_has_hassian_thresh();
}
inline float SurfParamCP::hassian_thresh() const {
  // @@protoc_insertion_point(field_get:svaf.SurfParamCP.hassian_thresh)
  return hassian_thresh_;
}
inline void SurfParamCP::set_hassian_thresh(float value) {
  set_has_hassian_thresh();
  hassian_thresh_ = value;
  // @@protoc_insertion_point(field_set:svaf.SurfParamCP.hassian_thresh)
}

// optional int32 octaves = 2 [default = 4];
inline bool SurfParamCP::has_octaves() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SurfParamCP::set_has_octaves() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SurfParamCP::clear_has_octaves() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SurfParamCP::clear_octaves() {
  octaves_ = 4;
  clear_has_octaves();
}
inline ::google::protobuf::int32 SurfParamCP::octaves() const {
  // @@protoc_insertion_point(field_get:svaf.SurfParamCP.octaves)
  return octaves_;
}
inline void SurfParamCP::set_octaves(::google::protobuf::int32 value) {
  set_has_octaves();
  octaves_ = value;
  // @@protoc_insertion_point(field_set:svaf.SurfParamCP.octaves)
}

// optional int32 intevals = 3 [default = 2];
inline bool SurfParamCP::has_intevals() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SurfParamCP::set_has_intevals() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SurfParamCP::clear_has_intevals() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SurfParamCP::clear_intevals() {
  intevals_ = 2;
  clear_has_intevals();
}
inline ::google::protobuf::int32 SurfParamCP::intevals() const {
  // @@protoc_insertion_point(field_get:svaf.SurfParamCP.intevals)
  return intevals_;
}
inline void SurfParamCP::set_intevals(::google::protobuf::int32 value) {
  set_has_intevals();
  intevals_ = value;
  // @@protoc_insertion_point(field_set:svaf.SurfParamCP.intevals)
}

// optional bool extended = 4 [default = false];
inline bool SurfParamCP::has_extended() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SurfParamCP::set_has_extended() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SurfParamCP::clear_has_extended() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SurfParamCP::clear_extended() {
  extended_ = false;
  clear_has_extended();
}
inline bool SurfParamCP::extended() const {
  // @@protoc_insertion_point(field_get:svaf.SurfParamCP.extended)
  return extended_;
}
inline void SurfParamCP::set_extended(bool value) {
  set_has_extended();
  extended_ = value;
  // @@protoc_insertion_point(field_set:svaf.SurfParamCP.extended)
}

// optional bool upright = 5 [default = false];
inline bool SurfParamCP::has_upright() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SurfParamCP::set_has_upright() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SurfParamCP::clear_has_upright() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SurfParamCP::clear_upright() {
  upright_ = false;
  clear_has_upright();
}
inline bool SurfParamCP::upright() const {
  // @@protoc_insertion_point(field_get:svaf.SurfParamCP.upright)
  return upright_;
}
inline void SurfParamCP::set_upright(bool value) {
  set_has_upright();
  upright_ = value;
  // @@protoc_insertion_point(field_set:svaf.SurfParamCP.upright)
}

// -------------------------------------------------------------------

// GFTTParamCP

// optional int32 maxcornners = 1 [default = 1000];
inline bool GFTTParamCP::has_maxcornners() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GFTTParamCP::set_has_maxcornners() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GFTTParamCP::clear_has_maxcornners() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GFTTParamCP::clear_maxcornners() {
  maxcornners_ = 1000;
  clear_has_maxcornners();
}
inline ::google::protobuf::int32 GFTTParamCP::maxcornners() const {
  // @@protoc_insertion_point(field_get:svaf.GFTTParamCP.maxcornners)
  return maxcornners_;
}
inline void GFTTParamCP::set_maxcornners(::google::protobuf::int32 value) {
  set_has_maxcornners();
  maxcornners_ = value;
  // @@protoc_insertion_point(field_set:svaf.GFTTParamCP.maxcornners)
}

// optional float quality = 2 [default = 0.01];
inline bool GFTTParamCP::has_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GFTTParamCP::set_has_quality() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GFTTParamCP::clear_has_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GFTTParamCP::clear_quality() {
  quality_ = 0.01f;
  clear_has_quality();
}
inline float GFTTParamCP::quality() const {
  // @@protoc_insertion_point(field_get:svaf.GFTTParamCP.quality)
  return quality_;
}
inline void GFTTParamCP::set_quality(float value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:svaf.GFTTParamCP.quality)
}

// optional float mindist = 3 [default = 1];
inline bool GFTTParamCP::has_mindist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GFTTParamCP::set_has_mindist() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GFTTParamCP::clear_has_mindist() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GFTTParamCP::clear_mindist() {
  mindist_ = 1;
  clear_has_mindist();
}
inline float GFTTParamCP::mindist() const {
  // @@protoc_insertion_point(field_get:svaf.GFTTParamCP.mindist)
  return mindist_;
}
inline void GFTTParamCP::set_mindist(float value) {
  set_has_mindist();
  mindist_ = value;
  // @@protoc_insertion_point(field_set:svaf.GFTTParamCP.mindist)
}

// optional int32 blocksize = 4 [default = 3];
inline bool GFTTParamCP::has_blocksize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GFTTParamCP::set_has_blocksize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GFTTParamCP::clear_has_blocksize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GFTTParamCP::clear_blocksize() {
  blocksize_ = 3;
  clear_has_blocksize();
}
inline ::google::protobuf::int32 GFTTParamCP::blocksize() const {
  // @@protoc_insertion_point(field_get:svaf.GFTTParamCP.blocksize)
  return blocksize_;
}
inline void GFTTParamCP::set_blocksize(::google::protobuf::int32 value) {
  set_has_blocksize();
  blocksize_ = value;
  // @@protoc_insertion_point(field_set:svaf.GFTTParamCP.blocksize)
}

// optional bool useharris = 5 [default = false];
inline bool GFTTParamCP::has_useharris() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GFTTParamCP::set_has_useharris() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GFTTParamCP::clear_has_useharris() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GFTTParamCP::clear_useharris() {
  useharris_ = false;
  clear_has_useharris();
}
inline bool GFTTParamCP::useharris() const {
  // @@protoc_insertion_point(field_get:svaf.GFTTParamCP.useharris)
  return useharris_;
}
inline void GFTTParamCP::set_useharris(bool value) {
  set_has_useharris();
  useharris_ = value;
  // @@protoc_insertion_point(field_set:svaf.GFTTParamCP.useharris)
}

// optional float k = 6 [default = 0.04];
inline bool GFTTParamCP::has_k() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GFTTParamCP::set_has_k() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GFTTParamCP::clear_has_k() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GFTTParamCP::clear_k() {
  k_ = 0.04f;
  clear_has_k();
}
inline float GFTTParamCP::k() const {
  // @@protoc_insertion_point(field_get:svaf.GFTTParamCP.k)
  return k_;
}
inline void GFTTParamCP::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:svaf.GFTTParamCP.k)
}

// -------------------------------------------------------------------

// HarrisParamCP

// optional int32 maxcornners = 1 [default = 1000];
inline bool HarrisParamCP::has_maxcornners() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HarrisParamCP::set_has_maxcornners() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HarrisParamCP::clear_has_maxcornners() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HarrisParamCP::clear_maxcornners() {
  maxcornners_ = 1000;
  clear_has_maxcornners();
}
inline ::google::protobuf::int32 HarrisParamCP::maxcornners() const {
  // @@protoc_insertion_point(field_get:svaf.HarrisParamCP.maxcornners)
  return maxcornners_;
}
inline void HarrisParamCP::set_maxcornners(::google::protobuf::int32 value) {
  set_has_maxcornners();
  maxcornners_ = value;
  // @@protoc_insertion_point(field_set:svaf.HarrisParamCP.maxcornners)
}

// optional float quality = 2 [default = 0.01];
inline bool HarrisParamCP::has_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HarrisParamCP::set_has_quality() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HarrisParamCP::clear_has_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HarrisParamCP::clear_quality() {
  quality_ = 0.01f;
  clear_has_quality();
}
inline float HarrisParamCP::quality() const {
  // @@protoc_insertion_point(field_get:svaf.HarrisParamCP.quality)
  return quality_;
}
inline void HarrisParamCP::set_quality(float value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:svaf.HarrisParamCP.quality)
}

// optional float mindist = 3 [default = 1];
inline bool HarrisParamCP::has_mindist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HarrisParamCP::set_has_mindist() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HarrisParamCP::clear_has_mindist() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HarrisParamCP::clear_mindist() {
  mindist_ = 1;
  clear_has_mindist();
}
inline float HarrisParamCP::mindist() const {
  // @@protoc_insertion_point(field_get:svaf.HarrisParamCP.mindist)
  return mindist_;
}
inline void HarrisParamCP::set_mindist(float value) {
  set_has_mindist();
  mindist_ = value;
  // @@protoc_insertion_point(field_set:svaf.HarrisParamCP.mindist)
}

// optional int32 blocksize = 4 [default = 3];
inline bool HarrisParamCP::has_blocksize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HarrisParamCP::set_has_blocksize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HarrisParamCP::clear_has_blocksize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HarrisParamCP::clear_blocksize() {
  blocksize_ = 3;
  clear_has_blocksize();
}
inline ::google::protobuf::int32 HarrisParamCP::blocksize() const {
  // @@protoc_insertion_point(field_get:svaf.HarrisParamCP.blocksize)
  return blocksize_;
}
inline void HarrisParamCP::set_blocksize(::google::protobuf::int32 value) {
  set_has_blocksize();
  blocksize_ = value;
  // @@protoc_insertion_point(field_set:svaf.HarrisParamCP.blocksize)
}

// optional float k = 6 [default = 0.04];
inline bool HarrisParamCP::has_k() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HarrisParamCP::set_has_k() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HarrisParamCP::clear_has_k() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HarrisParamCP::clear_k() {
  k_ = 0.04f;
  clear_has_k();
}
inline float HarrisParamCP::k() const {
  // @@protoc_insertion_point(field_get:svaf.HarrisParamCP.k)
  return k_;
}
inline void HarrisParamCP::set_k(float value) {
  set_has_k();
  k_ = value;
  // @@protoc_insertion_point(field_set:svaf.HarrisParamCP.k)
}

// -------------------------------------------------------------------

// DenseParamCP

// optional float initfeatscale = 1 [default = 1];
inline bool DenseParamCP::has_initfeatscale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DenseParamCP::set_has_initfeatscale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DenseParamCP::clear_has_initfeatscale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DenseParamCP::clear_initfeatscale() {
  initfeatscale_ = 1;
  clear_has_initfeatscale();
}
inline float DenseParamCP::initfeatscale() const {
  // @@protoc_insertion_point(field_get:svaf.DenseParamCP.initfeatscale)
  return initfeatscale_;
}
inline void DenseParamCP::set_initfeatscale(float value) {
  set_has_initfeatscale();
  initfeatscale_ = value;
  // @@protoc_insertion_point(field_set:svaf.DenseParamCP.initfeatscale)
}

// optional int32 featscalelevel = 2 [default = 1];
inline bool DenseParamCP::has_featscalelevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DenseParamCP::set_has_featscalelevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DenseParamCP::clear_has_featscalelevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DenseParamCP::clear_featscalelevel() {
  featscalelevel_ = 1;
  clear_has_featscalelevel();
}
inline ::google::protobuf::int32 DenseParamCP::featscalelevel() const {
  // @@protoc_insertion_point(field_get:svaf.DenseParamCP.featscalelevel)
  return featscalelevel_;
}
inline void DenseParamCP::set_featscalelevel(::google::protobuf::int32 value) {
  set_has_featscalelevel();
  featscalelevel_ = value;
  // @@protoc_insertion_point(field_set:svaf.DenseParamCP.featscalelevel)
}

// optional float featscalemul = 3 [default = 0.1];
inline bool DenseParamCP::has_featscalemul() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DenseParamCP::set_has_featscalemul() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DenseParamCP::clear_has_featscalemul() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DenseParamCP::clear_featscalemul() {
  featscalemul_ = 0.1f;
  clear_has_featscalemul();
}
inline float DenseParamCP::featscalemul() const {
  // @@protoc_insertion_point(field_get:svaf.DenseParamCP.featscalemul)
  return featscalemul_;
}
inline void DenseParamCP::set_featscalemul(float value) {
  set_has_featscalemul();
  featscalemul_ = value;
  // @@protoc_insertion_point(field_set:svaf.DenseParamCP.featscalemul)
}

// optional int32 initxystep = 4 [default = 6];
inline bool DenseParamCP::has_initxystep() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DenseParamCP::set_has_initxystep() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DenseParamCP::clear_has_initxystep() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DenseParamCP::clear_initxystep() {
  initxystep_ = 6;
  clear_has_initxystep();
}
inline ::google::protobuf::int32 DenseParamCP::initxystep() const {
  // @@protoc_insertion_point(field_get:svaf.DenseParamCP.initxystep)
  return initxystep_;
}
inline void DenseParamCP::set_initxystep(::google::protobuf::int32 value) {
  set_has_initxystep();
  initxystep_ = value;
  // @@protoc_insertion_point(field_set:svaf.DenseParamCP.initxystep)
}

// optional int32 initbound = 5 [default = 0];
inline bool DenseParamCP::has_initbound() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DenseParamCP::set_has_initbound() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DenseParamCP::clear_has_initbound() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DenseParamCP::clear_initbound() {
  initbound_ = 0;
  clear_has_initbound();
}
inline ::google::protobuf::int32 DenseParamCP::initbound() const {
  // @@protoc_insertion_point(field_get:svaf.DenseParamCP.initbound)
  return initbound_;
}
inline void DenseParamCP::set_initbound(::google::protobuf::int32 value) {
  set_has_initbound();
  initbound_ = value;
  // @@protoc_insertion_point(field_set:svaf.DenseParamCP.initbound)
}

// optional bool varyxyscale = 6 [default = true];
inline bool DenseParamCP::has_varyxyscale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DenseParamCP::set_has_varyxyscale() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DenseParamCP::clear_has_varyxyscale() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DenseParamCP::clear_varyxyscale() {
  varyxyscale_ = true;
  clear_has_varyxyscale();
}
inline bool DenseParamCP::varyxyscale() const {
  // @@protoc_insertion_point(field_get:svaf.DenseParamCP.varyxyscale)
  return varyxyscale_;
}
inline void DenseParamCP::set_varyxyscale(bool value) {
  set_has_varyxyscale();
  varyxyscale_ = value;
  // @@protoc_insertion_point(field_set:svaf.DenseParamCP.varyxyscale)
}

// optional bool varybdscale = 7 [default = false];
inline bool DenseParamCP::has_varybdscale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DenseParamCP::set_has_varybdscale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DenseParamCP::clear_has_varybdscale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DenseParamCP::clear_varybdscale() {
  varybdscale_ = false;
  clear_has_varybdscale();
}
inline bool DenseParamCP::varybdscale() const {
  // @@protoc_insertion_point(field_get:svaf.DenseParamCP.varybdscale)
  return varybdscale_;
}
inline void DenseParamCP::set_varybdscale(bool value) {
  set_has_varybdscale();
  varybdscale_ = value;
  // @@protoc_insertion_point(field_set:svaf.DenseParamCP.varybdscale)
}

// -------------------------------------------------------------------

// SimpleBlobParamCP

// -------------------------------------------------------------------

// AkazeParamCP

// -------------------------------------------------------------------

// CVPointParameter

// optional .svaf.CVPointParameter.PointType type = 1;
inline bool CVPointParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVPointParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CVPointParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CVPointParameter::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::svaf::CVPointParameter_PointType CVPointParameter::type() const {
  // @@protoc_insertion_point(field_get:svaf.CVPointParameter.type)
  return static_cast< ::svaf::CVPointParameter_PointType >(type_);
}
inline void CVPointParameter::set_type(::svaf::CVPointParameter_PointType value) {
  assert(::svaf::CVPointParameter_PointType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:svaf.CVPointParameter.type)
}

// optional bool isadd = 2 [default = false];
inline bool CVPointParameter::has_isadd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CVPointParameter::set_has_isadd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CVPointParameter::clear_has_isadd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CVPointParameter::clear_isadd() {
  isadd_ = false;
  clear_has_isadd();
}
inline bool CVPointParameter::isadd() const {
  // @@protoc_insertion_point(field_get:svaf.CVPointParameter.isadd)
  return isadd_;
}
inline void CVPointParameter::set_isadd(bool value) {
  set_has_isadd();
  isadd_ = value;
  // @@protoc_insertion_point(field_set:svaf.CVPointParameter.isadd)
}

// optional .svaf.FastParamCP fast_param = 11;
inline bool CVPointParameter::has_fast_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CVPointParameter::set_has_fast_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CVPointParameter::clear_has_fast_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CVPointParameter::clear_fast_param() {
  if (fast_param_ != NULL) fast_param_->::svaf::FastParamCP::Clear();
  clear_has_fast_param();
}
inline const ::svaf::FastParamCP& CVPointParameter::fast_param() const {
  // @@protoc_insertion_point(field_get:svaf.CVPointParameter.fast_param)
  return fast_param_ != NULL ? *fast_param_ : *default_instance_->fast_param_;
}
inline ::svaf::FastParamCP* CVPointParameter::mutable_fast_param() {
  set_has_fast_param();
  if (fast_param_ == NULL) fast_param_ = new ::svaf::FastParamCP;
  // @@protoc_insertion_point(field_mutable:svaf.CVPointParameter.fast_param)
  return fast_param_;
}
inline ::svaf::FastParamCP* CVPointParameter::release_fast_param() {
  clear_has_fast_param();
  ::svaf::FastParamCP* temp = fast_param_;
  fast_param_ = NULL;
  return temp;
}
inline void CVPointParameter::set_allocated_fast_param(::svaf::FastParamCP* fast_param) {
  delete fast_param_;
  fast_param_ = fast_param;
  if (fast_param) {
    set_has_fast_param();
  } else {
    clear_has_fast_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.CVPointParameter.fast_param)
}

// optional .svaf.MSERParamCP mser_param = 13;
inline bool CVPointParameter::has_mser_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CVPointParameter::set_has_mser_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CVPointParameter::clear_has_mser_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CVPointParameter::clear_mser_param() {
  if (mser_param_ != NULL) mser_param_->::svaf::MSERParamCP::Clear();
  clear_has_mser_param();
}
inline const ::svaf::MSERParamCP& CVPointParameter::mser_param() const {
  // @@protoc_insertion_point(field_get:svaf.CVPointParameter.mser_param)
  return mser_param_ != NULL ? *mser_param_ : *default_instance_->mser_param_;
}
inline ::svaf::MSERParamCP* CVPointParameter::mutable_mser_param() {
  set_has_mser_param();
  if (mser_param_ == NULL) mser_param_ = new ::svaf::MSERParamCP;
  // @@protoc_insertion_point(field_mutable:svaf.CVPointParameter.mser_param)
  return mser_param_;
}
inline ::svaf::MSERParamCP* CVPointParameter::release_mser_param() {
  clear_has_mser_param();
  ::svaf::MSERParamCP* temp = mser_param_;
  mser_param_ = NULL;
  return temp;
}
inline void CVPointParameter::set_allocated_mser_param(::svaf::MSERParamCP* mser_param) {
  delete mser_param_;
  mser_param_ = mser_param;
  if (mser_param) {
    set_has_mser_param();
  } else {
    clear_has_mser_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.CVPointParameter.mser_param)
}

// optional .svaf.ORBParamCP orb_param = 14;
inline bool CVPointParameter::has_orb_param() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CVPointParameter::set_has_orb_param() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CVPointParameter::clear_has_orb_param() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CVPointParameter::clear_orb_param() {
  if (orb_param_ != NULL) orb_param_->::svaf::ORBParamCP::Clear();
  clear_has_orb_param();
}
inline const ::svaf::ORBParamCP& CVPointParameter::orb_param() const {
  // @@protoc_insertion_point(field_get:svaf.CVPointParameter.orb_param)
  return orb_param_ != NULL ? *orb_param_ : *default_instance_->orb_param_;
}
inline ::svaf::ORBParamCP* CVPointParameter::mutable_orb_param() {
  set_has_orb_param();
  if (orb_param_ == NULL) orb_param_ = new ::svaf::ORBParamCP;
  // @@protoc_insertion_point(field_mutable:svaf.CVPointParameter.orb_param)
  return orb_param_;
}
inline ::svaf::ORBParamCP* CVPointParameter::release_orb_param() {
  clear_has_orb_param();
  ::svaf::ORBParamCP* temp = orb_param_;
  orb_param_ = NULL;
  return temp;
}
inline void CVPointParameter::set_allocated_orb_param(::svaf::ORBParamCP* orb_param) {
  delete orb_param_;
  orb_param_ = orb_param;
  if (orb_param) {
    set_has_orb_param();
  } else {
    clear_has_orb_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.CVPointParameter.orb_param)
}

// optional .svaf.BriskParamCP brisk_param = 15;
inline bool CVPointParameter::has_brisk_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CVPointParameter::set_has_brisk_param() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CVPointParameter::clear_has_brisk_param() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CVPointParameter::clear_brisk_param() {
  if (brisk_param_ != NULL) brisk_param_->::svaf::BriskParamCP::Clear();
  clear_has_brisk_param();
}
inline const ::svaf::BriskParamCP& CVPointParameter::brisk_param() const {
  // @@protoc_insertion_point(field_get:svaf.CVPointParameter.brisk_param)
  return brisk_param_ != NULL ? *brisk_param_ : *default_instance_->brisk_param_;
}
inline ::svaf::BriskParamCP* CVPointParameter::mutable_brisk_param() {
  set_has_brisk_param();
  if (brisk_param_ == NULL) brisk_param_ = new ::svaf::BriskParamCP;
  // @@protoc_insertion_point(field_mutable:svaf.CVPointParameter.brisk_param)
  return brisk_param_;
}
inline ::svaf::BriskParamCP* CVPointParameter::release_brisk_param() {
  clear_has_brisk_param();
  ::svaf::BriskParamCP* temp = brisk_param_;
  brisk_param_ = NULL;
  return temp;
}
inline void CVPointParameter::set_allocated_brisk_param(::svaf::BriskParamCP* brisk_param) {
  delete brisk_param_;
  brisk_param_ = brisk_param;
  if (brisk_param) {
    set_has_brisk_param();
  } else {
    clear_has_brisk_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.CVPointParameter.brisk_param)
}

// optional .svaf.FreakParamCP freak_param = 16;
inline bool CVPointParameter::has_freak_param() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CVPointParameter::set_has_freak_param() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CVPointParameter::clear_has_freak_param() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CVPointParameter::clear_freak_param() {
  if (freak_param_ != NULL) freak_param_->::svaf::FreakParamCP::Clear();
  clear_has_freak_param();
}
inline const ::svaf::FreakParamCP& CVPointParameter::freak_param() const {
  // @@protoc_insertion_point(field_get:svaf.CVPointParameter.freak_param)
  return freak_param_ != NULL ? *freak_param_ : *default_instance_->freak_param_;
}
inline ::svaf::FreakParamCP* CVPointParameter::mutable_freak_param() {
  set_has_freak_param();
  if (freak_param_ == NULL) freak_param_ = new ::svaf::FreakParamCP;
  // @@protoc_insertion_point(field_mutable:svaf.CVPointParameter.freak_param)
  return freak_param_;
}
inline ::svaf::FreakParamCP* CVPointParameter::release_freak_param() {
  clear_has_freak_param();
  ::svaf::FreakParamCP* temp = freak_param_;
  freak_param_ = NULL;
  return temp;
}
inline void CVPointParameter::set_allocated_freak_param(::svaf::FreakParamCP* freak_param) {
  delete freak_param_;
  freak_param_ = freak_param;
  if (freak_param) {
    set_has_freak_param();
  } else {
    clear_has_freak_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.CVPointParameter.freak_param)
}

// optional .svaf.StarParamCP star_param = 17;
inline bool CVPointParameter::has_star_param() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CVPointParameter::set_has_star_param() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CVPointParameter::clear_has_star_param() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CVPointParameter::clear_star_param() {
  if (star_param_ != NULL) star_param_->::svaf::StarParamCP::Clear();
  clear_has_star_param();
}
inline const ::svaf::StarParamCP& CVPointParameter::star_param() const {
  // @@protoc_insertion_point(field_get:svaf.CVPointParameter.star_param)
  return star_param_ != NULL ? *star_param_ : *default_instance_->star_param_;
}
inline ::svaf::StarParamCP* CVPointParameter::mutable_star_param() {
  set_has_star_param();
  if (star_param_ == NULL) star_param_ = new ::svaf::StarParamCP;
  // @@protoc_insertion_point(field_mutable:svaf.CVPointParameter.star_param)
  return star_param_;
}
inline ::svaf::StarParamCP* CVPointParameter::release_star_param() {
  clear_has_star_param();
  ::svaf::StarParamCP* temp = star_param_;
  star_param_ = NULL;
  return temp;
}
inline void CVPointParameter::set_allocated_star_param(::svaf::StarParamCP* star_param) {
  delete star_param_;
  star_param_ = star_param;
  if (star_param) {
    set_has_star_param();
  } else {
    clear_has_star_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.CVPointParameter.star_param)
}

// optional .svaf.SiftParamCP sift_param = 18;
inline bool CVPointParameter::has_sift_param() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CVPointParameter::set_has_sift_param() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CVPointParameter::clear_has_sift_param() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CVPointParameter::clear_sift_param() {
  if (sift_param_ != NULL) sift_param_->::svaf::SiftParamCP::Clear();
  clear_has_sift_param();
}
inline const ::svaf::SiftParamCP& CVPointParameter::sift_param() const {
  // @@protoc_insertion_point(field_get:svaf.CVPointParameter.sift_param)
  return sift_param_ != NULL ? *sift_param_ : *default_instance_->sift_param_;
}
inline ::svaf::SiftParamCP* CVPointParameter::mutable_sift_param() {
  set_has_sift_param();
  if (sift_param_ == NULL) sift_param_ = new ::svaf::SiftParamCP;
  // @@protoc_insertion_point(field_mutable:svaf.CVPointParameter.sift_param)
  return sift_param_;
}
inline ::svaf::SiftParamCP* CVPointParameter::release_sift_param() {
  clear_has_sift_param();
  ::svaf::SiftParamCP* temp = sift_param_;
  sift_param_ = NULL;
  return temp;
}
inline void CVPointParameter::set_allocated_sift_param(::svaf::SiftParamCP* sift_param) {
  delete sift_param_;
  sift_param_ = sift_param;
  if (sift_param) {
    set_has_sift_param();
  } else {
    clear_has_sift_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.CVPointParameter.sift_param)
}

// optional .svaf.SurfParamCP surf_param = 19;
inline bool CVPointParameter::has_surf_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CVPointParameter::set_has_surf_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CVPointParameter::clear_has_surf_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CVPointParameter::clear_surf_param() {
  if (surf_param_ != NULL) surf_param_->::svaf::SurfParamCP::Clear();
  clear_has_surf_param();
}
inline const ::svaf::SurfParamCP& CVPointParameter::surf_param() const {
  // @@protoc_insertion_point(field_get:svaf.CVPointParameter.surf_param)
  return surf_param_ != NULL ? *surf_param_ : *default_instance_->surf_param_;
}
inline ::svaf::SurfParamCP* CVPointParameter::mutable_surf_param() {
  set_has_surf_param();
  if (surf_param_ == NULL) surf_param_ = new ::svaf::SurfParamCP;
  // @@protoc_insertion_point(field_mutable:svaf.CVPointParameter.surf_param)
  return surf_param_;
}
inline ::svaf::SurfParamCP* CVPointParameter::release_surf_param() {
  clear_has_surf_param();
  ::svaf::SurfParamCP* temp = surf_param_;
  surf_param_ = NULL;
  return temp;
}
inline void CVPointParameter::set_allocated_surf_param(::svaf::SurfParamCP* surf_param) {
  delete surf_param_;
  surf_param_ = surf_param;
  if (surf_param) {
    set_has_surf_param();
  } else {
    clear_has_surf_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.CVPointParameter.surf_param)
}

// optional .svaf.GFTTParamCP gftt_param = 20;
inline bool CVPointParameter::has_gftt_param() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CVPointParameter::set_has_gftt_param() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CVPointParameter::clear_has_gftt_param() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CVPointParameter::clear_gftt_param() {
  if (gftt_param_ != NULL) gftt_param_->::svaf::GFTTParamCP::Clear();
  clear_has_gftt_param();
}
inline const ::svaf::GFTTParamCP& CVPointParameter::gftt_param() const {
  // @@protoc_insertion_point(field_get:svaf.CVPointParameter.gftt_param)
  return gftt_param_ != NULL ? *gftt_param_ : *default_instance_->gftt_param_;
}
inline ::svaf::GFTTParamCP* CVPointParameter::mutable_gftt_param() {
  set_has_gftt_param();
  if (gftt_param_ == NULL) gftt_param_ = new ::svaf::GFTTParamCP;
  // @@protoc_insertion_point(field_mutable:svaf.CVPointParameter.gftt_param)
  return gftt_param_;
}
inline ::svaf::GFTTParamCP* CVPointParameter::release_gftt_param() {
  clear_has_gftt_param();
  ::svaf::GFTTParamCP* temp = gftt_param_;
  gftt_param_ = NULL;
  return temp;
}
inline void CVPointParameter::set_allocated_gftt_param(::svaf::GFTTParamCP* gftt_param) {
  delete gftt_param_;
  gftt_param_ = gftt_param;
  if (gftt_param) {
    set_has_gftt_param();
  } else {
    clear_has_gftt_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.CVPointParameter.gftt_param)
}

// optional .svaf.HarrisParamCP harris_param = 21;
inline bool CVPointParameter::has_harris_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CVPointParameter::set_has_harris_param() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CVPointParameter::clear_has_harris_param() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CVPointParameter::clear_harris_param() {
  if (harris_param_ != NULL) harris_param_->::svaf::HarrisParamCP::Clear();
  clear_has_harris_param();
}
inline const ::svaf::HarrisParamCP& CVPointParameter::harris_param() const {
  // @@protoc_insertion_point(field_get:svaf.CVPointParameter.harris_param)
  return harris_param_ != NULL ? *harris_param_ : *default_instance_->harris_param_;
}
inline ::svaf::HarrisParamCP* CVPointParameter::mutable_harris_param() {
  set_has_harris_param();
  if (harris_param_ == NULL) harris_param_ = new ::svaf::HarrisParamCP;
  // @@protoc_insertion_point(field_mutable:svaf.CVPointParameter.harris_param)
  return harris_param_;
}
inline ::svaf::HarrisParamCP* CVPointParameter::release_harris_param() {
  clear_has_harris_param();
  ::svaf::HarrisParamCP* temp = harris_param_;
  harris_param_ = NULL;
  return temp;
}
inline void CVPointParameter::set_allocated_harris_param(::svaf::HarrisParamCP* harris_param) {
  delete harris_param_;
  harris_param_ = harris_param;
  if (harris_param) {
    set_has_harris_param();
  } else {
    clear_has_harris_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.CVPointParameter.harris_param)
}

// optional .svaf.DenseParamCP dense_param = 22;
inline bool CVPointParameter::has_dense_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CVPointParameter::set_has_dense_param() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CVPointParameter::clear_has_dense_param() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CVPointParameter::clear_dense_param() {
  if (dense_param_ != NULL) dense_param_->::svaf::DenseParamCP::Clear();
  clear_has_dense_param();
}
inline const ::svaf::DenseParamCP& CVPointParameter::dense_param() const {
  // @@protoc_insertion_point(field_get:svaf.CVPointParameter.dense_param)
  return dense_param_ != NULL ? *dense_param_ : *default_instance_->dense_param_;
}
inline ::svaf::DenseParamCP* CVPointParameter::mutable_dense_param() {
  set_has_dense_param();
  if (dense_param_ == NULL) dense_param_ = new ::svaf::DenseParamCP;
  // @@protoc_insertion_point(field_mutable:svaf.CVPointParameter.dense_param)
  return dense_param_;
}
inline ::svaf::DenseParamCP* CVPointParameter::release_dense_param() {
  clear_has_dense_param();
  ::svaf::DenseParamCP* temp = dense_param_;
  dense_param_ = NULL;
  return temp;
}
inline void CVPointParameter::set_allocated_dense_param(::svaf::DenseParamCP* dense_param) {
  delete dense_param_;
  dense_param_ = dense_param;
  if (dense_param) {
    set_has_dense_param();
  } else {
    clear_has_dense_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.CVPointParameter.dense_param)
}

// optional .svaf.SimpleBlobParamCP sb_param = 23;
inline bool CVPointParameter::has_sb_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CVPointParameter::set_has_sb_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CVPointParameter::clear_has_sb_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CVPointParameter::clear_sb_param() {
  if (sb_param_ != NULL) sb_param_->::svaf::SimpleBlobParamCP::Clear();
  clear_has_sb_param();
}
inline const ::svaf::SimpleBlobParamCP& CVPointParameter::sb_param() const {
  // @@protoc_insertion_point(field_get:svaf.CVPointParameter.sb_param)
  return sb_param_ != NULL ? *sb_param_ : *default_instance_->sb_param_;
}
inline ::svaf::SimpleBlobParamCP* CVPointParameter::mutable_sb_param() {
  set_has_sb_param();
  if (sb_param_ == NULL) sb_param_ = new ::svaf::SimpleBlobParamCP;
  // @@protoc_insertion_point(field_mutable:svaf.CVPointParameter.sb_param)
  return sb_param_;
}
inline ::svaf::SimpleBlobParamCP* CVPointParameter::release_sb_param() {
  clear_has_sb_param();
  ::svaf::SimpleBlobParamCP* temp = sb_param_;
  sb_param_ = NULL;
  return temp;
}
inline void CVPointParameter::set_allocated_sb_param(::svaf::SimpleBlobParamCP* sb_param) {
  delete sb_param_;
  sb_param_ = sb_param;
  if (sb_param) {
    set_has_sb_param();
  } else {
    clear_has_sb_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.CVPointParameter.sb_param)
}

// optional .svaf.AkazeParamCP akaze_param = 24;
inline bool CVPointParameter::has_akaze_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CVPointParameter::set_has_akaze_param() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CVPointParameter::clear_has_akaze_param() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CVPointParameter::clear_akaze_param() {
  if (akaze_param_ != NULL) akaze_param_->::svaf::AkazeParamCP::Clear();
  clear_has_akaze_param();
}
inline const ::svaf::AkazeParamCP& CVPointParameter::akaze_param() const {
  // @@protoc_insertion_point(field_get:svaf.CVPointParameter.akaze_param)
  return akaze_param_ != NULL ? *akaze_param_ : *default_instance_->akaze_param_;
}
inline ::svaf::AkazeParamCP* CVPointParameter::mutable_akaze_param() {
  set_has_akaze_param();
  if (akaze_param_ == NULL) akaze_param_ = new ::svaf::AkazeParamCP;
  // @@protoc_insertion_point(field_mutable:svaf.CVPointParameter.akaze_param)
  return akaze_param_;
}
inline ::svaf::AkazeParamCP* CVPointParameter::release_akaze_param() {
  clear_has_akaze_param();
  ::svaf::AkazeParamCP* temp = akaze_param_;
  akaze_param_ = NULL;
  return temp;
}
inline void CVPointParameter::set_allocated_akaze_param(::svaf::AkazeParamCP* akaze_param) {
  delete akaze_param_;
  akaze_param_ = akaze_param;
  if (akaze_param) {
    set_has_akaze_param();
  } else {
    clear_has_akaze_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.CVPointParameter.akaze_param)
}

// -------------------------------------------------------------------

// FeatureDescriptorParameter

// -------------------------------------------------------------------

// SIFTDescriptorParameter

// -------------------------------------------------------------------

// SURFDescriptorParameter

// optional bool upright = 1 [default = false];
inline bool SURFDescriptorParameter::has_upright() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SURFDescriptorParameter::set_has_upright() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SURFDescriptorParameter::clear_has_upright() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SURFDescriptorParameter::clear_upright() {
  upright_ = false;
  clear_has_upright();
}
inline bool SURFDescriptorParameter::upright() const {
  // @@protoc_insertion_point(field_get:svaf.SURFDescriptorParameter.upright)
  return upright_;
}
inline void SURFDescriptorParameter::set_upright(bool value) {
  set_has_upright();
  upright_ = value;
  // @@protoc_insertion_point(field_set:svaf.SURFDescriptorParameter.upright)
}

// -------------------------------------------------------------------

// STARDescriptorParameter

// -------------------------------------------------------------------

// BRIEFDescriptorParameter

// -------------------------------------------------------------------

// BRISKDescriptorParameter

// -------------------------------------------------------------------

// FASTDescriptorParameter

// -------------------------------------------------------------------

// ORBDescriptorParameter

// -------------------------------------------------------------------

// KAZEDescriptorParameter

// -------------------------------------------------------------------

// BriefDespCV

// optional int32 length = 1 [default = 32];
inline bool BriefDespCV::has_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BriefDespCV::set_has_length() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BriefDespCV::clear_has_length() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BriefDespCV::clear_length() {
  length_ = 32;
  clear_has_length();
}
inline ::google::protobuf::int32 BriefDespCV::length() const {
  // @@protoc_insertion_point(field_get:svaf.BriefDespCV.length)
  return length_;
}
inline void BriefDespCV::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:svaf.BriefDespCV.length)
}

// -------------------------------------------------------------------

// CVDescriptorParameter

// optional .svaf.CVDescriptorParameter.DespType type = 1;
inline bool CVDescriptorParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVDescriptorParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CVDescriptorParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CVDescriptorParameter::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::svaf::CVDescriptorParameter_DespType CVDescriptorParameter::type() const {
  // @@protoc_insertion_point(field_get:svaf.CVDescriptorParameter.type)
  return static_cast< ::svaf::CVDescriptorParameter_DespType >(type_);
}
inline void CVDescriptorParameter::set_type(::svaf::CVDescriptorParameter_DespType value) {
  assert(::svaf::CVDescriptorParameter_DespType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:svaf.CVDescriptorParameter.type)
}

// optional .svaf.BriefDespCV brief_param = 2;
inline bool CVDescriptorParameter::has_brief_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CVDescriptorParameter::set_has_brief_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CVDescriptorParameter::clear_has_brief_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CVDescriptorParameter::clear_brief_param() {
  if (brief_param_ != NULL) brief_param_->::svaf::BriefDespCV::Clear();
  clear_has_brief_param();
}
inline const ::svaf::BriefDespCV& CVDescriptorParameter::brief_param() const {
  // @@protoc_insertion_point(field_get:svaf.CVDescriptorParameter.brief_param)
  return brief_param_ != NULL ? *brief_param_ : *default_instance_->brief_param_;
}
inline ::svaf::BriefDespCV* CVDescriptorParameter::mutable_brief_param() {
  set_has_brief_param();
  if (brief_param_ == NULL) brief_param_ = new ::svaf::BriefDespCV;
  // @@protoc_insertion_point(field_mutable:svaf.CVDescriptorParameter.brief_param)
  return brief_param_;
}
inline ::svaf::BriefDespCV* CVDescriptorParameter::release_brief_param() {
  clear_has_brief_param();
  ::svaf::BriefDespCV* temp = brief_param_;
  brief_param_ = NULL;
  return temp;
}
inline void CVDescriptorParameter::set_allocated_brief_param(::svaf::BriefDespCV* brief_param) {
  delete brief_param_;
  brief_param_ = brief_param;
  if (brief_param) {
    set_has_brief_param();
  } else {
    clear_has_brief_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.CVDescriptorParameter.brief_param)
}

// -------------------------------------------------------------------

// VectorMatchParameter

// -------------------------------------------------------------------

// KDTreeMatchParameter

// -------------------------------------------------------------------

// EularMatchParameter

// optional float thresh = 1 [default = 0.65];
inline bool EularMatchParameter::has_thresh() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EularMatchParameter::set_has_thresh() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EularMatchParameter::clear_has_thresh() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EularMatchParameter::clear_thresh() {
  thresh_ = 0.65f;
  clear_has_thresh();
}
inline float EularMatchParameter::thresh() const {
  // @@protoc_insertion_point(field_get:svaf.EularMatchParameter.thresh)
  return thresh_;
}
inline void EularMatchParameter::set_thresh(float value) {
  set_has_thresh();
  thresh_ = value;
  // @@protoc_insertion_point(field_set:svaf.EularMatchParameter.thresh)
}

// -------------------------------------------------------------------

// RansacParameter

// optional float thresh = 1 [default = 5];
inline bool RansacParameter::has_thresh() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RansacParameter::set_has_thresh() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RansacParameter::clear_has_thresh() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RansacParameter::clear_thresh() {
  thresh_ = 5;
  clear_has_thresh();
}
inline float RansacParameter::thresh() const {
  // @@protoc_insertion_point(field_get:svaf.RansacParameter.thresh)
  return thresh_;
}
inline void RansacParameter::set_thresh(float value) {
  set_has_thresh();
  thresh_ = value;
  // @@protoc_insertion_point(field_set:svaf.RansacParameter.thresh)
}

// -------------------------------------------------------------------

// BruteForceMatchParameter

// -------------------------------------------------------------------

// FLANNMatchParameter

// -------------------------------------------------------------------

// ECMatchParameter

// -------------------------------------------------------------------

// CVMatchParameter

// optional .svaf.CVMatchParameter.MatchType type = 1;
inline bool CVMatchParameter::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVMatchParameter::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CVMatchParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CVMatchParameter::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::svaf::CVMatchParameter_MatchType CVMatchParameter::type() const {
  // @@protoc_insertion_point(field_get:svaf.CVMatchParameter.type)
  return static_cast< ::svaf::CVMatchParameter_MatchType >(type_);
}
inline void CVMatchParameter::set_type(::svaf::CVMatchParameter_MatchType value) {
  assert(::svaf::CVMatchParameter_MatchType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:svaf.CVMatchParameter.type)
}

// optional bool crosscheck = 2 [default = true];
inline bool CVMatchParameter::has_crosscheck() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CVMatchParameter::set_has_crosscheck() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CVMatchParameter::clear_has_crosscheck() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CVMatchParameter::clear_crosscheck() {
  crosscheck_ = true;
  clear_has_crosscheck();
}
inline bool CVMatchParameter::crosscheck() const {
  // @@protoc_insertion_point(field_get:svaf.CVMatchParameter.crosscheck)
  return crosscheck_;
}
inline void CVMatchParameter::set_crosscheck(bool value) {
  set_has_crosscheck();
  crosscheck_ = value;
  // @@protoc_insertion_point(field_set:svaf.CVMatchParameter.crosscheck)
}

// -------------------------------------------------------------------

// StereoMatchParameter

// -------------------------------------------------------------------

// SGMMatchParameter

// optional int32 max_disp = 1 [default = 24];
inline bool SGMMatchParameter::has_max_disp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SGMMatchParameter::set_has_max_disp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SGMMatchParameter::clear_has_max_disp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SGMMatchParameter::clear_max_disp() {
  max_disp_ = 24;
  clear_has_max_disp();
}
inline ::google::protobuf::int32 SGMMatchParameter::max_disp() const {
  // @@protoc_insertion_point(field_get:svaf.SGMMatchParameter.max_disp)
  return max_disp_;
}
inline void SGMMatchParameter::set_max_disp(::google::protobuf::int32 value) {
  set_has_max_disp();
  max_disp_ = value;
  // @@protoc_insertion_point(field_set:svaf.SGMMatchParameter.max_disp)
}

// optional int32 factor = 2 [default = 2560];
inline bool SGMMatchParameter::has_factor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SGMMatchParameter::set_has_factor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SGMMatchParameter::clear_has_factor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SGMMatchParameter::clear_factor() {
  factor_ = 2560;
  clear_has_factor();
}
inline ::google::protobuf::int32 SGMMatchParameter::factor() const {
  // @@protoc_insertion_point(field_get:svaf.SGMMatchParameter.factor)
  return factor_;
}
inline void SGMMatchParameter::set_factor(::google::protobuf::int32 value) {
  set_has_factor();
  factor_ = value;
  // @@protoc_insertion_point(field_set:svaf.SGMMatchParameter.factor)
}

// optional int32 dispmr = 3 [default = 1];
inline bool SGMMatchParameter::has_dispmr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SGMMatchParameter::set_has_dispmr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SGMMatchParameter::clear_has_dispmr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SGMMatchParameter::clear_dispmr() {
  dispmr_ = 1;
  clear_has_dispmr();
}
inline ::google::protobuf::int32 SGMMatchParameter::dispmr() const {
  // @@protoc_insertion_point(field_get:svaf.SGMMatchParameter.dispmr)
  return dispmr_;
}
inline void SGMMatchParameter::set_dispmr(::google::protobuf::int32 value) {
  set_has_dispmr();
  dispmr_ = value;
  // @@protoc_insertion_point(field_set:svaf.SGMMatchParameter.dispmr)
}

// optional float r1 = 4 [default = 10];
inline bool SGMMatchParameter::has_r1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SGMMatchParameter::set_has_r1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SGMMatchParameter::clear_has_r1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SGMMatchParameter::clear_r1() {
  r1_ = 10;
  clear_has_r1();
}
inline float SGMMatchParameter::r1() const {
  // @@protoc_insertion_point(field_get:svaf.SGMMatchParameter.r1)
  return r1_;
}
inline void SGMMatchParameter::set_r1(float value) {
  set_has_r1();
  r1_ = value;
  // @@protoc_insertion_point(field_set:svaf.SGMMatchParameter.r1)
}

// optional float r2 = 5 [default = 500];
inline bool SGMMatchParameter::has_r2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SGMMatchParameter::set_has_r2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SGMMatchParameter::clear_has_r2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SGMMatchParameter::clear_r2() {
  r2_ = 500;
  clear_has_r2();
}
inline float SGMMatchParameter::r2() const {
  // @@protoc_insertion_point(field_get:svaf.SGMMatchParameter.r2)
  return r2_;
}
inline void SGMMatchParameter::set_r2(float value) {
  set_has_r2();
  r2_ = value;
  // @@protoc_insertion_point(field_set:svaf.SGMMatchParameter.r2)
}

// optional string prefix = 6 [default = "./sgm"];
inline bool SGMMatchParameter::has_prefix() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SGMMatchParameter::set_has_prefix() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SGMMatchParameter::clear_has_prefix() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SGMMatchParameter::clear_prefix() {
  if (prefix_ != _default_prefix_) {
    prefix_->assign(*_default_prefix_);
  }
  clear_has_prefix();
}
inline const ::std::string& SGMMatchParameter::prefix() const {
  // @@protoc_insertion_point(field_get:svaf.SGMMatchParameter.prefix)
  return *prefix_;
}
inline void SGMMatchParameter::set_prefix(const ::std::string& value) {
  set_has_prefix();
  if (prefix_ == _default_prefix_) {
    prefix_ = new ::std::string;
  }
  prefix_->assign(value);
  // @@protoc_insertion_point(field_set:svaf.SGMMatchParameter.prefix)
}
inline void SGMMatchParameter::set_prefix(const char* value) {
  set_has_prefix();
  if (prefix_ == _default_prefix_) {
    prefix_ = new ::std::string;
  }
  prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.SGMMatchParameter.prefix)
}
inline void SGMMatchParameter::set_prefix(const char* value, size_t size) {
  set_has_prefix();
  if (prefix_ == _default_prefix_) {
    prefix_ = new ::std::string;
  }
  prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.SGMMatchParameter.prefix)
}
inline ::std::string* SGMMatchParameter::mutable_prefix() {
  set_has_prefix();
  if (prefix_ == _default_prefix_) {
    prefix_ = new ::std::string(*_default_prefix_);
  }
  // @@protoc_insertion_point(field_mutable:svaf.SGMMatchParameter.prefix)
  return prefix_;
}
inline ::std::string* SGMMatchParameter::release_prefix() {
  clear_has_prefix();
  if (prefix_ == _default_prefix_) {
    return NULL;
  } else {
    ::std::string* temp = prefix_;
    prefix_ = const_cast< ::std::string*>(_default_prefix_);
    return temp;
  }
}
inline void SGMMatchParameter::set_allocated_prefix(::std::string* prefix) {
  if (prefix_ != _default_prefix_) {
    delete prefix_;
  }
  if (prefix) {
    set_has_prefix();
    prefix_ = prefix;
  } else {
    clear_has_prefix();
    prefix_ = const_cast< ::std::string*>(_default_prefix_);
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.SGMMatchParameter.prefix)
}

// optional bool savetxt = 7 [default = false];
inline bool SGMMatchParameter::has_savetxt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SGMMatchParameter::set_has_savetxt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SGMMatchParameter::clear_has_savetxt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SGMMatchParameter::clear_savetxt() {
  savetxt_ = false;
  clear_has_savetxt();
}
inline bool SGMMatchParameter::savetxt() const {
  // @@protoc_insertion_point(field_get:svaf.SGMMatchParameter.savetxt)
  return savetxt_;
}
inline void SGMMatchParameter::set_savetxt(bool value) {
  set_has_savetxt();
  savetxt_ = value;
  // @@protoc_insertion_point(field_set:svaf.SGMMatchParameter.savetxt)
}

// -------------------------------------------------------------------

// EADPMatchParameter

// optional int32 max_disp = 1 [default = 24];
inline bool EADPMatchParameter::has_max_disp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EADPMatchParameter::set_has_max_disp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EADPMatchParameter::clear_has_max_disp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EADPMatchParameter::clear_max_disp() {
  max_disp_ = 24;
  clear_has_max_disp();
}
inline ::google::protobuf::int32 EADPMatchParameter::max_disp() const {
  // @@protoc_insertion_point(field_get:svaf.EADPMatchParameter.max_disp)
  return max_disp_;
}
inline void EADPMatchParameter::set_max_disp(::google::protobuf::int32 value) {
  set_has_max_disp();
  max_disp_ = value;
  // @@protoc_insertion_point(field_set:svaf.EADPMatchParameter.max_disp)
}

// optional int32 factor = 2 [default = 2560];
inline bool EADPMatchParameter::has_factor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EADPMatchParameter::set_has_factor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EADPMatchParameter::clear_has_factor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EADPMatchParameter::clear_factor() {
  factor_ = 2560;
  clear_has_factor();
}
inline ::google::protobuf::int32 EADPMatchParameter::factor() const {
  // @@protoc_insertion_point(field_get:svaf.EADPMatchParameter.factor)
  return factor_;
}
inline void EADPMatchParameter::set_factor(::google::protobuf::int32 value) {
  set_has_factor();
  factor_ = value;
  // @@protoc_insertion_point(field_set:svaf.EADPMatchParameter.factor)
}

// optional int32 guidmr = 3 [default = 1];
inline bool EADPMatchParameter::has_guidmr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EADPMatchParameter::set_has_guidmr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EADPMatchParameter::clear_has_guidmr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EADPMatchParameter::clear_guidmr() {
  guidmr_ = 1;
  clear_has_guidmr();
}
inline ::google::protobuf::int32 EADPMatchParameter::guidmr() const {
  // @@protoc_insertion_point(field_get:svaf.EADPMatchParameter.guidmr)
  return guidmr_;
}
inline void EADPMatchParameter::set_guidmr(::google::protobuf::int32 value) {
  set_has_guidmr();
  guidmr_ = value;
  // @@protoc_insertion_point(field_set:svaf.EADPMatchParameter.guidmr)
}

// optional int32 dispmr = 4 [default = 1];
inline bool EADPMatchParameter::has_dispmr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EADPMatchParameter::set_has_dispmr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EADPMatchParameter::clear_has_dispmr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EADPMatchParameter::clear_dispmr() {
  dispmr_ = 1;
  clear_has_dispmr();
}
inline ::google::protobuf::int32 EADPMatchParameter::dispmr() const {
  // @@protoc_insertion_point(field_get:svaf.EADPMatchParameter.dispmr)
  return dispmr_;
}
inline void EADPMatchParameter::set_dispmr(::google::protobuf::int32 value) {
  set_has_dispmr();
  dispmr_ = value;
  // @@protoc_insertion_point(field_set:svaf.EADPMatchParameter.dispmr)
}

// optional float sg = 5 [default = -25];
inline bool EADPMatchParameter::has_sg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EADPMatchParameter::set_has_sg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EADPMatchParameter::clear_has_sg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EADPMatchParameter::clear_sg() {
  sg_ = -25;
  clear_has_sg();
}
inline float EADPMatchParameter::sg() const {
  // @@protoc_insertion_point(field_get:svaf.EADPMatchParameter.sg)
  return sg_;
}
inline void EADPMatchParameter::set_sg(float value) {
  set_has_sg();
  sg_ = value;
  // @@protoc_insertion_point(field_set:svaf.EADPMatchParameter.sg)
}

// optional float sc = 6 [default = 25.5];
inline bool EADPMatchParameter::has_sc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EADPMatchParameter::set_has_sc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EADPMatchParameter::clear_has_sc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EADPMatchParameter::clear_sc() {
  sc_ = 25.5f;
  clear_has_sc();
}
inline float EADPMatchParameter::sc() const {
  // @@protoc_insertion_point(field_get:svaf.EADPMatchParameter.sc)
  return sc_;
}
inline void EADPMatchParameter::set_sc(float value) {
  set_has_sc();
  sc_ = value;
  // @@protoc_insertion_point(field_set:svaf.EADPMatchParameter.sc)
}

// optional float r1 = 7 [default = 10];
inline bool EADPMatchParameter::has_r1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EADPMatchParameter::set_has_r1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EADPMatchParameter::clear_has_r1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EADPMatchParameter::clear_r1() {
  r1_ = 10;
  clear_has_r1();
}
inline float EADPMatchParameter::r1() const {
  // @@protoc_insertion_point(field_get:svaf.EADPMatchParameter.r1)
  return r1_;
}
inline void EADPMatchParameter::set_r1(float value) {
  set_has_r1();
  r1_ = value;
  // @@protoc_insertion_point(field_set:svaf.EADPMatchParameter.r1)
}

// optional float r2 = 8 [default = 500];
inline bool EADPMatchParameter::has_r2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EADPMatchParameter::set_has_r2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EADPMatchParameter::clear_has_r2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EADPMatchParameter::clear_r2() {
  r2_ = 500;
  clear_has_r2();
}
inline float EADPMatchParameter::r2() const {
  // @@protoc_insertion_point(field_get:svaf.EADPMatchParameter.r2)
  return r2_;
}
inline void EADPMatchParameter::set_r2(float value) {
  set_has_r2();
  r2_ = value;
  // @@protoc_insertion_point(field_set:svaf.EADPMatchParameter.r2)
}

// optional string prefix = 9 [default = "./eadp"];
inline bool EADPMatchParameter::has_prefix() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EADPMatchParameter::set_has_prefix() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EADPMatchParameter::clear_has_prefix() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EADPMatchParameter::clear_prefix() {
  if (prefix_ != _default_prefix_) {
    prefix_->assign(*_default_prefix_);
  }
  clear_has_prefix();
}
inline const ::std::string& EADPMatchParameter::prefix() const {
  // @@protoc_insertion_point(field_get:svaf.EADPMatchParameter.prefix)
  return *prefix_;
}
inline void EADPMatchParameter::set_prefix(const ::std::string& value) {
  set_has_prefix();
  if (prefix_ == _default_prefix_) {
    prefix_ = new ::std::string;
  }
  prefix_->assign(value);
  // @@protoc_insertion_point(field_set:svaf.EADPMatchParameter.prefix)
}
inline void EADPMatchParameter::set_prefix(const char* value) {
  set_has_prefix();
  if (prefix_ == _default_prefix_) {
    prefix_ = new ::std::string;
  }
  prefix_->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.EADPMatchParameter.prefix)
}
inline void EADPMatchParameter::set_prefix(const char* value, size_t size) {
  set_has_prefix();
  if (prefix_ == _default_prefix_) {
    prefix_ = new ::std::string;
  }
  prefix_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.EADPMatchParameter.prefix)
}
inline ::std::string* EADPMatchParameter::mutable_prefix() {
  set_has_prefix();
  if (prefix_ == _default_prefix_) {
    prefix_ = new ::std::string(*_default_prefix_);
  }
  // @@protoc_insertion_point(field_mutable:svaf.EADPMatchParameter.prefix)
  return prefix_;
}
inline ::std::string* EADPMatchParameter::release_prefix() {
  clear_has_prefix();
  if (prefix_ == _default_prefix_) {
    return NULL;
  } else {
    ::std::string* temp = prefix_;
    prefix_ = const_cast< ::std::string*>(_default_prefix_);
    return temp;
  }
}
inline void EADPMatchParameter::set_allocated_prefix(::std::string* prefix) {
  if (prefix_ != _default_prefix_) {
    delete prefix_;
  }
  if (prefix) {
    set_has_prefix();
    prefix_ = prefix;
  } else {
    clear_has_prefix();
    prefix_ = const_cast< ::std::string*>(_default_prefix_);
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.EADPMatchParameter.prefix)
}

// optional bool savetxt = 10 [default = false];
inline bool EADPMatchParameter::has_savetxt() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EADPMatchParameter::set_has_savetxt() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EADPMatchParameter::clear_has_savetxt() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EADPMatchParameter::clear_savetxt() {
  savetxt_ = false;
  clear_has_savetxt();
}
inline bool EADPMatchParameter::savetxt() const {
  // @@protoc_insertion_point(field_get:svaf.EADPMatchParameter.savetxt)
  return savetxt_;
}
inline void EADPMatchParameter::set_savetxt(bool value) {
  set_has_savetxt();
  savetxt_ = value;
  // @@protoc_insertion_point(field_set:svaf.EADPMatchParameter.savetxt)
}

// -------------------------------------------------------------------

// OutputParameter

// -------------------------------------------------------------------

// TriangularParameter

// optional bool visible = 1 [default = true];
inline bool TriangularParameter::has_visible() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TriangularParameter::set_has_visible() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TriangularParameter::clear_has_visible() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TriangularParameter::clear_visible() {
  visible_ = true;
  clear_has_visible();
}
inline bool TriangularParameter::visible() const {
  // @@protoc_insertion_point(field_get:svaf.TriangularParameter.visible)
  return visible_;
}
inline void TriangularParameter::set_visible(bool value) {
  set_has_visible();
  visible_ = value;
  // @@protoc_insertion_point(field_set:svaf.TriangularParameter.visible)
}

// optional string toolbox_dir = 2;
inline bool TriangularParameter::has_toolbox_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TriangularParameter::set_has_toolbox_dir() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TriangularParameter::clear_has_toolbox_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TriangularParameter::clear_toolbox_dir() {
  if (toolbox_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toolbox_dir_->clear();
  }
  clear_has_toolbox_dir();
}
inline const ::std::string& TriangularParameter::toolbox_dir() const {
  // @@protoc_insertion_point(field_get:svaf.TriangularParameter.toolbox_dir)
  return *toolbox_dir_;
}
inline void TriangularParameter::set_toolbox_dir(const ::std::string& value) {
  set_has_toolbox_dir();
  if (toolbox_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toolbox_dir_ = new ::std::string;
  }
  toolbox_dir_->assign(value);
  // @@protoc_insertion_point(field_set:svaf.TriangularParameter.toolbox_dir)
}
inline void TriangularParameter::set_toolbox_dir(const char* value) {
  set_has_toolbox_dir();
  if (toolbox_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toolbox_dir_ = new ::std::string;
  }
  toolbox_dir_->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.TriangularParameter.toolbox_dir)
}
inline void TriangularParameter::set_toolbox_dir(const char* value, size_t size) {
  set_has_toolbox_dir();
  if (toolbox_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toolbox_dir_ = new ::std::string;
  }
  toolbox_dir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.TriangularParameter.toolbox_dir)
}
inline ::std::string* TriangularParameter::mutable_toolbox_dir() {
  set_has_toolbox_dir();
  if (toolbox_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    toolbox_dir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svaf.TriangularParameter.toolbox_dir)
  return toolbox_dir_;
}
inline ::std::string* TriangularParameter::release_toolbox_dir() {
  clear_has_toolbox_dir();
  if (toolbox_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = toolbox_dir_;
    toolbox_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TriangularParameter::set_allocated_toolbox_dir(::std::string* toolbox_dir) {
  if (toolbox_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete toolbox_dir_;
  }
  if (toolbox_dir) {
    set_has_toolbox_dir();
    toolbox_dir_ = toolbox_dir;
  } else {
    clear_has_toolbox_dir();
    toolbox_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.TriangularParameter.toolbox_dir)
}

// optional string calibmat_dir = 3;
inline bool TriangularParameter::has_calibmat_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TriangularParameter::set_has_calibmat_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TriangularParameter::clear_has_calibmat_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TriangularParameter::clear_calibmat_dir() {
  if (calibmat_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calibmat_dir_->clear();
  }
  clear_has_calibmat_dir();
}
inline const ::std::string& TriangularParameter::calibmat_dir() const {
  // @@protoc_insertion_point(field_get:svaf.TriangularParameter.calibmat_dir)
  return *calibmat_dir_;
}
inline void TriangularParameter::set_calibmat_dir(const ::std::string& value) {
  set_has_calibmat_dir();
  if (calibmat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calibmat_dir_ = new ::std::string;
  }
  calibmat_dir_->assign(value);
  // @@protoc_insertion_point(field_set:svaf.TriangularParameter.calibmat_dir)
}
inline void TriangularParameter::set_calibmat_dir(const char* value) {
  set_has_calibmat_dir();
  if (calibmat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calibmat_dir_ = new ::std::string;
  }
  calibmat_dir_->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.TriangularParameter.calibmat_dir)
}
inline void TriangularParameter::set_calibmat_dir(const char* value, size_t size) {
  set_has_calibmat_dir();
  if (calibmat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calibmat_dir_ = new ::std::string;
  }
  calibmat_dir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.TriangularParameter.calibmat_dir)
}
inline ::std::string* TriangularParameter::mutable_calibmat_dir() {
  set_has_calibmat_dir();
  if (calibmat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    calibmat_dir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svaf.TriangularParameter.calibmat_dir)
  return calibmat_dir_;
}
inline ::std::string* TriangularParameter::release_calibmat_dir() {
  clear_has_calibmat_dir();
  if (calibmat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = calibmat_dir_;
    calibmat_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TriangularParameter::set_allocated_calibmat_dir(::std::string* calibmat_dir) {
  if (calibmat_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete calibmat_dir_;
  }
  if (calibmat_dir) {
    set_has_calibmat_dir();
    calibmat_dir_ = calibmat_dir;
  } else {
    clear_has_calibmat_dir();
    calibmat_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.TriangularParameter.calibmat_dir)
}

// optional bool savepc = 4 [default = false];
inline bool TriangularParameter::has_savepc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TriangularParameter::set_has_savepc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TriangularParameter::clear_has_savepc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TriangularParameter::clear_savepc() {
  savepc_ = false;
  clear_has_savepc();
}
inline bool TriangularParameter::savepc() const {
  // @@protoc_insertion_point(field_get:svaf.TriangularParameter.savepc)
  return savepc_;
}
inline void TriangularParameter::set_savepc(bool value) {
  set_has_savepc();
  savepc_ = value;
  // @@protoc_insertion_point(field_set:svaf.TriangularParameter.savepc)
}

// optional string pcname = 5 [default = "./ref_pointcloud.pc"];
inline bool TriangularParameter::has_pcname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TriangularParameter::set_has_pcname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TriangularParameter::clear_has_pcname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TriangularParameter::clear_pcname() {
  if (pcname_ != _default_pcname_) {
    pcname_->assign(*_default_pcname_);
  }
  clear_has_pcname();
}
inline const ::std::string& TriangularParameter::pcname() const {
  // @@protoc_insertion_point(field_get:svaf.TriangularParameter.pcname)
  return *pcname_;
}
inline void TriangularParameter::set_pcname(const ::std::string& value) {
  set_has_pcname();
  if (pcname_ == _default_pcname_) {
    pcname_ = new ::std::string;
  }
  pcname_->assign(value);
  // @@protoc_insertion_point(field_set:svaf.TriangularParameter.pcname)
}
inline void TriangularParameter::set_pcname(const char* value) {
  set_has_pcname();
  if (pcname_ == _default_pcname_) {
    pcname_ = new ::std::string;
  }
  pcname_->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.TriangularParameter.pcname)
}
inline void TriangularParameter::set_pcname(const char* value, size_t size) {
  set_has_pcname();
  if (pcname_ == _default_pcname_) {
    pcname_ = new ::std::string;
  }
  pcname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.TriangularParameter.pcname)
}
inline ::std::string* TriangularParameter::mutable_pcname() {
  set_has_pcname();
  if (pcname_ == _default_pcname_) {
    pcname_ = new ::std::string(*_default_pcname_);
  }
  // @@protoc_insertion_point(field_mutable:svaf.TriangularParameter.pcname)
  return pcname_;
}
inline ::std::string* TriangularParameter::release_pcname() {
  clear_has_pcname();
  if (pcname_ == _default_pcname_) {
    return NULL;
  } else {
    ::std::string* temp = pcname_;
    pcname_ = const_cast< ::std::string*>(_default_pcname_);
    return temp;
  }
}
inline void TriangularParameter::set_allocated_pcname(::std::string* pcname) {
  if (pcname_ != _default_pcname_) {
    delete pcname_;
  }
  if (pcname) {
    set_has_pcname();
    pcname_ = pcname;
  } else {
    clear_has_pcname();
    pcname_ = const_cast< ::std::string*>(_default_pcname_);
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.TriangularParameter.pcname)
}

// -------------------------------------------------------------------

// MatrixMulParameter

// optional string filename = 1;
inline bool MatrixMulParameter::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatrixMulParameter::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatrixMulParameter::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatrixMulParameter::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& MatrixMulParameter::filename() const {
  // @@protoc_insertion_point(field_get:svaf.MatrixMulParameter.filename)
  return *filename_;
}
inline void MatrixMulParameter::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:svaf.MatrixMulParameter.filename)
}
inline void MatrixMulParameter::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.MatrixMulParameter.filename)
}
inline void MatrixMulParameter::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.MatrixMulParameter.filename)
}
inline ::std::string* MatrixMulParameter::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svaf.MatrixMulParameter.filename)
  return filename_;
}
inline ::std::string* MatrixMulParameter::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MatrixMulParameter::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.MatrixMulParameter.filename)
}

// optional string col0 = 2;
inline bool MatrixMulParameter::has_col0() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatrixMulParameter::set_has_col0() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatrixMulParameter::clear_has_col0() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatrixMulParameter::clear_col0() {
  if (col0_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    col0_->clear();
  }
  clear_has_col0();
}
inline const ::std::string& MatrixMulParameter::col0() const {
  // @@protoc_insertion_point(field_get:svaf.MatrixMulParameter.col0)
  return *col0_;
}
inline void MatrixMulParameter::set_col0(const ::std::string& value) {
  set_has_col0();
  if (col0_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    col0_ = new ::std::string;
  }
  col0_->assign(value);
  // @@protoc_insertion_point(field_set:svaf.MatrixMulParameter.col0)
}
inline void MatrixMulParameter::set_col0(const char* value) {
  set_has_col0();
  if (col0_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    col0_ = new ::std::string;
  }
  col0_->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.MatrixMulParameter.col0)
}
inline void MatrixMulParameter::set_col0(const char* value, size_t size) {
  set_has_col0();
  if (col0_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    col0_ = new ::std::string;
  }
  col0_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.MatrixMulParameter.col0)
}
inline ::std::string* MatrixMulParameter::mutable_col0() {
  set_has_col0();
  if (col0_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    col0_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svaf.MatrixMulParameter.col0)
  return col0_;
}
inline ::std::string* MatrixMulParameter::release_col0() {
  clear_has_col0();
  if (col0_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = col0_;
    col0_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MatrixMulParameter::set_allocated_col0(::std::string* col0) {
  if (col0_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete col0_;
  }
  if (col0) {
    set_has_col0();
    col0_ = col0;
  } else {
    clear_has_col0();
    col0_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.MatrixMulParameter.col0)
}

// optional string col1 = 3;
inline bool MatrixMulParameter::has_col1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatrixMulParameter::set_has_col1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatrixMulParameter::clear_has_col1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatrixMulParameter::clear_col1() {
  if (col1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    col1_->clear();
  }
  clear_has_col1();
}
inline const ::std::string& MatrixMulParameter::col1() const {
  // @@protoc_insertion_point(field_get:svaf.MatrixMulParameter.col1)
  return *col1_;
}
inline void MatrixMulParameter::set_col1(const ::std::string& value) {
  set_has_col1();
  if (col1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    col1_ = new ::std::string;
  }
  col1_->assign(value);
  // @@protoc_insertion_point(field_set:svaf.MatrixMulParameter.col1)
}
inline void MatrixMulParameter::set_col1(const char* value) {
  set_has_col1();
  if (col1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    col1_ = new ::std::string;
  }
  col1_->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.MatrixMulParameter.col1)
}
inline void MatrixMulParameter::set_col1(const char* value, size_t size) {
  set_has_col1();
  if (col1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    col1_ = new ::std::string;
  }
  col1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.MatrixMulParameter.col1)
}
inline ::std::string* MatrixMulParameter::mutable_col1() {
  set_has_col1();
  if (col1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    col1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svaf.MatrixMulParameter.col1)
  return col1_;
}
inline ::std::string* MatrixMulParameter::release_col1() {
  clear_has_col1();
  if (col1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = col1_;
    col1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MatrixMulParameter::set_allocated_col1(::std::string* col1) {
  if (col1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete col1_;
  }
  if (col1) {
    set_has_col1();
    col1_ = col1;
  } else {
    clear_has_col1();
    col1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.MatrixMulParameter.col1)
}

// optional string col2 = 4;
inline bool MatrixMulParameter::has_col2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatrixMulParameter::set_has_col2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatrixMulParameter::clear_has_col2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatrixMulParameter::clear_col2() {
  if (col2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    col2_->clear();
  }
  clear_has_col2();
}
inline const ::std::string& MatrixMulParameter::col2() const {
  // @@protoc_insertion_point(field_get:svaf.MatrixMulParameter.col2)
  return *col2_;
}
inline void MatrixMulParameter::set_col2(const ::std::string& value) {
  set_has_col2();
  if (col2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    col2_ = new ::std::string;
  }
  col2_->assign(value);
  // @@protoc_insertion_point(field_set:svaf.MatrixMulParameter.col2)
}
inline void MatrixMulParameter::set_col2(const char* value) {
  set_has_col2();
  if (col2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    col2_ = new ::std::string;
  }
  col2_->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.MatrixMulParameter.col2)
}
inline void MatrixMulParameter::set_col2(const char* value, size_t size) {
  set_has_col2();
  if (col2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    col2_ = new ::std::string;
  }
  col2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.MatrixMulParameter.col2)
}
inline ::std::string* MatrixMulParameter::mutable_col2() {
  set_has_col2();
  if (col2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    col2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svaf.MatrixMulParameter.col2)
  return col2_;
}
inline ::std::string* MatrixMulParameter::release_col2() {
  clear_has_col2();
  if (col2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = col2_;
    col2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MatrixMulParameter::set_allocated_col2(::std::string* col2) {
  if (col2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete col2_;
  }
  if (col2) {
    set_has_col2();
    col2_ = col2;
  } else {
    clear_has_col2();
    col2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.MatrixMulParameter.col2)
}

// -------------------------------------------------------------------

// PositionEstimateParameter

// -------------------------------------------------------------------

// CenterPointParameter

// -------------------------------------------------------------------

// CoordiParameter

// optional float x = 1 [default = 0];
inline bool CoordiParameter::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CoordiParameter::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CoordiParameter::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CoordiParameter::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float CoordiParameter::x() const {
  // @@protoc_insertion_point(field_get:svaf.CoordiParameter.x)
  return x_;
}
inline void CoordiParameter::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:svaf.CoordiParameter.x)
}

// optional float y = 2 [default = 0];
inline bool CoordiParameter::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CoordiParameter::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CoordiParameter::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CoordiParameter::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float CoordiParameter::y() const {
  // @@protoc_insertion_point(field_get:svaf.CoordiParameter.y)
  return y_;
}
inline void CoordiParameter::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:svaf.CoordiParameter.y)
}

// optional float z = 3 [default = 0];
inline bool CoordiParameter::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CoordiParameter::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CoordiParameter::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CoordiParameter::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float CoordiParameter::z() const {
  // @@protoc_insertion_point(field_get:svaf.CoordiParameter.z)
  return z_;
}
inline void CoordiParameter::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:svaf.CoordiParameter.z)
}

// optional float a = 4 [default = 0];
inline bool CoordiParameter::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CoordiParameter::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CoordiParameter::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CoordiParameter::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline float CoordiParameter::a() const {
  // @@protoc_insertion_point(field_get:svaf.CoordiParameter.a)
  return a_;
}
inline void CoordiParameter::set_a(float value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:svaf.CoordiParameter.a)
}

// optional float b = 5 [default = 0];
inline bool CoordiParameter::has_b() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CoordiParameter::set_has_b() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CoordiParameter::clear_has_b() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CoordiParameter::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline float CoordiParameter::b() const {
  // @@protoc_insertion_point(field_get:svaf.CoordiParameter.b)
  return b_;
}
inline void CoordiParameter::set_b(float value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:svaf.CoordiParameter.b)
}

// optional float c = 6 [default = 0];
inline bool CoordiParameter::has_c() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CoordiParameter::set_has_c() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CoordiParameter::clear_has_c() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CoordiParameter::clear_c() {
  c_ = 0;
  clear_has_c();
}
inline float CoordiParameter::c() const {
  // @@protoc_insertion_point(field_get:svaf.CoordiParameter.c)
  return c_;
}
inline void CoordiParameter::set_c(float value) {
  set_has_c();
  c_ = value;
  // @@protoc_insertion_point(field_set:svaf.CoordiParameter.c)
}

// -------------------------------------------------------------------

// SACIAParameter

// optional int32 max_iter = 1 [default = 1000];
inline bool SACIAParameter::has_max_iter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SACIAParameter::set_has_max_iter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SACIAParameter::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SACIAParameter::clear_max_iter() {
  max_iter_ = 1000;
  clear_has_max_iter();
}
inline ::google::protobuf::int32 SACIAParameter::max_iter() const {
  // @@protoc_insertion_point(field_get:svaf.SACIAParameter.max_iter)
  return max_iter_;
}
inline void SACIAParameter::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:svaf.SACIAParameter.max_iter)
}

// optional float min_cors = 2 [default = 3];
inline bool SACIAParameter::has_min_cors() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SACIAParameter::set_has_min_cors() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SACIAParameter::clear_has_min_cors() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SACIAParameter::clear_min_cors() {
  min_cors_ = 3;
  clear_has_min_cors();
}
inline float SACIAParameter::min_cors() const {
  // @@protoc_insertion_point(field_get:svaf.SACIAParameter.min_cors)
  return min_cors_;
}
inline void SACIAParameter::set_min_cors(float value) {
  set_has_min_cors();
  min_cors_ = value;
  // @@protoc_insertion_point(field_set:svaf.SACIAParameter.min_cors)
}

// optional float max_cors = 3 [default = 1000];
inline bool SACIAParameter::has_max_cors() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SACIAParameter::set_has_max_cors() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SACIAParameter::clear_has_max_cors() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SACIAParameter::clear_max_cors() {
  max_cors_ = 1000;
  clear_has_max_cors();
}
inline float SACIAParameter::max_cors() const {
  // @@protoc_insertion_point(field_get:svaf.SACIAParameter.max_cors)
  return max_cors_;
}
inline void SACIAParameter::set_max_cors(float value) {
  set_has_max_cors();
  max_cors_ = value;
  // @@protoc_insertion_point(field_set:svaf.SACIAParameter.max_cors)
}

// optional float voxel_grid = 4 [default = 3];
inline bool SACIAParameter::has_voxel_grid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SACIAParameter::set_has_voxel_grid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SACIAParameter::clear_has_voxel_grid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SACIAParameter::clear_voxel_grid() {
  voxel_grid_ = 3;
  clear_has_voxel_grid();
}
inline float SACIAParameter::voxel_grid() const {
  // @@protoc_insertion_point(field_get:svaf.SACIAParameter.voxel_grid)
  return voxel_grid_;
}
inline void SACIAParameter::set_voxel_grid(float value) {
  set_has_voxel_grid();
  voxel_grid_ = value;
  // @@protoc_insertion_point(field_set:svaf.SACIAParameter.voxel_grid)
}

// optional float norm_rad = 5 [default = 20];
inline bool SACIAParameter::has_norm_rad() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SACIAParameter::set_has_norm_rad() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SACIAParameter::clear_has_norm_rad() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SACIAParameter::clear_norm_rad() {
  norm_rad_ = 20;
  clear_has_norm_rad();
}
inline float SACIAParameter::norm_rad() const {
  // @@protoc_insertion_point(field_get:svaf.SACIAParameter.norm_rad)
  return norm_rad_;
}
inline void SACIAParameter::set_norm_rad(float value) {
  set_has_norm_rad();
  norm_rad_ = value;
  // @@protoc_insertion_point(field_set:svaf.SACIAParameter.norm_rad)
}

// optional float feat_rad = 6 [default = 50];
inline bool SACIAParameter::has_feat_rad() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SACIAParameter::set_has_feat_rad() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SACIAParameter::clear_has_feat_rad() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SACIAParameter::clear_feat_rad() {
  feat_rad_ = 50;
  clear_has_feat_rad();
}
inline float SACIAParameter::feat_rad() const {
  // @@protoc_insertion_point(field_get:svaf.SACIAParameter.feat_rad)
  return feat_rad_;
}
inline void SACIAParameter::set_feat_rad(float value) {
  set_has_feat_rad();
  feat_rad_ = value;
  // @@protoc_insertion_point(field_set:svaf.SACIAParameter.feat_rad)
}

// -------------------------------------------------------------------

// SACIAEstimateParameter

// optional string pcd_filename = 1;
inline bool SACIAEstimateParameter::has_pcd_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SACIAEstimateParameter::set_has_pcd_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SACIAEstimateParameter::clear_has_pcd_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SACIAEstimateParameter::clear_pcd_filename() {
  if (pcd_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pcd_filename_->clear();
  }
  clear_has_pcd_filename();
}
inline const ::std::string& SACIAEstimateParameter::pcd_filename() const {
  // @@protoc_insertion_point(field_get:svaf.SACIAEstimateParameter.pcd_filename)
  return *pcd_filename_;
}
inline void SACIAEstimateParameter::set_pcd_filename(const ::std::string& value) {
  set_has_pcd_filename();
  if (pcd_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pcd_filename_ = new ::std::string;
  }
  pcd_filename_->assign(value);
  // @@protoc_insertion_point(field_set:svaf.SACIAEstimateParameter.pcd_filename)
}
inline void SACIAEstimateParameter::set_pcd_filename(const char* value) {
  set_has_pcd_filename();
  if (pcd_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pcd_filename_ = new ::std::string;
  }
  pcd_filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.SACIAEstimateParameter.pcd_filename)
}
inline void SACIAEstimateParameter::set_pcd_filename(const char* value, size_t size) {
  set_has_pcd_filename();
  if (pcd_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pcd_filename_ = new ::std::string;
  }
  pcd_filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.SACIAEstimateParameter.pcd_filename)
}
inline ::std::string* SACIAEstimateParameter::mutable_pcd_filename() {
  set_has_pcd_filename();
  if (pcd_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pcd_filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svaf.SACIAEstimateParameter.pcd_filename)
  return pcd_filename_;
}
inline ::std::string* SACIAEstimateParameter::release_pcd_filename() {
  clear_has_pcd_filename();
  if (pcd_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pcd_filename_;
    pcd_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SACIAEstimateParameter::set_allocated_pcd_filename(::std::string* pcd_filename) {
  if (pcd_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pcd_filename_;
  }
  if (pcd_filename) {
    set_has_pcd_filename();
    pcd_filename_ = pcd_filename;
  } else {
    clear_has_pcd_filename();
    pcd_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.SACIAEstimateParameter.pcd_filename)
}

// optional .svaf.SACIAParameter ia_param = 2;
inline bool SACIAEstimateParameter::has_ia_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SACIAEstimateParameter::set_has_ia_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SACIAEstimateParameter::clear_has_ia_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SACIAEstimateParameter::clear_ia_param() {
  if (ia_param_ != NULL) ia_param_->::svaf::SACIAParameter::Clear();
  clear_has_ia_param();
}
inline const ::svaf::SACIAParameter& SACIAEstimateParameter::ia_param() const {
  // @@protoc_insertion_point(field_get:svaf.SACIAEstimateParameter.ia_param)
  return ia_param_ != NULL ? *ia_param_ : *default_instance_->ia_param_;
}
inline ::svaf::SACIAParameter* SACIAEstimateParameter::mutable_ia_param() {
  set_has_ia_param();
  if (ia_param_ == NULL) ia_param_ = new ::svaf::SACIAParameter;
  // @@protoc_insertion_point(field_mutable:svaf.SACIAEstimateParameter.ia_param)
  return ia_param_;
}
inline ::svaf::SACIAParameter* SACIAEstimateParameter::release_ia_param() {
  clear_has_ia_param();
  ::svaf::SACIAParameter* temp = ia_param_;
  ia_param_ = NULL;
  return temp;
}
inline void SACIAEstimateParameter::set_allocated_ia_param(::svaf::SACIAParameter* ia_param) {
  delete ia_param_;
  ia_param_ = ia_param;
  if (ia_param) {
    set_has_ia_param();
  } else {
    clear_has_ia_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.SACIAEstimateParameter.ia_param)
}

// optional .svaf.CoordiParameter coor_param = 3;
inline bool SACIAEstimateParameter::has_coor_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SACIAEstimateParameter::set_has_coor_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SACIAEstimateParameter::clear_has_coor_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SACIAEstimateParameter::clear_coor_param() {
  if (coor_param_ != NULL) coor_param_->::svaf::CoordiParameter::Clear();
  clear_has_coor_param();
}
inline const ::svaf::CoordiParameter& SACIAEstimateParameter::coor_param() const {
  // @@protoc_insertion_point(field_get:svaf.SACIAEstimateParameter.coor_param)
  return coor_param_ != NULL ? *coor_param_ : *default_instance_->coor_param_;
}
inline ::svaf::CoordiParameter* SACIAEstimateParameter::mutable_coor_param() {
  set_has_coor_param();
  if (coor_param_ == NULL) coor_param_ = new ::svaf::CoordiParameter;
  // @@protoc_insertion_point(field_mutable:svaf.SACIAEstimateParameter.coor_param)
  return coor_param_;
}
inline ::svaf::CoordiParameter* SACIAEstimateParameter::release_coor_param() {
  clear_has_coor_param();
  ::svaf::CoordiParameter* temp = coor_param_;
  coor_param_ = NULL;
  return temp;
}
inline void SACIAEstimateParameter::set_allocated_coor_param(::svaf::CoordiParameter* coor_param) {
  delete coor_param_;
  coor_param_ = coor_param;
  if (coor_param) {
    set_has_coor_param();
  } else {
    clear_has_coor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.SACIAEstimateParameter.coor_param)
}

// -------------------------------------------------------------------

// ICPParameter

// optional int32 max_iter = 1 [default = 2];
inline bool ICPParameter::has_max_iter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ICPParameter::set_has_max_iter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ICPParameter::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ICPParameter::clear_max_iter() {
  max_iter_ = 2;
  clear_has_max_iter();
}
inline ::google::protobuf::int32 ICPParameter::max_iter() const {
  // @@protoc_insertion_point(field_get:svaf.ICPParameter.max_iter)
  return max_iter_;
}
inline void ICPParameter::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:svaf.ICPParameter.max_iter)
}

// optional float max_resp = 2 [default = 10];
inline bool ICPParameter::has_max_resp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ICPParameter::set_has_max_resp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ICPParameter::clear_has_max_resp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ICPParameter::clear_max_resp() {
  max_resp_ = 10;
  clear_has_max_resp();
}
inline float ICPParameter::max_resp() const {
  // @@protoc_insertion_point(field_get:svaf.ICPParameter.max_resp)
  return max_resp_;
}
inline void ICPParameter::set_max_resp(float value) {
  set_has_max_resp();
  max_resp_ = value;
  // @@protoc_insertion_point(field_set:svaf.ICPParameter.max_resp)
}

// optional float esp = 3 [default = 0.1];
inline bool ICPParameter::has_esp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ICPParameter::set_has_esp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ICPParameter::clear_has_esp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ICPParameter::clear_esp() {
  esp_ = 0.1f;
  clear_has_esp();
}
inline float ICPParameter::esp() const {
  // @@protoc_insertion_point(field_get:svaf.ICPParameter.esp)
  return esp_;
}
inline void ICPParameter::set_esp(float value) {
  set_has_esp();
  esp_ = value;
  // @@protoc_insertion_point(field_set:svaf.ICPParameter.esp)
}

// -------------------------------------------------------------------

// IAICPEstimateParameter

// optional string pcd_filename = 1;
inline bool IAICPEstimateParameter::has_pcd_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IAICPEstimateParameter::set_has_pcd_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IAICPEstimateParameter::clear_has_pcd_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IAICPEstimateParameter::clear_pcd_filename() {
  if (pcd_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pcd_filename_->clear();
  }
  clear_has_pcd_filename();
}
inline const ::std::string& IAICPEstimateParameter::pcd_filename() const {
  // @@protoc_insertion_point(field_get:svaf.IAICPEstimateParameter.pcd_filename)
  return *pcd_filename_;
}
inline void IAICPEstimateParameter::set_pcd_filename(const ::std::string& value) {
  set_has_pcd_filename();
  if (pcd_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pcd_filename_ = new ::std::string;
  }
  pcd_filename_->assign(value);
  // @@protoc_insertion_point(field_set:svaf.IAICPEstimateParameter.pcd_filename)
}
inline void IAICPEstimateParameter::set_pcd_filename(const char* value) {
  set_has_pcd_filename();
  if (pcd_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pcd_filename_ = new ::std::string;
  }
  pcd_filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.IAICPEstimateParameter.pcd_filename)
}
inline void IAICPEstimateParameter::set_pcd_filename(const char* value, size_t size) {
  set_has_pcd_filename();
  if (pcd_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pcd_filename_ = new ::std::string;
  }
  pcd_filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.IAICPEstimateParameter.pcd_filename)
}
inline ::std::string* IAICPEstimateParameter::mutable_pcd_filename() {
  set_has_pcd_filename();
  if (pcd_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pcd_filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svaf.IAICPEstimateParameter.pcd_filename)
  return pcd_filename_;
}
inline ::std::string* IAICPEstimateParameter::release_pcd_filename() {
  clear_has_pcd_filename();
  if (pcd_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pcd_filename_;
    pcd_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IAICPEstimateParameter::set_allocated_pcd_filename(::std::string* pcd_filename) {
  if (pcd_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pcd_filename_;
  }
  if (pcd_filename) {
    set_has_pcd_filename();
    pcd_filename_ = pcd_filename;
  } else {
    clear_has_pcd_filename();
    pcd_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.IAICPEstimateParameter.pcd_filename)
}

// optional .svaf.SACIAParameter sacia_param = 2;
inline bool IAICPEstimateParameter::has_sacia_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IAICPEstimateParameter::set_has_sacia_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IAICPEstimateParameter::clear_has_sacia_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IAICPEstimateParameter::clear_sacia_param() {
  if (sacia_param_ != NULL) sacia_param_->::svaf::SACIAParameter::Clear();
  clear_has_sacia_param();
}
inline const ::svaf::SACIAParameter& IAICPEstimateParameter::sacia_param() const {
  // @@protoc_insertion_point(field_get:svaf.IAICPEstimateParameter.sacia_param)
  return sacia_param_ != NULL ? *sacia_param_ : *default_instance_->sacia_param_;
}
inline ::svaf::SACIAParameter* IAICPEstimateParameter::mutable_sacia_param() {
  set_has_sacia_param();
  if (sacia_param_ == NULL) sacia_param_ = new ::svaf::SACIAParameter;
  // @@protoc_insertion_point(field_mutable:svaf.IAICPEstimateParameter.sacia_param)
  return sacia_param_;
}
inline ::svaf::SACIAParameter* IAICPEstimateParameter::release_sacia_param() {
  clear_has_sacia_param();
  ::svaf::SACIAParameter* temp = sacia_param_;
  sacia_param_ = NULL;
  return temp;
}
inline void IAICPEstimateParameter::set_allocated_sacia_param(::svaf::SACIAParameter* sacia_param) {
  delete sacia_param_;
  sacia_param_ = sacia_param;
  if (sacia_param) {
    set_has_sacia_param();
  } else {
    clear_has_sacia_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.IAICPEstimateParameter.sacia_param)
}

// optional .svaf.ICPParameter icp_param = 3;
inline bool IAICPEstimateParameter::has_icp_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IAICPEstimateParameter::set_has_icp_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IAICPEstimateParameter::clear_has_icp_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IAICPEstimateParameter::clear_icp_param() {
  if (icp_param_ != NULL) icp_param_->::svaf::ICPParameter::Clear();
  clear_has_icp_param();
}
inline const ::svaf::ICPParameter& IAICPEstimateParameter::icp_param() const {
  // @@protoc_insertion_point(field_get:svaf.IAICPEstimateParameter.icp_param)
  return icp_param_ != NULL ? *icp_param_ : *default_instance_->icp_param_;
}
inline ::svaf::ICPParameter* IAICPEstimateParameter::mutable_icp_param() {
  set_has_icp_param();
  if (icp_param_ == NULL) icp_param_ = new ::svaf::ICPParameter;
  // @@protoc_insertion_point(field_mutable:svaf.IAICPEstimateParameter.icp_param)
  return icp_param_;
}
inline ::svaf::ICPParameter* IAICPEstimateParameter::release_icp_param() {
  clear_has_icp_param();
  ::svaf::ICPParameter* temp = icp_param_;
  icp_param_ = NULL;
  return temp;
}
inline void IAICPEstimateParameter::set_allocated_icp_param(::svaf::ICPParameter* icp_param) {
  delete icp_param_;
  icp_param_ = icp_param;
  if (icp_param) {
    set_has_icp_param();
  } else {
    clear_has_icp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.IAICPEstimateParameter.icp_param)
}

// optional .svaf.CoordiParameter coor_param = 4;
inline bool IAICPEstimateParameter::has_coor_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IAICPEstimateParameter::set_has_coor_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IAICPEstimateParameter::clear_has_coor_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IAICPEstimateParameter::clear_coor_param() {
  if (coor_param_ != NULL) coor_param_->::svaf::CoordiParameter::Clear();
  clear_has_coor_param();
}
inline const ::svaf::CoordiParameter& IAICPEstimateParameter::coor_param() const {
  // @@protoc_insertion_point(field_get:svaf.IAICPEstimateParameter.coor_param)
  return coor_param_ != NULL ? *coor_param_ : *default_instance_->coor_param_;
}
inline ::svaf::CoordiParameter* IAICPEstimateParameter::mutable_coor_param() {
  set_has_coor_param();
  if (coor_param_ == NULL) coor_param_ = new ::svaf::CoordiParameter;
  // @@protoc_insertion_point(field_mutable:svaf.IAICPEstimateParameter.coor_param)
  return coor_param_;
}
inline ::svaf::CoordiParameter* IAICPEstimateParameter::release_coor_param() {
  clear_has_coor_param();
  ::svaf::CoordiParameter* temp = coor_param_;
  coor_param_ = NULL;
  return temp;
}
inline void IAICPEstimateParameter::set_allocated_coor_param(::svaf::CoordiParameter* coor_param) {
  delete coor_param_;
  coor_param_ = coor_param;
  if (coor_param) {
    set_has_coor_param();
  } else {
    clear_has_coor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.IAICPEstimateParameter.coor_param)
}

// -------------------------------------------------------------------

// NDTParameter

// optional int32 max_iter = 1 [default = 100];
inline bool NDTParameter::has_max_iter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NDTParameter::set_has_max_iter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NDTParameter::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NDTParameter::clear_max_iter() {
  max_iter_ = 100;
  clear_has_max_iter();
}
inline ::google::protobuf::int32 NDTParameter::max_iter() const {
  // @@protoc_insertion_point(field_get:svaf.NDTParameter.max_iter)
  return max_iter_;
}
inline void NDTParameter::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:svaf.NDTParameter.max_iter)
}

// optional float step_size = 2 [default = 10];
inline bool NDTParameter::has_step_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NDTParameter::set_has_step_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NDTParameter::clear_has_step_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NDTParameter::clear_step_size() {
  step_size_ = 10;
  clear_has_step_size();
}
inline float NDTParameter::step_size() const {
  // @@protoc_insertion_point(field_get:svaf.NDTParameter.step_size)
  return step_size_;
}
inline void NDTParameter::set_step_size(float value) {
  set_has_step_size();
  step_size_ = value;
  // @@protoc_insertion_point(field_set:svaf.NDTParameter.step_size)
}

// optional float resolution = 3 [default = 10];
inline bool NDTParameter::has_resolution() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NDTParameter::set_has_resolution() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NDTParameter::clear_has_resolution() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NDTParameter::clear_resolution() {
  resolution_ = 10;
  clear_has_resolution();
}
inline float NDTParameter::resolution() const {
  // @@protoc_insertion_point(field_get:svaf.NDTParameter.resolution)
  return resolution_;
}
inline void NDTParameter::set_resolution(float value) {
  set_has_resolution();
  resolution_ = value;
  // @@protoc_insertion_point(field_set:svaf.NDTParameter.resolution)
}

// optional float esp = 4 [default = 0.1];
inline bool NDTParameter::has_esp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NDTParameter::set_has_esp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NDTParameter::clear_has_esp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NDTParameter::clear_esp() {
  esp_ = 0.1f;
  clear_has_esp();
}
inline float NDTParameter::esp() const {
  // @@protoc_insertion_point(field_get:svaf.NDTParameter.esp)
  return esp_;
}
inline void NDTParameter::set_esp(float value) {
  set_has_esp();
  esp_ = value;
  // @@protoc_insertion_point(field_set:svaf.NDTParameter.esp)
}

// -------------------------------------------------------------------

// IANDTEstimateParameter

// optional string pcd_filename = 1;
inline bool IANDTEstimateParameter::has_pcd_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IANDTEstimateParameter::set_has_pcd_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IANDTEstimateParameter::clear_has_pcd_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IANDTEstimateParameter::clear_pcd_filename() {
  if (pcd_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pcd_filename_->clear();
  }
  clear_has_pcd_filename();
}
inline const ::std::string& IANDTEstimateParameter::pcd_filename() const {
  // @@protoc_insertion_point(field_get:svaf.IANDTEstimateParameter.pcd_filename)
  return *pcd_filename_;
}
inline void IANDTEstimateParameter::set_pcd_filename(const ::std::string& value) {
  set_has_pcd_filename();
  if (pcd_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pcd_filename_ = new ::std::string;
  }
  pcd_filename_->assign(value);
  // @@protoc_insertion_point(field_set:svaf.IANDTEstimateParameter.pcd_filename)
}
inline void IANDTEstimateParameter::set_pcd_filename(const char* value) {
  set_has_pcd_filename();
  if (pcd_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pcd_filename_ = new ::std::string;
  }
  pcd_filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.IANDTEstimateParameter.pcd_filename)
}
inline void IANDTEstimateParameter::set_pcd_filename(const char* value, size_t size) {
  set_has_pcd_filename();
  if (pcd_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pcd_filename_ = new ::std::string;
  }
  pcd_filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.IANDTEstimateParameter.pcd_filename)
}
inline ::std::string* IANDTEstimateParameter::mutable_pcd_filename() {
  set_has_pcd_filename();
  if (pcd_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pcd_filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svaf.IANDTEstimateParameter.pcd_filename)
  return pcd_filename_;
}
inline ::std::string* IANDTEstimateParameter::release_pcd_filename() {
  clear_has_pcd_filename();
  if (pcd_filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pcd_filename_;
    pcd_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void IANDTEstimateParameter::set_allocated_pcd_filename(::std::string* pcd_filename) {
  if (pcd_filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pcd_filename_;
  }
  if (pcd_filename) {
    set_has_pcd_filename();
    pcd_filename_ = pcd_filename;
  } else {
    clear_has_pcd_filename();
    pcd_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.IANDTEstimateParameter.pcd_filename)
}

// optional .svaf.SACIAParameter sacia_param = 2;
inline bool IANDTEstimateParameter::has_sacia_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IANDTEstimateParameter::set_has_sacia_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IANDTEstimateParameter::clear_has_sacia_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IANDTEstimateParameter::clear_sacia_param() {
  if (sacia_param_ != NULL) sacia_param_->::svaf::SACIAParameter::Clear();
  clear_has_sacia_param();
}
inline const ::svaf::SACIAParameter& IANDTEstimateParameter::sacia_param() const {
  // @@protoc_insertion_point(field_get:svaf.IANDTEstimateParameter.sacia_param)
  return sacia_param_ != NULL ? *sacia_param_ : *default_instance_->sacia_param_;
}
inline ::svaf::SACIAParameter* IANDTEstimateParameter::mutable_sacia_param() {
  set_has_sacia_param();
  if (sacia_param_ == NULL) sacia_param_ = new ::svaf::SACIAParameter;
  // @@protoc_insertion_point(field_mutable:svaf.IANDTEstimateParameter.sacia_param)
  return sacia_param_;
}
inline ::svaf::SACIAParameter* IANDTEstimateParameter::release_sacia_param() {
  clear_has_sacia_param();
  ::svaf::SACIAParameter* temp = sacia_param_;
  sacia_param_ = NULL;
  return temp;
}
inline void IANDTEstimateParameter::set_allocated_sacia_param(::svaf::SACIAParameter* sacia_param) {
  delete sacia_param_;
  sacia_param_ = sacia_param;
  if (sacia_param) {
    set_has_sacia_param();
  } else {
    clear_has_sacia_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.IANDTEstimateParameter.sacia_param)
}

// optional .svaf.NDTParameter ndt_param = 3;
inline bool IANDTEstimateParameter::has_ndt_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IANDTEstimateParameter::set_has_ndt_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IANDTEstimateParameter::clear_has_ndt_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IANDTEstimateParameter::clear_ndt_param() {
  if (ndt_param_ != NULL) ndt_param_->::svaf::NDTParameter::Clear();
  clear_has_ndt_param();
}
inline const ::svaf::NDTParameter& IANDTEstimateParameter::ndt_param() const {
  // @@protoc_insertion_point(field_get:svaf.IANDTEstimateParameter.ndt_param)
  return ndt_param_ != NULL ? *ndt_param_ : *default_instance_->ndt_param_;
}
inline ::svaf::NDTParameter* IANDTEstimateParameter::mutable_ndt_param() {
  set_has_ndt_param();
  if (ndt_param_ == NULL) ndt_param_ = new ::svaf::NDTParameter;
  // @@protoc_insertion_point(field_mutable:svaf.IANDTEstimateParameter.ndt_param)
  return ndt_param_;
}
inline ::svaf::NDTParameter* IANDTEstimateParameter::release_ndt_param() {
  clear_has_ndt_param();
  ::svaf::NDTParameter* temp = ndt_param_;
  ndt_param_ = NULL;
  return temp;
}
inline void IANDTEstimateParameter::set_allocated_ndt_param(::svaf::NDTParameter* ndt_param) {
  delete ndt_param_;
  ndt_param_ = ndt_param;
  if (ndt_param) {
    set_has_ndt_param();
  } else {
    clear_has_ndt_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.IANDTEstimateParameter.ndt_param)
}

// optional .svaf.CoordiParameter coor_param = 4;
inline bool IANDTEstimateParameter::has_coor_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IANDTEstimateParameter::set_has_coor_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void IANDTEstimateParameter::clear_has_coor_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void IANDTEstimateParameter::clear_coor_param() {
  if (coor_param_ != NULL) coor_param_->::svaf::CoordiParameter::Clear();
  clear_has_coor_param();
}
inline const ::svaf::CoordiParameter& IANDTEstimateParameter::coor_param() const {
  // @@protoc_insertion_point(field_get:svaf.IANDTEstimateParameter.coor_param)
  return coor_param_ != NULL ? *coor_param_ : *default_instance_->coor_param_;
}
inline ::svaf::CoordiParameter* IANDTEstimateParameter::mutable_coor_param() {
  set_has_coor_param();
  if (coor_param_ == NULL) coor_param_ = new ::svaf::CoordiParameter;
  // @@protoc_insertion_point(field_mutable:svaf.IANDTEstimateParameter.coor_param)
  return coor_param_;
}
inline ::svaf::CoordiParameter* IANDTEstimateParameter::release_coor_param() {
  clear_has_coor_param();
  ::svaf::CoordiParameter* temp = coor_param_;
  coor_param_ = NULL;
  return temp;
}
inline void IANDTEstimateParameter::set_allocated_coor_param(::svaf::CoordiParameter* coor_param) {
  delete coor_param_;
  coor_param_ = coor_param;
  if (coor_param) {
    set_has_coor_param();
  } else {
    clear_has_coor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.IANDTEstimateParameter.coor_param)
}

// -------------------------------------------------------------------

// LayerParameter

// optional string name = 1;
inline bool LayerParameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayerParameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayerParameter::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LayerParameter::name() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.name)
  return *name_;
}
inline void LayerParameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:svaf.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.LayerParameter.name)
}
inline void LayerParameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.LayerParameter.name)
}
inline ::std::string* LayerParameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.name)
  return name_;
}
inline ::std::string* LayerParameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerParameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.name)
}

// optional string bottom = 2;
inline bool LayerParameter::has_bottom() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_bottom() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayerParameter::clear_has_bottom() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayerParameter::clear_bottom() {
  if (bottom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bottom_->clear();
  }
  clear_has_bottom();
}
inline const ::std::string& LayerParameter::bottom() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.bottom)
  return *bottom_;
}
inline void LayerParameter::set_bottom(const ::std::string& value) {
  set_has_bottom();
  if (bottom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bottom_ = new ::std::string;
  }
  bottom_->assign(value);
  // @@protoc_insertion_point(field_set:svaf.LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(const char* value) {
  set_has_bottom();
  if (bottom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bottom_ = new ::std::string;
  }
  bottom_->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.LayerParameter.bottom)
}
inline void LayerParameter::set_bottom(const char* value, size_t size) {
  set_has_bottom();
  if (bottom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bottom_ = new ::std::string;
  }
  bottom_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.LayerParameter.bottom)
}
inline ::std::string* LayerParameter::mutable_bottom() {
  set_has_bottom();
  if (bottom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bottom_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.bottom)
  return bottom_;
}
inline ::std::string* LayerParameter::release_bottom() {
  clear_has_bottom();
  if (bottom_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bottom_;
    bottom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerParameter::set_allocated_bottom(::std::string* bottom) {
  if (bottom_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bottom_;
  }
  if (bottom) {
    set_has_bottom();
    bottom_ = bottom;
  } else {
    clear_has_bottom();
    bottom_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.bottom)
}

// optional string top = 3;
inline bool LayerParameter::has_top() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_top() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LayerParameter::clear_has_top() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LayerParameter::clear_top() {
  if (top_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    top_->clear();
  }
  clear_has_top();
}
inline const ::std::string& LayerParameter::top() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.top)
  return *top_;
}
inline void LayerParameter::set_top(const ::std::string& value) {
  set_has_top();
  if (top_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    top_ = new ::std::string;
  }
  top_->assign(value);
  // @@protoc_insertion_point(field_set:svaf.LayerParameter.top)
}
inline void LayerParameter::set_top(const char* value) {
  set_has_top();
  if (top_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    top_ = new ::std::string;
  }
  top_->assign(value);
  // @@protoc_insertion_point(field_set_char:svaf.LayerParameter.top)
}
inline void LayerParameter::set_top(const char* value, size_t size) {
  set_has_top();
  if (top_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    top_ = new ::std::string;
  }
  top_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svaf.LayerParameter.top)
}
inline ::std::string* LayerParameter::mutable_top() {
  set_has_top();
  if (top_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    top_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.top)
  return top_;
}
inline ::std::string* LayerParameter::release_top() {
  clear_has_top();
  if (top_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = top_;
    top_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LayerParameter::set_allocated_top(::std::string* top) {
  if (top_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete top_;
  }
  if (top) {
    set_has_top();
    top_ = top;
  } else {
    clear_has_top();
    top_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.top)
}

// optional bool show = 4 [default = false];
inline bool LayerParameter::has_show() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_show() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LayerParameter::clear_has_show() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LayerParameter::clear_show() {
  show_ = false;
  clear_has_show();
}
inline bool LayerParameter::show() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.show)
  return show_;
}
inline void LayerParameter::set_show(bool value) {
  set_has_show();
  show_ = value;
  // @@protoc_insertion_point(field_set:svaf.LayerParameter.show)
}

// optional bool save = 5 [default = false];
inline bool LayerParameter::has_save() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_save() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LayerParameter::clear_has_save() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LayerParameter::clear_save() {
  save_ = false;
  clear_has_save();
}
inline bool LayerParameter::save() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.save)
  return save_;
}
inline void LayerParameter::set_save(bool value) {
  set_has_save();
  save_ = value;
  // @@protoc_insertion_point(field_set:svaf.LayerParameter.save)
}

// optional bool logt = 6 [default = false];
inline bool LayerParameter::has_logt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_logt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LayerParameter::clear_has_logt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LayerParameter::clear_logt() {
  logt_ = false;
  clear_has_logt();
}
inline bool LayerParameter::logt() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.logt)
  return logt_;
}
inline void LayerParameter::set_logt(bool value) {
  set_has_logt();
  logt_ = value;
  // @@protoc_insertion_point(field_set:svaf.LayerParameter.logt)
}

// optional bool logi = 7 [default = false];
inline bool LayerParameter::has_logi() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_logi() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LayerParameter::clear_has_logi() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LayerParameter::clear_logi() {
  logi_ = false;
  clear_has_logi();
}
inline bool LayerParameter::logi() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.logi)
  return logi_;
}
inline void LayerParameter::set_logi(bool value) {
  set_has_logi();
  logi_ = value;
  // @@protoc_insertion_point(field_set:svaf.LayerParameter.logi)
}

// optional .svaf.LayerParameter.LayerType type = 10;
inline bool LayerParameter::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LayerParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LayerParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::svaf::LayerParameter_LayerType LayerParameter::type() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.type)
  return static_cast< ::svaf::LayerParameter_LayerType >(type_);
}
inline void LayerParameter::set_type(::svaf::LayerParameter_LayerType value) {
  assert(::svaf::LayerParameter_LayerType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:svaf.LayerParameter.type)
}

// optional .svaf.ImageOperationParameter imageop_param = 200;
inline bool LayerParameter::has_imageop_param() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_imageop_param() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LayerParameter::clear_has_imageop_param() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LayerParameter::clear_imageop_param() {
  if (imageop_param_ != NULL) imageop_param_->::svaf::ImageOperationParameter::Clear();
  clear_has_imageop_param();
}
inline const ::svaf::ImageOperationParameter& LayerParameter::imageop_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.imageop_param)
  return imageop_param_ != NULL ? *imageop_param_ : *default_instance_->imageop_param_;
}
inline ::svaf::ImageOperationParameter* LayerParameter::mutable_imageop_param() {
  set_has_imageop_param();
  if (imageop_param_ == NULL) imageop_param_ = new ::svaf::ImageOperationParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.imageop_param)
  return imageop_param_;
}
inline ::svaf::ImageOperationParameter* LayerParameter::release_imageop_param() {
  clear_has_imageop_param();
  ::svaf::ImageOperationParameter* temp = imageop_param_;
  imageop_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_imageop_param(::svaf::ImageOperationParameter* imageop_param) {
  delete imageop_param_;
  imageop_param_ = imageop_param;
  if (imageop_param) {
    set_has_imageop_param();
  } else {
    clear_has_imageop_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.imageop_param)
}

// optional .svaf.SuperPixelSegmentParameter supix_param = 201;
inline bool LayerParameter::has_supix_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_supix_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LayerParameter::clear_has_supix_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LayerParameter::clear_supix_param() {
  if (supix_param_ != NULL) supix_param_->::svaf::SuperPixelSegmentParameter::Clear();
  clear_has_supix_param();
}
inline const ::svaf::SuperPixelSegmentParameter& LayerParameter::supix_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.supix_param)
  return supix_param_ != NULL ? *supix_param_ : *default_instance_->supix_param_;
}
inline ::svaf::SuperPixelSegmentParameter* LayerParameter::mutable_supix_param() {
  set_has_supix_param();
  if (supix_param_ == NULL) supix_param_ = new ::svaf::SuperPixelSegmentParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.supix_param)
  return supix_param_;
}
inline ::svaf::SuperPixelSegmentParameter* LayerParameter::release_supix_param() {
  clear_has_supix_param();
  ::svaf::SuperPixelSegmentParameter* temp = supix_param_;
  supix_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_supix_param(::svaf::SuperPixelSegmentParameter* supix_param) {
  delete supix_param_;
  supix_param_ = supix_param;
  if (supix_param) {
    set_has_supix_param();
  } else {
    clear_has_supix_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.supix_param)
}

// optional .svaf.ImageResizeParameter resize_param = 202;
inline bool LayerParameter::has_resize_param() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LayerParameter::set_has_resize_param() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LayerParameter::clear_has_resize_param() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LayerParameter::clear_resize_param() {
  if (resize_param_ != NULL) resize_param_->::svaf::ImageResizeParameter::Clear();
  clear_has_resize_param();
}
inline const ::svaf::ImageResizeParameter& LayerParameter::resize_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.resize_param)
  return resize_param_ != NULL ? *resize_param_ : *default_instance_->resize_param_;
}
inline ::svaf::ImageResizeParameter* LayerParameter::mutable_resize_param() {
  set_has_resize_param();
  if (resize_param_ == NULL) resize_param_ = new ::svaf::ImageResizeParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.resize_param)
  return resize_param_;
}
inline ::svaf::ImageResizeParameter* LayerParameter::release_resize_param() {
  clear_has_resize_param();
  ::svaf::ImageResizeParameter* temp = resize_param_;
  resize_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_resize_param(::svaf::ImageResizeParameter* resize_param) {
  delete resize_param_;
  resize_param_ = resize_param;
  if (resize_param) {
    set_has_resize_param();
  } else {
    clear_has_resize_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.resize_param)
}

// optional .svaf.ImageCropParameter crop_param = 203;
inline bool LayerParameter::has_crop_param() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_crop_param() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LayerParameter::clear_has_crop_param() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LayerParameter::clear_crop_param() {
  if (crop_param_ != NULL) crop_param_->::svaf::ImageCropParameter::Clear();
  clear_has_crop_param();
}
inline const ::svaf::ImageCropParameter& LayerParameter::crop_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.crop_param)
  return crop_param_ != NULL ? *crop_param_ : *default_instance_->crop_param_;
}
inline ::svaf::ImageCropParameter* LayerParameter::mutable_crop_param() {
  set_has_crop_param();
  if (crop_param_ == NULL) crop_param_ = new ::svaf::ImageCropParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.crop_param)
  return crop_param_;
}
inline ::svaf::ImageCropParameter* LayerParameter::release_crop_param() {
  clear_has_crop_param();
  ::svaf::ImageCropParameter* temp = crop_param_;
  crop_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_crop_param(::svaf::ImageCropParameter* crop_param) {
  delete crop_param_;
  crop_param_ = crop_param;
  if (crop_param) {
    set_has_crop_param();
  } else {
    clear_has_crop_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.crop_param)
}

// optional .svaf.StereoOperationParameter stereoop_param = 240;
inline bool LayerParameter::has_stereoop_param() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_stereoop_param() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LayerParameter::clear_has_stereoop_param() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LayerParameter::clear_stereoop_param() {
  if (stereoop_param_ != NULL) stereoop_param_->::svaf::StereoOperationParameter::Clear();
  clear_has_stereoop_param();
}
inline const ::svaf::StereoOperationParameter& LayerParameter::stereoop_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.stereoop_param)
  return stereoop_param_ != NULL ? *stereoop_param_ : *default_instance_->stereoop_param_;
}
inline ::svaf::StereoOperationParameter* LayerParameter::mutable_stereoop_param() {
  set_has_stereoop_param();
  if (stereoop_param_ == NULL) stereoop_param_ = new ::svaf::StereoOperationParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.stereoop_param)
  return stereoop_param_;
}
inline ::svaf::StereoOperationParameter* LayerParameter::release_stereoop_param() {
  clear_has_stereoop_param();
  ::svaf::StereoOperationParameter* temp = stereoop_param_;
  stereoop_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_stereoop_param(::svaf::StereoOperationParameter* stereoop_param) {
  delete stereoop_param_;
  stereoop_param_ = stereoop_param;
  if (stereoop_param) {
    set_has_stereoop_param();
  } else {
    clear_has_stereoop_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.stereoop_param)
}

// optional .svaf.StereoRectifyParameter rectify_param = 241;
inline bool LayerParameter::has_rectify_param() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_rectify_param() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LayerParameter::clear_has_rectify_param() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LayerParameter::clear_rectify_param() {
  if (rectify_param_ != NULL) rectify_param_->::svaf::StereoRectifyParameter::Clear();
  clear_has_rectify_param();
}
inline const ::svaf::StereoRectifyParameter& LayerParameter::rectify_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.rectify_param)
  return rectify_param_ != NULL ? *rectify_param_ : *default_instance_->rectify_param_;
}
inline ::svaf::StereoRectifyParameter* LayerParameter::mutable_rectify_param() {
  set_has_rectify_param();
  if (rectify_param_ == NULL) rectify_param_ = new ::svaf::StereoRectifyParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.rectify_param)
  return rectify_param_;
}
inline ::svaf::StereoRectifyParameter* LayerParameter::release_rectify_param() {
  clear_has_rectify_param();
  ::svaf::StereoRectifyParameter* temp = rectify_param_;
  rectify_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_rectify_param(::svaf::StereoRectifyParameter* rectify_param) {
  delete rectify_param_;
  rectify_param_ = rectify_param;
  if (rectify_param) {
    set_has_rectify_param();
  } else {
    clear_has_rectify_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.rectify_param)
}

// optional .svaf.DataParameter data_param = 100;
inline bool LayerParameter::has_data_param() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_data_param() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LayerParameter::clear_has_data_param() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LayerParameter::clear_data_param() {
  if (data_param_ != NULL) data_param_->::svaf::DataParameter::Clear();
  clear_has_data_param();
}
inline const ::svaf::DataParameter& LayerParameter::data_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.data_param)
  return data_param_ != NULL ? *data_param_ : *default_instance_->data_param_;
}
inline ::svaf::DataParameter* LayerParameter::mutable_data_param() {
  set_has_data_param();
  if (data_param_ == NULL) data_param_ = new ::svaf::DataParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.data_param)
  return data_param_;
}
inline ::svaf::DataParameter* LayerParameter::release_data_param() {
  clear_has_data_param();
  ::svaf::DataParameter* temp = data_param_;
  data_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_data_param(::svaf::DataParameter* data_param) {
  delete data_param_;
  data_param_ = data_param;
  if (data_param) {
    set_has_data_param();
  } else {
    clear_has_data_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.data_param)
}

// optional .svaf.ImageDataParameter imagedata_param = 101;
inline bool LayerParameter::has_imagedata_param() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_imagedata_param() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LayerParameter::clear_has_imagedata_param() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LayerParameter::clear_imagedata_param() {
  if (imagedata_param_ != NULL) imagedata_param_->::svaf::ImageDataParameter::Clear();
  clear_has_imagedata_param();
}
inline const ::svaf::ImageDataParameter& LayerParameter::imagedata_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.imagedata_param)
  return imagedata_param_ != NULL ? *imagedata_param_ : *default_instance_->imagedata_param_;
}
inline ::svaf::ImageDataParameter* LayerParameter::mutable_imagedata_param() {
  set_has_imagedata_param();
  if (imagedata_param_ == NULL) imagedata_param_ = new ::svaf::ImageDataParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.imagedata_param)
  return imagedata_param_;
}
inline ::svaf::ImageDataParameter* LayerParameter::release_imagedata_param() {
  clear_has_imagedata_param();
  ::svaf::ImageDataParameter* temp = imagedata_param_;
  imagedata_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_imagedata_param(::svaf::ImageDataParameter* imagedata_param) {
  delete imagedata_param_;
  imagedata_param_ = imagedata_param;
  if (imagedata_param) {
    set_has_imagedata_param();
  } else {
    clear_has_imagedata_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.imagedata_param)
}

// optional .svaf.ImagePairParameter imagepair_param = 102;
inline bool LayerParameter::has_imagepair_param() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_imagepair_param() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LayerParameter::clear_has_imagepair_param() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LayerParameter::clear_imagepair_param() {
  if (imagepair_param_ != NULL) imagepair_param_->::svaf::ImagePairParameter::Clear();
  clear_has_imagepair_param();
}
inline const ::svaf::ImagePairParameter& LayerParameter::imagepair_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.imagepair_param)
  return imagepair_param_ != NULL ? *imagepair_param_ : *default_instance_->imagepair_param_;
}
inline ::svaf::ImagePairParameter* LayerParameter::mutable_imagepair_param() {
  set_has_imagepair_param();
  if (imagepair_param_ == NULL) imagepair_param_ = new ::svaf::ImagePairParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.imagepair_param)
  return imagepair_param_;
}
inline ::svaf::ImagePairParameter* LayerParameter::release_imagepair_param() {
  clear_has_imagepair_param();
  ::svaf::ImagePairParameter* temp = imagepair_param_;
  imagepair_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_imagepair_param(::svaf::ImagePairParameter* imagepair_param) {
  delete imagepair_param_;
  imagepair_param_ = imagepair_param;
  if (imagepair_param) {
    set_has_imagepair_param();
  } else {
    clear_has_imagepair_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.imagepair_param)
}

// optional .svaf.VideoDataParameter videodata_param = 103;
inline bool LayerParameter::has_videodata_param() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_videodata_param() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LayerParameter::clear_has_videodata_param() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LayerParameter::clear_videodata_param() {
  if (videodata_param_ != NULL) videodata_param_->::svaf::VideoDataParameter::Clear();
  clear_has_videodata_param();
}
inline const ::svaf::VideoDataParameter& LayerParameter::videodata_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.videodata_param)
  return videodata_param_ != NULL ? *videodata_param_ : *default_instance_->videodata_param_;
}
inline ::svaf::VideoDataParameter* LayerParameter::mutable_videodata_param() {
  set_has_videodata_param();
  if (videodata_param_ == NULL) videodata_param_ = new ::svaf::VideoDataParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.videodata_param)
  return videodata_param_;
}
inline ::svaf::VideoDataParameter* LayerParameter::release_videodata_param() {
  clear_has_videodata_param();
  ::svaf::VideoDataParameter* temp = videodata_param_;
  videodata_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_videodata_param(::svaf::VideoDataParameter* videodata_param) {
  delete videodata_param_;
  videodata_param_ = videodata_param;
  if (videodata_param) {
    set_has_videodata_param();
  } else {
    clear_has_videodata_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.videodata_param)
}

// optional .svaf.VideoPairParameter videopair_param = 104;
inline bool LayerParameter::has_videopair_param() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_videopair_param() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LayerParameter::clear_has_videopair_param() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LayerParameter::clear_videopair_param() {
  if (videopair_param_ != NULL) videopair_param_->::svaf::VideoPairParameter::Clear();
  clear_has_videopair_param();
}
inline const ::svaf::VideoPairParameter& LayerParameter::videopair_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.videopair_param)
  return videopair_param_ != NULL ? *videopair_param_ : *default_instance_->videopair_param_;
}
inline ::svaf::VideoPairParameter* LayerParameter::mutable_videopair_param() {
  set_has_videopair_param();
  if (videopair_param_ == NULL) videopair_param_ = new ::svaf::VideoPairParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.videopair_param)
  return videopair_param_;
}
inline ::svaf::VideoPairParameter* LayerParameter::release_videopair_param() {
  clear_has_videopair_param();
  ::svaf::VideoPairParameter* temp = videopair_param_;
  videopair_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_videopair_param(::svaf::VideoPairParameter* videopair_param) {
  delete videopair_param_;
  videopair_param_ = videopair_param;
  if (videopair_param) {
    set_has_videopair_param();
  } else {
    clear_has_videopair_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.videopair_param)
}

// optional .svaf.CameraDataParameter cameradata_param = 105;
inline bool LayerParameter::has_cameradata_param() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_cameradata_param() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LayerParameter::clear_has_cameradata_param() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LayerParameter::clear_cameradata_param() {
  if (cameradata_param_ != NULL) cameradata_param_->::svaf::CameraDataParameter::Clear();
  clear_has_cameradata_param();
}
inline const ::svaf::CameraDataParameter& LayerParameter::cameradata_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.cameradata_param)
  return cameradata_param_ != NULL ? *cameradata_param_ : *default_instance_->cameradata_param_;
}
inline ::svaf::CameraDataParameter* LayerParameter::mutable_cameradata_param() {
  set_has_cameradata_param();
  if (cameradata_param_ == NULL) cameradata_param_ = new ::svaf::CameraDataParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.cameradata_param)
  return cameradata_param_;
}
inline ::svaf::CameraDataParameter* LayerParameter::release_cameradata_param() {
  clear_has_cameradata_param();
  ::svaf::CameraDataParameter* temp = cameradata_param_;
  cameradata_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_cameradata_param(::svaf::CameraDataParameter* cameradata_param) {
  delete cameradata_param_;
  cameradata_param_ = cameradata_param;
  if (cameradata_param) {
    set_has_cameradata_param();
  } else {
    clear_has_cameradata_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.cameradata_param)
}

// optional .svaf.CameraPairParameter camerapair_param = 106;
inline bool LayerParameter::has_camerapair_param() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_camerapair_param() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LayerParameter::clear_has_camerapair_param() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LayerParameter::clear_camerapair_param() {
  if (camerapair_param_ != NULL) camerapair_param_->::svaf::CameraPairParameter::Clear();
  clear_has_camerapair_param();
}
inline const ::svaf::CameraPairParameter& LayerParameter::camerapair_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.camerapair_param)
  return camerapair_param_ != NULL ? *camerapair_param_ : *default_instance_->camerapair_param_;
}
inline ::svaf::CameraPairParameter* LayerParameter::mutable_camerapair_param() {
  set_has_camerapair_param();
  if (camerapair_param_ == NULL) camerapair_param_ = new ::svaf::CameraPairParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.camerapair_param)
  return camerapair_param_;
}
inline ::svaf::CameraPairParameter* LayerParameter::release_camerapair_param() {
  clear_has_camerapair_param();
  ::svaf::CameraPairParameter* temp = camerapair_param_;
  camerapair_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_camerapair_param(::svaf::CameraPairParameter* camerapair_param) {
  delete camerapair_param_;
  camerapair_param_ = camerapair_param;
  if (camerapair_param) {
    set_has_camerapair_param();
  } else {
    clear_has_camerapair_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.camerapair_param)
}

// optional .svaf.DSPCameraDataParameter dspcameradata_param = 107;
inline bool LayerParameter::has_dspcameradata_param() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_dspcameradata_param() {
  _has_bits_[0] |= 0x00200000u;
}
inline void LayerParameter::clear_has_dspcameradata_param() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void LayerParameter::clear_dspcameradata_param() {
  if (dspcameradata_param_ != NULL) dspcameradata_param_->::svaf::DSPCameraDataParameter::Clear();
  clear_has_dspcameradata_param();
}
inline const ::svaf::DSPCameraDataParameter& LayerParameter::dspcameradata_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.dspcameradata_param)
  return dspcameradata_param_ != NULL ? *dspcameradata_param_ : *default_instance_->dspcameradata_param_;
}
inline ::svaf::DSPCameraDataParameter* LayerParameter::mutable_dspcameradata_param() {
  set_has_dspcameradata_param();
  if (dspcameradata_param_ == NULL) dspcameradata_param_ = new ::svaf::DSPCameraDataParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.dspcameradata_param)
  return dspcameradata_param_;
}
inline ::svaf::DSPCameraDataParameter* LayerParameter::release_dspcameradata_param() {
  clear_has_dspcameradata_param();
  ::svaf::DSPCameraDataParameter* temp = dspcameradata_param_;
  dspcameradata_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_dspcameradata_param(::svaf::DSPCameraDataParameter* dspcameradata_param) {
  delete dspcameradata_param_;
  dspcameradata_param_ = dspcameradata_param;
  if (dspcameradata_param) {
    set_has_dspcameradata_param();
  } else {
    clear_has_dspcameradata_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.dspcameradata_param)
}

// optional .svaf.DSPCameraPairParameter dspcamerapair_param = 108;
inline bool LayerParameter::has_dspcamerapair_param() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_dspcamerapair_param() {
  _has_bits_[0] |= 0x00400000u;
}
inline void LayerParameter::clear_has_dspcamerapair_param() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void LayerParameter::clear_dspcamerapair_param() {
  if (dspcamerapair_param_ != NULL) dspcamerapair_param_->::svaf::DSPCameraPairParameter::Clear();
  clear_has_dspcamerapair_param();
}
inline const ::svaf::DSPCameraPairParameter& LayerParameter::dspcamerapair_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.dspcamerapair_param)
  return dspcamerapair_param_ != NULL ? *dspcamerapair_param_ : *default_instance_->dspcamerapair_param_;
}
inline ::svaf::DSPCameraPairParameter* LayerParameter::mutable_dspcamerapair_param() {
  set_has_dspcamerapair_param();
  if (dspcamerapair_param_ == NULL) dspcamerapair_param_ = new ::svaf::DSPCameraPairParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.dspcamerapair_param)
  return dspcamerapair_param_;
}
inline ::svaf::DSPCameraPairParameter* LayerParameter::release_dspcamerapair_param() {
  clear_has_dspcamerapair_param();
  ::svaf::DSPCameraPairParameter* temp = dspcamerapair_param_;
  dspcamerapair_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_dspcamerapair_param(::svaf::DSPCameraPairParameter* dspcamerapair_param) {
  delete dspcamerapair_param_;
  dspcamerapair_param_ = dspcamerapair_param;
  if (dspcamerapair_param) {
    set_has_dspcamerapair_param();
  } else {
    clear_has_dspcamerapair_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.dspcamerapair_param)
}

// optional .svaf.KinectDataParameter kinectdata_param = 109;
inline bool LayerParameter::has_kinectdata_param() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_kinectdata_param() {
  _has_bits_[0] |= 0x00800000u;
}
inline void LayerParameter::clear_has_kinectdata_param() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void LayerParameter::clear_kinectdata_param() {
  if (kinectdata_param_ != NULL) kinectdata_param_->::svaf::KinectDataParameter::Clear();
  clear_has_kinectdata_param();
}
inline const ::svaf::KinectDataParameter& LayerParameter::kinectdata_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.kinectdata_param)
  return kinectdata_param_ != NULL ? *kinectdata_param_ : *default_instance_->kinectdata_param_;
}
inline ::svaf::KinectDataParameter* LayerParameter::mutable_kinectdata_param() {
  set_has_kinectdata_param();
  if (kinectdata_param_ == NULL) kinectdata_param_ = new ::svaf::KinectDataParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.kinectdata_param)
  return kinectdata_param_;
}
inline ::svaf::KinectDataParameter* LayerParameter::release_kinectdata_param() {
  clear_has_kinectdata_param();
  ::svaf::KinectDataParameter* temp = kinectdata_param_;
  kinectdata_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_kinectdata_param(::svaf::KinectDataParameter* kinectdata_param) {
  delete kinectdata_param_;
  kinectdata_param_ = kinectdata_param;
  if (kinectdata_param) {
    set_has_kinectdata_param();
  } else {
    clear_has_kinectdata_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.kinectdata_param)
}

// optional .svaf.ImageFolderParameter folder_param = 111;
inline bool LayerParameter::has_folder_param() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_folder_param() {
  _has_bits_[0] |= 0x01000000u;
}
inline void LayerParameter::clear_has_folder_param() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void LayerParameter::clear_folder_param() {
  if (folder_param_ != NULL) folder_param_->::svaf::ImageFolderParameter::Clear();
  clear_has_folder_param();
}
inline const ::svaf::ImageFolderParameter& LayerParameter::folder_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.folder_param)
  return folder_param_ != NULL ? *folder_param_ : *default_instance_->folder_param_;
}
inline ::svaf::ImageFolderParameter* LayerParameter::mutable_folder_param() {
  set_has_folder_param();
  if (folder_param_ == NULL) folder_param_ = new ::svaf::ImageFolderParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.folder_param)
  return folder_param_;
}
inline ::svaf::ImageFolderParameter* LayerParameter::release_folder_param() {
  clear_has_folder_param();
  ::svaf::ImageFolderParameter* temp = folder_param_;
  folder_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_folder_param(::svaf::ImageFolderParameter* folder_param) {
  delete folder_param_;
  folder_param_ = folder_param;
  if (folder_param) {
    set_has_folder_param();
  } else {
    clear_has_folder_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.folder_param)
}

// optional .svaf.ImagePairFolderParameter pairfolder_param = 112;
inline bool LayerParameter::has_pairfolder_param() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_pairfolder_param() {
  _has_bits_[0] |= 0x02000000u;
}
inline void LayerParameter::clear_has_pairfolder_param() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void LayerParameter::clear_pairfolder_param() {
  if (pairfolder_param_ != NULL) pairfolder_param_->::svaf::ImagePairFolderParameter::Clear();
  clear_has_pairfolder_param();
}
inline const ::svaf::ImagePairFolderParameter& LayerParameter::pairfolder_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.pairfolder_param)
  return pairfolder_param_ != NULL ? *pairfolder_param_ : *default_instance_->pairfolder_param_;
}
inline ::svaf::ImagePairFolderParameter* LayerParameter::mutable_pairfolder_param() {
  set_has_pairfolder_param();
  if (pairfolder_param_ == NULL) pairfolder_param_ = new ::svaf::ImagePairFolderParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.pairfolder_param)
  return pairfolder_param_;
}
inline ::svaf::ImagePairFolderParameter* LayerParameter::release_pairfolder_param() {
  clear_has_pairfolder_param();
  ::svaf::ImagePairFolderParameter* temp = pairfolder_param_;
  pairfolder_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_pairfolder_param(::svaf::ImagePairFolderParameter* pairfolder_param) {
  delete pairfolder_param_;
  pairfolder_param_ = pairfolder_param;
  if (pairfolder_param) {
    set_has_pairfolder_param();
  } else {
    clear_has_pairfolder_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.pairfolder_param)
}

// optional .svaf.RecognizeParameter recognize_param = 120;
inline bool LayerParameter::has_recognize_param() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_recognize_param() {
  _has_bits_[0] |= 0x04000000u;
}
inline void LayerParameter::clear_has_recognize_param() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void LayerParameter::clear_recognize_param() {
  if (recognize_param_ != NULL) recognize_param_->::svaf::RecognizeParameter::Clear();
  clear_has_recognize_param();
}
inline const ::svaf::RecognizeParameter& LayerParameter::recognize_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.recognize_param)
  return recognize_param_ != NULL ? *recognize_param_ : *default_instance_->recognize_param_;
}
inline ::svaf::RecognizeParameter* LayerParameter::mutable_recognize_param() {
  set_has_recognize_param();
  if (recognize_param_ == NULL) recognize_param_ = new ::svaf::RecognizeParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.recognize_param)
  return recognize_param_;
}
inline ::svaf::RecognizeParameter* LayerParameter::release_recognize_param() {
  clear_has_recognize_param();
  ::svaf::RecognizeParameter* temp = recognize_param_;
  recognize_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_recognize_param(::svaf::RecognizeParameter* recognize_param) {
  delete recognize_param_;
  recognize_param_ = recognize_param;
  if (recognize_param) {
    set_has_recognize_param();
  } else {
    clear_has_recognize_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.recognize_param)
}

// optional .svaf.AdaboostParameter adaboost_param = 121;
inline bool LayerParameter::has_adaboost_param() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_adaboost_param() {
  _has_bits_[0] |= 0x08000000u;
}
inline void LayerParameter::clear_has_adaboost_param() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void LayerParameter::clear_adaboost_param() {
  if (adaboost_param_ != NULL) adaboost_param_->::svaf::AdaboostParameter::Clear();
  clear_has_adaboost_param();
}
inline const ::svaf::AdaboostParameter& LayerParameter::adaboost_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.adaboost_param)
  return adaboost_param_ != NULL ? *adaboost_param_ : *default_instance_->adaboost_param_;
}
inline ::svaf::AdaboostParameter* LayerParameter::mutable_adaboost_param() {
  set_has_adaboost_param();
  if (adaboost_param_ == NULL) adaboost_param_ = new ::svaf::AdaboostParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.adaboost_param)
  return adaboost_param_;
}
inline ::svaf::AdaboostParameter* LayerParameter::release_adaboost_param() {
  clear_has_adaboost_param();
  ::svaf::AdaboostParameter* temp = adaboost_param_;
  adaboost_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_adaboost_param(::svaf::AdaboostParameter* adaboost_param) {
  delete adaboost_param_;
  adaboost_param_ = adaboost_param;
  if (adaboost_param) {
    set_has_adaboost_param();
  } else {
    clear_has_adaboost_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.adaboost_param)
}

// optional .svaf.TrackParameter track_param = 130;
inline bool LayerParameter::has_track_param() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_track_param() {
  _has_bits_[0] |= 0x10000000u;
}
inline void LayerParameter::clear_has_track_param() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void LayerParameter::clear_track_param() {
  if (track_param_ != NULL) track_param_->::svaf::TrackParameter::Clear();
  clear_has_track_param();
}
inline const ::svaf::TrackParameter& LayerParameter::track_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.track_param)
  return track_param_ != NULL ? *track_param_ : *default_instance_->track_param_;
}
inline ::svaf::TrackParameter* LayerParameter::mutable_track_param() {
  set_has_track_param();
  if (track_param_ == NULL) track_param_ = new ::svaf::TrackParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.track_param)
  return track_param_;
}
inline ::svaf::TrackParameter* LayerParameter::release_track_param() {
  clear_has_track_param();
  ::svaf::TrackParameter* temp = track_param_;
  track_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_track_param(::svaf::TrackParameter* track_param) {
  delete track_param_;
  track_param_ = track_param;
  if (track_param) {
    set_has_track_param();
  } else {
    clear_has_track_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.track_param)
}

// optional .svaf.MilTrackParameter miltrack_param = 131;
inline bool LayerParameter::has_miltrack_param() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_miltrack_param() {
  _has_bits_[0] |= 0x20000000u;
}
inline void LayerParameter::clear_has_miltrack_param() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void LayerParameter::clear_miltrack_param() {
  if (miltrack_param_ != NULL) miltrack_param_->::svaf::MilTrackParameter::Clear();
  clear_has_miltrack_param();
}
inline const ::svaf::MilTrackParameter& LayerParameter::miltrack_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.miltrack_param)
  return miltrack_param_ != NULL ? *miltrack_param_ : *default_instance_->miltrack_param_;
}
inline ::svaf::MilTrackParameter* LayerParameter::mutable_miltrack_param() {
  set_has_miltrack_param();
  if (miltrack_param_ == NULL) miltrack_param_ = new ::svaf::MilTrackParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.miltrack_param)
  return miltrack_param_;
}
inline ::svaf::MilTrackParameter* LayerParameter::release_miltrack_param() {
  clear_has_miltrack_param();
  ::svaf::MilTrackParameter* temp = miltrack_param_;
  miltrack_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_miltrack_param(::svaf::MilTrackParameter* miltrack_param) {
  delete miltrack_param_;
  miltrack_param_ = miltrack_param;
  if (miltrack_param) {
    set_has_miltrack_param();
  } else {
    clear_has_miltrack_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.miltrack_param)
}

// optional .svaf.MilTrackParameter bittrack_param = 132;
inline bool LayerParameter::has_bittrack_param() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void LayerParameter::set_has_bittrack_param() {
  _has_bits_[0] |= 0x40000000u;
}
inline void LayerParameter::clear_has_bittrack_param() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void LayerParameter::clear_bittrack_param() {
  if (bittrack_param_ != NULL) bittrack_param_->::svaf::MilTrackParameter::Clear();
  clear_has_bittrack_param();
}
inline const ::svaf::MilTrackParameter& LayerParameter::bittrack_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.bittrack_param)
  return bittrack_param_ != NULL ? *bittrack_param_ : *default_instance_->bittrack_param_;
}
inline ::svaf::MilTrackParameter* LayerParameter::mutable_bittrack_param() {
  set_has_bittrack_param();
  if (bittrack_param_ == NULL) bittrack_param_ = new ::svaf::MilTrackParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.bittrack_param)
  return bittrack_param_;
}
inline ::svaf::MilTrackParameter* LayerParameter::release_bittrack_param() {
  clear_has_bittrack_param();
  ::svaf::MilTrackParameter* temp = bittrack_param_;
  bittrack_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_bittrack_param(::svaf::MilTrackParameter* bittrack_param) {
  delete bittrack_param_;
  bittrack_param_ = bittrack_param;
  if (bittrack_param) {
    set_has_bittrack_param();
  } else {
    clear_has_bittrack_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.bittrack_param)
}

// optional .svaf.FeaturePointParameter featurepoint_param = 140;
inline bool LayerParameter::has_featurepoint_param() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void LayerParameter::set_has_featurepoint_param() {
  _has_bits_[0] |= 0x80000000u;
}
inline void LayerParameter::clear_has_featurepoint_param() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void LayerParameter::clear_featurepoint_param() {
  if (featurepoint_param_ != NULL) featurepoint_param_->::svaf::FeaturePointParameter::Clear();
  clear_has_featurepoint_param();
}
inline const ::svaf::FeaturePointParameter& LayerParameter::featurepoint_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.featurepoint_param)
  return featurepoint_param_ != NULL ? *featurepoint_param_ : *default_instance_->featurepoint_param_;
}
inline ::svaf::FeaturePointParameter* LayerParameter::mutable_featurepoint_param() {
  set_has_featurepoint_param();
  if (featurepoint_param_ == NULL) featurepoint_param_ = new ::svaf::FeaturePointParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.featurepoint_param)
  return featurepoint_param_;
}
inline ::svaf::FeaturePointParameter* LayerParameter::release_featurepoint_param() {
  clear_has_featurepoint_param();
  ::svaf::FeaturePointParameter* temp = featurepoint_param_;
  featurepoint_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_featurepoint_param(::svaf::FeaturePointParameter* featurepoint_param) {
  delete featurepoint_param_;
  featurepoint_param_ = featurepoint_param;
  if (featurepoint_param) {
    set_has_featurepoint_param();
  } else {
    clear_has_featurepoint_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.featurepoint_param)
}

// optional .svaf.SIFTPointParameter siftpoint_param = 141;
inline bool LayerParameter::has_siftpoint_param() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_siftpoint_param() {
  _has_bits_[1] |= 0x00000001u;
}
inline void LayerParameter::clear_has_siftpoint_param() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void LayerParameter::clear_siftpoint_param() {
  if (siftpoint_param_ != NULL) siftpoint_param_->::svaf::SIFTPointParameter::Clear();
  clear_has_siftpoint_param();
}
inline const ::svaf::SIFTPointParameter& LayerParameter::siftpoint_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.siftpoint_param)
  return siftpoint_param_ != NULL ? *siftpoint_param_ : *default_instance_->siftpoint_param_;
}
inline ::svaf::SIFTPointParameter* LayerParameter::mutable_siftpoint_param() {
  set_has_siftpoint_param();
  if (siftpoint_param_ == NULL) siftpoint_param_ = new ::svaf::SIFTPointParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.siftpoint_param)
  return siftpoint_param_;
}
inline ::svaf::SIFTPointParameter* LayerParameter::release_siftpoint_param() {
  clear_has_siftpoint_param();
  ::svaf::SIFTPointParameter* temp = siftpoint_param_;
  siftpoint_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_siftpoint_param(::svaf::SIFTPointParameter* siftpoint_param) {
  delete siftpoint_param_;
  siftpoint_param_ = siftpoint_param;
  if (siftpoint_param) {
    set_has_siftpoint_param();
  } else {
    clear_has_siftpoint_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.siftpoint_param)
}

// optional .svaf.SURFPointParameter surfpoint_param = 142;
inline bool LayerParameter::has_surfpoint_param() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_surfpoint_param() {
  _has_bits_[1] |= 0x00000002u;
}
inline void LayerParameter::clear_has_surfpoint_param() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void LayerParameter::clear_surfpoint_param() {
  if (surfpoint_param_ != NULL) surfpoint_param_->::svaf::SURFPointParameter::Clear();
  clear_has_surfpoint_param();
}
inline const ::svaf::SURFPointParameter& LayerParameter::surfpoint_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.surfpoint_param)
  return surfpoint_param_ != NULL ? *surfpoint_param_ : *default_instance_->surfpoint_param_;
}
inline ::svaf::SURFPointParameter* LayerParameter::mutable_surfpoint_param() {
  set_has_surfpoint_param();
  if (surfpoint_param_ == NULL) surfpoint_param_ = new ::svaf::SURFPointParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.surfpoint_param)
  return surfpoint_param_;
}
inline ::svaf::SURFPointParameter* LayerParameter::release_surfpoint_param() {
  clear_has_surfpoint_param();
  ::svaf::SURFPointParameter* temp = surfpoint_param_;
  surfpoint_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_surfpoint_param(::svaf::SURFPointParameter* surfpoint_param) {
  delete surfpoint_param_;
  surfpoint_param_ = surfpoint_param;
  if (surfpoint_param) {
    set_has_surfpoint_param();
  } else {
    clear_has_surfpoint_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.surfpoint_param)
}

// optional .svaf.STARPointParameter starpoint_param = 143;
inline bool LayerParameter::has_starpoint_param() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_starpoint_param() {
  _has_bits_[1] |= 0x00000004u;
}
inline void LayerParameter::clear_has_starpoint_param() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void LayerParameter::clear_starpoint_param() {
  if (starpoint_param_ != NULL) starpoint_param_->::svaf::STARPointParameter::Clear();
  clear_has_starpoint_param();
}
inline const ::svaf::STARPointParameter& LayerParameter::starpoint_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.starpoint_param)
  return starpoint_param_ != NULL ? *starpoint_param_ : *default_instance_->starpoint_param_;
}
inline ::svaf::STARPointParameter* LayerParameter::mutable_starpoint_param() {
  set_has_starpoint_param();
  if (starpoint_param_ == NULL) starpoint_param_ = new ::svaf::STARPointParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.starpoint_param)
  return starpoint_param_;
}
inline ::svaf::STARPointParameter* LayerParameter::release_starpoint_param() {
  clear_has_starpoint_param();
  ::svaf::STARPointParameter* temp = starpoint_param_;
  starpoint_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_starpoint_param(::svaf::STARPointParameter* starpoint_param) {
  delete starpoint_param_;
  starpoint_param_ = starpoint_param;
  if (starpoint_param) {
    set_has_starpoint_param();
  } else {
    clear_has_starpoint_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.starpoint_param)
}

// optional .svaf.BRISKPointParameter briskpoint_param = 144;
inline bool LayerParameter::has_briskpoint_param() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_briskpoint_param() {
  _has_bits_[1] |= 0x00000008u;
}
inline void LayerParameter::clear_has_briskpoint_param() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void LayerParameter::clear_briskpoint_param() {
  if (briskpoint_param_ != NULL) briskpoint_param_->::svaf::BRISKPointParameter::Clear();
  clear_has_briskpoint_param();
}
inline const ::svaf::BRISKPointParameter& LayerParameter::briskpoint_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.briskpoint_param)
  return briskpoint_param_ != NULL ? *briskpoint_param_ : *default_instance_->briskpoint_param_;
}
inline ::svaf::BRISKPointParameter* LayerParameter::mutable_briskpoint_param() {
  set_has_briskpoint_param();
  if (briskpoint_param_ == NULL) briskpoint_param_ = new ::svaf::BRISKPointParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.briskpoint_param)
  return briskpoint_param_;
}
inline ::svaf::BRISKPointParameter* LayerParameter::release_briskpoint_param() {
  clear_has_briskpoint_param();
  ::svaf::BRISKPointParameter* temp = briskpoint_param_;
  briskpoint_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_briskpoint_param(::svaf::BRISKPointParameter* briskpoint_param) {
  delete briskpoint_param_;
  briskpoint_param_ = briskpoint_param;
  if (briskpoint_param) {
    set_has_briskpoint_param();
  } else {
    clear_has_briskpoint_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.briskpoint_param)
}

// optional .svaf.FASTPointParameter fastpoint_param = 145;
inline bool LayerParameter::has_fastpoint_param() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_fastpoint_param() {
  _has_bits_[1] |= 0x00000010u;
}
inline void LayerParameter::clear_has_fastpoint_param() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void LayerParameter::clear_fastpoint_param() {
  if (fastpoint_param_ != NULL) fastpoint_param_->::svaf::FASTPointParameter::Clear();
  clear_has_fastpoint_param();
}
inline const ::svaf::FASTPointParameter& LayerParameter::fastpoint_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.fastpoint_param)
  return fastpoint_param_ != NULL ? *fastpoint_param_ : *default_instance_->fastpoint_param_;
}
inline ::svaf::FASTPointParameter* LayerParameter::mutable_fastpoint_param() {
  set_has_fastpoint_param();
  if (fastpoint_param_ == NULL) fastpoint_param_ = new ::svaf::FASTPointParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.fastpoint_param)
  return fastpoint_param_;
}
inline ::svaf::FASTPointParameter* LayerParameter::release_fastpoint_param() {
  clear_has_fastpoint_param();
  ::svaf::FASTPointParameter* temp = fastpoint_param_;
  fastpoint_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_fastpoint_param(::svaf::FASTPointParameter* fastpoint_param) {
  delete fastpoint_param_;
  fastpoint_param_ = fastpoint_param;
  if (fastpoint_param) {
    set_has_fastpoint_param();
  } else {
    clear_has_fastpoint_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.fastpoint_param)
}

// optional .svaf.ORBPointParameter orbpoint_param = 146;
inline bool LayerParameter::has_orbpoint_param() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_orbpoint_param() {
  _has_bits_[1] |= 0x00000020u;
}
inline void LayerParameter::clear_has_orbpoint_param() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void LayerParameter::clear_orbpoint_param() {
  if (orbpoint_param_ != NULL) orbpoint_param_->::svaf::ORBPointParameter::Clear();
  clear_has_orbpoint_param();
}
inline const ::svaf::ORBPointParameter& LayerParameter::orbpoint_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.orbpoint_param)
  return orbpoint_param_ != NULL ? *orbpoint_param_ : *default_instance_->orbpoint_param_;
}
inline ::svaf::ORBPointParameter* LayerParameter::mutable_orbpoint_param() {
  set_has_orbpoint_param();
  if (orbpoint_param_ == NULL) orbpoint_param_ = new ::svaf::ORBPointParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.orbpoint_param)
  return orbpoint_param_;
}
inline ::svaf::ORBPointParameter* LayerParameter::release_orbpoint_param() {
  clear_has_orbpoint_param();
  ::svaf::ORBPointParameter* temp = orbpoint_param_;
  orbpoint_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_orbpoint_param(::svaf::ORBPointParameter* orbpoint_param) {
  delete orbpoint_param_;
  orbpoint_param_ = orbpoint_param;
  if (orbpoint_param) {
    set_has_orbpoint_param();
  } else {
    clear_has_orbpoint_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.orbpoint_param)
}

// optional .svaf.KAZEPointParameter kazepoint_param = 147;
inline bool LayerParameter::has_kazepoint_param() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void LayerParameter::set_has_kazepoint_param() {
  _has_bits_[1] |= 0x00000040u;
}
inline void LayerParameter::clear_has_kazepoint_param() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void LayerParameter::clear_kazepoint_param() {
  if (kazepoint_param_ != NULL) kazepoint_param_->::svaf::KAZEPointParameter::Clear();
  clear_has_kazepoint_param();
}
inline const ::svaf::KAZEPointParameter& LayerParameter::kazepoint_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.kazepoint_param)
  return kazepoint_param_ != NULL ? *kazepoint_param_ : *default_instance_->kazepoint_param_;
}
inline ::svaf::KAZEPointParameter* LayerParameter::mutable_kazepoint_param() {
  set_has_kazepoint_param();
  if (kazepoint_param_ == NULL) kazepoint_param_ = new ::svaf::KAZEPointParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.kazepoint_param)
  return kazepoint_param_;
}
inline ::svaf::KAZEPointParameter* LayerParameter::release_kazepoint_param() {
  clear_has_kazepoint_param();
  ::svaf::KAZEPointParameter* temp = kazepoint_param_;
  kazepoint_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_kazepoint_param(::svaf::KAZEPointParameter* kazepoint_param) {
  delete kazepoint_param_;
  kazepoint_param_ = kazepoint_param;
  if (kazepoint_param) {
    set_has_kazepoint_param();
  } else {
    clear_has_kazepoint_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.kazepoint_param)
}

// optional .svaf.HarrisPointParameter harrispoint_param = 148;
inline bool LayerParameter::has_harrispoint_param() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void LayerParameter::set_has_harrispoint_param() {
  _has_bits_[1] |= 0x00000080u;
}
inline void LayerParameter::clear_has_harrispoint_param() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void LayerParameter::clear_harrispoint_param() {
  if (harrispoint_param_ != NULL) harrispoint_param_->::svaf::HarrisPointParameter::Clear();
  clear_has_harrispoint_param();
}
inline const ::svaf::HarrisPointParameter& LayerParameter::harrispoint_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.harrispoint_param)
  return harrispoint_param_ != NULL ? *harrispoint_param_ : *default_instance_->harrispoint_param_;
}
inline ::svaf::HarrisPointParameter* LayerParameter::mutable_harrispoint_param() {
  set_has_harrispoint_param();
  if (harrispoint_param_ == NULL) harrispoint_param_ = new ::svaf::HarrisPointParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.harrispoint_param)
  return harrispoint_param_;
}
inline ::svaf::HarrisPointParameter* LayerParameter::release_harrispoint_param() {
  clear_has_harrispoint_param();
  ::svaf::HarrisPointParameter* temp = harrispoint_param_;
  harrispoint_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_harrispoint_param(::svaf::HarrisPointParameter* harrispoint_param) {
  delete harrispoint_param_;
  harrispoint_param_ = harrispoint_param;
  if (harrispoint_param) {
    set_has_harrispoint_param();
  } else {
    clear_has_harrispoint_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.harrispoint_param)
}

// optional .svaf.CVPointParameter cvpoint_param = 149;
inline bool LayerParameter::has_cvpoint_param() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void LayerParameter::set_has_cvpoint_param() {
  _has_bits_[1] |= 0x00000100u;
}
inline void LayerParameter::clear_has_cvpoint_param() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void LayerParameter::clear_cvpoint_param() {
  if (cvpoint_param_ != NULL) cvpoint_param_->::svaf::CVPointParameter::Clear();
  clear_has_cvpoint_param();
}
inline const ::svaf::CVPointParameter& LayerParameter::cvpoint_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.cvpoint_param)
  return cvpoint_param_ != NULL ? *cvpoint_param_ : *default_instance_->cvpoint_param_;
}
inline ::svaf::CVPointParameter* LayerParameter::mutable_cvpoint_param() {
  set_has_cvpoint_param();
  if (cvpoint_param_ == NULL) cvpoint_param_ = new ::svaf::CVPointParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.cvpoint_param)
  return cvpoint_param_;
}
inline ::svaf::CVPointParameter* LayerParameter::release_cvpoint_param() {
  clear_has_cvpoint_param();
  ::svaf::CVPointParameter* temp = cvpoint_param_;
  cvpoint_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_cvpoint_param(::svaf::CVPointParameter* cvpoint_param) {
  delete cvpoint_param_;
  cvpoint_param_ = cvpoint_param;
  if (cvpoint_param) {
    set_has_cvpoint_param();
  } else {
    clear_has_cvpoint_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.cvpoint_param)
}

// optional .svaf.FeatureDescriptorParameter featuredescriptor_param = 150;
inline bool LayerParameter::has_featuredescriptor_param() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void LayerParameter::set_has_featuredescriptor_param() {
  _has_bits_[1] |= 0x00000200u;
}
inline void LayerParameter::clear_has_featuredescriptor_param() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void LayerParameter::clear_featuredescriptor_param() {
  if (featuredescriptor_param_ != NULL) featuredescriptor_param_->::svaf::FeatureDescriptorParameter::Clear();
  clear_has_featuredescriptor_param();
}
inline const ::svaf::FeatureDescriptorParameter& LayerParameter::featuredescriptor_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.featuredescriptor_param)
  return featuredescriptor_param_ != NULL ? *featuredescriptor_param_ : *default_instance_->featuredescriptor_param_;
}
inline ::svaf::FeatureDescriptorParameter* LayerParameter::mutable_featuredescriptor_param() {
  set_has_featuredescriptor_param();
  if (featuredescriptor_param_ == NULL) featuredescriptor_param_ = new ::svaf::FeatureDescriptorParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.featuredescriptor_param)
  return featuredescriptor_param_;
}
inline ::svaf::FeatureDescriptorParameter* LayerParameter::release_featuredescriptor_param() {
  clear_has_featuredescriptor_param();
  ::svaf::FeatureDescriptorParameter* temp = featuredescriptor_param_;
  featuredescriptor_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_featuredescriptor_param(::svaf::FeatureDescriptorParameter* featuredescriptor_param) {
  delete featuredescriptor_param_;
  featuredescriptor_param_ = featuredescriptor_param;
  if (featuredescriptor_param) {
    set_has_featuredescriptor_param();
  } else {
    clear_has_featuredescriptor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.featuredescriptor_param)
}

// optional .svaf.SIFTDescriptorParameter siftdescriptor_param = 151;
inline bool LayerParameter::has_siftdescriptor_param() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void LayerParameter::set_has_siftdescriptor_param() {
  _has_bits_[1] |= 0x00000400u;
}
inline void LayerParameter::clear_has_siftdescriptor_param() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void LayerParameter::clear_siftdescriptor_param() {
  if (siftdescriptor_param_ != NULL) siftdescriptor_param_->::svaf::SIFTDescriptorParameter::Clear();
  clear_has_siftdescriptor_param();
}
inline const ::svaf::SIFTDescriptorParameter& LayerParameter::siftdescriptor_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.siftdescriptor_param)
  return siftdescriptor_param_ != NULL ? *siftdescriptor_param_ : *default_instance_->siftdescriptor_param_;
}
inline ::svaf::SIFTDescriptorParameter* LayerParameter::mutable_siftdescriptor_param() {
  set_has_siftdescriptor_param();
  if (siftdescriptor_param_ == NULL) siftdescriptor_param_ = new ::svaf::SIFTDescriptorParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.siftdescriptor_param)
  return siftdescriptor_param_;
}
inline ::svaf::SIFTDescriptorParameter* LayerParameter::release_siftdescriptor_param() {
  clear_has_siftdescriptor_param();
  ::svaf::SIFTDescriptorParameter* temp = siftdescriptor_param_;
  siftdescriptor_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_siftdescriptor_param(::svaf::SIFTDescriptorParameter* siftdescriptor_param) {
  delete siftdescriptor_param_;
  siftdescriptor_param_ = siftdescriptor_param;
  if (siftdescriptor_param) {
    set_has_siftdescriptor_param();
  } else {
    clear_has_siftdescriptor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.siftdescriptor_param)
}

// optional .svaf.SURFDescriptorParameter surfdescriptor_param = 152;
inline bool LayerParameter::has_surfdescriptor_param() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void LayerParameter::set_has_surfdescriptor_param() {
  _has_bits_[1] |= 0x00000800u;
}
inline void LayerParameter::clear_has_surfdescriptor_param() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void LayerParameter::clear_surfdescriptor_param() {
  if (surfdescriptor_param_ != NULL) surfdescriptor_param_->::svaf::SURFDescriptorParameter::Clear();
  clear_has_surfdescriptor_param();
}
inline const ::svaf::SURFDescriptorParameter& LayerParameter::surfdescriptor_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.surfdescriptor_param)
  return surfdescriptor_param_ != NULL ? *surfdescriptor_param_ : *default_instance_->surfdescriptor_param_;
}
inline ::svaf::SURFDescriptorParameter* LayerParameter::mutable_surfdescriptor_param() {
  set_has_surfdescriptor_param();
  if (surfdescriptor_param_ == NULL) surfdescriptor_param_ = new ::svaf::SURFDescriptorParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.surfdescriptor_param)
  return surfdescriptor_param_;
}
inline ::svaf::SURFDescriptorParameter* LayerParameter::release_surfdescriptor_param() {
  clear_has_surfdescriptor_param();
  ::svaf::SURFDescriptorParameter* temp = surfdescriptor_param_;
  surfdescriptor_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_surfdescriptor_param(::svaf::SURFDescriptorParameter* surfdescriptor_param) {
  delete surfdescriptor_param_;
  surfdescriptor_param_ = surfdescriptor_param;
  if (surfdescriptor_param) {
    set_has_surfdescriptor_param();
  } else {
    clear_has_surfdescriptor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.surfdescriptor_param)
}

// optional .svaf.STARDescriptorParameter stardescriptor_param = 153;
inline bool LayerParameter::has_stardescriptor_param() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void LayerParameter::set_has_stardescriptor_param() {
  _has_bits_[1] |= 0x00001000u;
}
inline void LayerParameter::clear_has_stardescriptor_param() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void LayerParameter::clear_stardescriptor_param() {
  if (stardescriptor_param_ != NULL) stardescriptor_param_->::svaf::STARDescriptorParameter::Clear();
  clear_has_stardescriptor_param();
}
inline const ::svaf::STARDescriptorParameter& LayerParameter::stardescriptor_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.stardescriptor_param)
  return stardescriptor_param_ != NULL ? *stardescriptor_param_ : *default_instance_->stardescriptor_param_;
}
inline ::svaf::STARDescriptorParameter* LayerParameter::mutable_stardescriptor_param() {
  set_has_stardescriptor_param();
  if (stardescriptor_param_ == NULL) stardescriptor_param_ = new ::svaf::STARDescriptorParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.stardescriptor_param)
  return stardescriptor_param_;
}
inline ::svaf::STARDescriptorParameter* LayerParameter::release_stardescriptor_param() {
  clear_has_stardescriptor_param();
  ::svaf::STARDescriptorParameter* temp = stardescriptor_param_;
  stardescriptor_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_stardescriptor_param(::svaf::STARDescriptorParameter* stardescriptor_param) {
  delete stardescriptor_param_;
  stardescriptor_param_ = stardescriptor_param;
  if (stardescriptor_param) {
    set_has_stardescriptor_param();
  } else {
    clear_has_stardescriptor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.stardescriptor_param)
}

// optional .svaf.BRIEFDescriptorParameter briefdescriptor_param = 154;
inline bool LayerParameter::has_briefdescriptor_param() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void LayerParameter::set_has_briefdescriptor_param() {
  _has_bits_[1] |= 0x00002000u;
}
inline void LayerParameter::clear_has_briefdescriptor_param() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void LayerParameter::clear_briefdescriptor_param() {
  if (briefdescriptor_param_ != NULL) briefdescriptor_param_->::svaf::BRIEFDescriptorParameter::Clear();
  clear_has_briefdescriptor_param();
}
inline const ::svaf::BRIEFDescriptorParameter& LayerParameter::briefdescriptor_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.briefdescriptor_param)
  return briefdescriptor_param_ != NULL ? *briefdescriptor_param_ : *default_instance_->briefdescriptor_param_;
}
inline ::svaf::BRIEFDescriptorParameter* LayerParameter::mutable_briefdescriptor_param() {
  set_has_briefdescriptor_param();
  if (briefdescriptor_param_ == NULL) briefdescriptor_param_ = new ::svaf::BRIEFDescriptorParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.briefdescriptor_param)
  return briefdescriptor_param_;
}
inline ::svaf::BRIEFDescriptorParameter* LayerParameter::release_briefdescriptor_param() {
  clear_has_briefdescriptor_param();
  ::svaf::BRIEFDescriptorParameter* temp = briefdescriptor_param_;
  briefdescriptor_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_briefdescriptor_param(::svaf::BRIEFDescriptorParameter* briefdescriptor_param) {
  delete briefdescriptor_param_;
  briefdescriptor_param_ = briefdescriptor_param;
  if (briefdescriptor_param) {
    set_has_briefdescriptor_param();
  } else {
    clear_has_briefdescriptor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.briefdescriptor_param)
}

// optional .svaf.BRISKDescriptorParameter briskdescriptor_param = 155;
inline bool LayerParameter::has_briskdescriptor_param() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void LayerParameter::set_has_briskdescriptor_param() {
  _has_bits_[1] |= 0x00004000u;
}
inline void LayerParameter::clear_has_briskdescriptor_param() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void LayerParameter::clear_briskdescriptor_param() {
  if (briskdescriptor_param_ != NULL) briskdescriptor_param_->::svaf::BRISKDescriptorParameter::Clear();
  clear_has_briskdescriptor_param();
}
inline const ::svaf::BRISKDescriptorParameter& LayerParameter::briskdescriptor_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.briskdescriptor_param)
  return briskdescriptor_param_ != NULL ? *briskdescriptor_param_ : *default_instance_->briskdescriptor_param_;
}
inline ::svaf::BRISKDescriptorParameter* LayerParameter::mutable_briskdescriptor_param() {
  set_has_briskdescriptor_param();
  if (briskdescriptor_param_ == NULL) briskdescriptor_param_ = new ::svaf::BRISKDescriptorParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.briskdescriptor_param)
  return briskdescriptor_param_;
}
inline ::svaf::BRISKDescriptorParameter* LayerParameter::release_briskdescriptor_param() {
  clear_has_briskdescriptor_param();
  ::svaf::BRISKDescriptorParameter* temp = briskdescriptor_param_;
  briskdescriptor_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_briskdescriptor_param(::svaf::BRISKDescriptorParameter* briskdescriptor_param) {
  delete briskdescriptor_param_;
  briskdescriptor_param_ = briskdescriptor_param;
  if (briskdescriptor_param) {
    set_has_briskdescriptor_param();
  } else {
    clear_has_briskdescriptor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.briskdescriptor_param)
}

// optional .svaf.FASTDescriptorParameter fastdescriptor_param = 156;
inline bool LayerParameter::has_fastdescriptor_param() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void LayerParameter::set_has_fastdescriptor_param() {
  _has_bits_[1] |= 0x00008000u;
}
inline void LayerParameter::clear_has_fastdescriptor_param() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void LayerParameter::clear_fastdescriptor_param() {
  if (fastdescriptor_param_ != NULL) fastdescriptor_param_->::svaf::FASTDescriptorParameter::Clear();
  clear_has_fastdescriptor_param();
}
inline const ::svaf::FASTDescriptorParameter& LayerParameter::fastdescriptor_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.fastdescriptor_param)
  return fastdescriptor_param_ != NULL ? *fastdescriptor_param_ : *default_instance_->fastdescriptor_param_;
}
inline ::svaf::FASTDescriptorParameter* LayerParameter::mutable_fastdescriptor_param() {
  set_has_fastdescriptor_param();
  if (fastdescriptor_param_ == NULL) fastdescriptor_param_ = new ::svaf::FASTDescriptorParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.fastdescriptor_param)
  return fastdescriptor_param_;
}
inline ::svaf::FASTDescriptorParameter* LayerParameter::release_fastdescriptor_param() {
  clear_has_fastdescriptor_param();
  ::svaf::FASTDescriptorParameter* temp = fastdescriptor_param_;
  fastdescriptor_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_fastdescriptor_param(::svaf::FASTDescriptorParameter* fastdescriptor_param) {
  delete fastdescriptor_param_;
  fastdescriptor_param_ = fastdescriptor_param;
  if (fastdescriptor_param) {
    set_has_fastdescriptor_param();
  } else {
    clear_has_fastdescriptor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.fastdescriptor_param)
}

// optional .svaf.ORBDescriptorParameter orbdescriptor_param = 157;
inline bool LayerParameter::has_orbdescriptor_param() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void LayerParameter::set_has_orbdescriptor_param() {
  _has_bits_[1] |= 0x00010000u;
}
inline void LayerParameter::clear_has_orbdescriptor_param() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void LayerParameter::clear_orbdescriptor_param() {
  if (orbdescriptor_param_ != NULL) orbdescriptor_param_->::svaf::ORBDescriptorParameter::Clear();
  clear_has_orbdescriptor_param();
}
inline const ::svaf::ORBDescriptorParameter& LayerParameter::orbdescriptor_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.orbdescriptor_param)
  return orbdescriptor_param_ != NULL ? *orbdescriptor_param_ : *default_instance_->orbdescriptor_param_;
}
inline ::svaf::ORBDescriptorParameter* LayerParameter::mutable_orbdescriptor_param() {
  set_has_orbdescriptor_param();
  if (orbdescriptor_param_ == NULL) orbdescriptor_param_ = new ::svaf::ORBDescriptorParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.orbdescriptor_param)
  return orbdescriptor_param_;
}
inline ::svaf::ORBDescriptorParameter* LayerParameter::release_orbdescriptor_param() {
  clear_has_orbdescriptor_param();
  ::svaf::ORBDescriptorParameter* temp = orbdescriptor_param_;
  orbdescriptor_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_orbdescriptor_param(::svaf::ORBDescriptorParameter* orbdescriptor_param) {
  delete orbdescriptor_param_;
  orbdescriptor_param_ = orbdescriptor_param;
  if (orbdescriptor_param) {
    set_has_orbdescriptor_param();
  } else {
    clear_has_orbdescriptor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.orbdescriptor_param)
}

// optional .svaf.KAZEDescriptorParameter kazedescriptor_param = 158;
inline bool LayerParameter::has_kazedescriptor_param() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void LayerParameter::set_has_kazedescriptor_param() {
  _has_bits_[1] |= 0x00020000u;
}
inline void LayerParameter::clear_has_kazedescriptor_param() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void LayerParameter::clear_kazedescriptor_param() {
  if (kazedescriptor_param_ != NULL) kazedescriptor_param_->::svaf::KAZEDescriptorParameter::Clear();
  clear_has_kazedescriptor_param();
}
inline const ::svaf::KAZEDescriptorParameter& LayerParameter::kazedescriptor_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.kazedescriptor_param)
  return kazedescriptor_param_ != NULL ? *kazedescriptor_param_ : *default_instance_->kazedescriptor_param_;
}
inline ::svaf::KAZEDescriptorParameter* LayerParameter::mutable_kazedescriptor_param() {
  set_has_kazedescriptor_param();
  if (kazedescriptor_param_ == NULL) kazedescriptor_param_ = new ::svaf::KAZEDescriptorParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.kazedescriptor_param)
  return kazedescriptor_param_;
}
inline ::svaf::KAZEDescriptorParameter* LayerParameter::release_kazedescriptor_param() {
  clear_has_kazedescriptor_param();
  ::svaf::KAZEDescriptorParameter* temp = kazedescriptor_param_;
  kazedescriptor_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_kazedescriptor_param(::svaf::KAZEDescriptorParameter* kazedescriptor_param) {
  delete kazedescriptor_param_;
  kazedescriptor_param_ = kazedescriptor_param;
  if (kazedescriptor_param) {
    set_has_kazedescriptor_param();
  } else {
    clear_has_kazedescriptor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.kazedescriptor_param)
}

// optional .svaf.CVDescriptorParameter cvdescriptor_param = 159;
inline bool LayerParameter::has_cvdescriptor_param() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void LayerParameter::set_has_cvdescriptor_param() {
  _has_bits_[1] |= 0x00040000u;
}
inline void LayerParameter::clear_has_cvdescriptor_param() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void LayerParameter::clear_cvdescriptor_param() {
  if (cvdescriptor_param_ != NULL) cvdescriptor_param_->::svaf::CVDescriptorParameter::Clear();
  clear_has_cvdescriptor_param();
}
inline const ::svaf::CVDescriptorParameter& LayerParameter::cvdescriptor_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.cvdescriptor_param)
  return cvdescriptor_param_ != NULL ? *cvdescriptor_param_ : *default_instance_->cvdescriptor_param_;
}
inline ::svaf::CVDescriptorParameter* LayerParameter::mutable_cvdescriptor_param() {
  set_has_cvdescriptor_param();
  if (cvdescriptor_param_ == NULL) cvdescriptor_param_ = new ::svaf::CVDescriptorParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.cvdescriptor_param)
  return cvdescriptor_param_;
}
inline ::svaf::CVDescriptorParameter* LayerParameter::release_cvdescriptor_param() {
  clear_has_cvdescriptor_param();
  ::svaf::CVDescriptorParameter* temp = cvdescriptor_param_;
  cvdescriptor_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_cvdescriptor_param(::svaf::CVDescriptorParameter* cvdescriptor_param) {
  delete cvdescriptor_param_;
  cvdescriptor_param_ = cvdescriptor_param;
  if (cvdescriptor_param) {
    set_has_cvdescriptor_param();
  } else {
    clear_has_cvdescriptor_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.cvdescriptor_param)
}

// optional .svaf.VectorMatchParameter vectormatch_param = 160;
inline bool LayerParameter::has_vectormatch_param() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void LayerParameter::set_has_vectormatch_param() {
  _has_bits_[1] |= 0x00080000u;
}
inline void LayerParameter::clear_has_vectormatch_param() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void LayerParameter::clear_vectormatch_param() {
  if (vectormatch_param_ != NULL) vectormatch_param_->::svaf::VectorMatchParameter::Clear();
  clear_has_vectormatch_param();
}
inline const ::svaf::VectorMatchParameter& LayerParameter::vectormatch_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.vectormatch_param)
  return vectormatch_param_ != NULL ? *vectormatch_param_ : *default_instance_->vectormatch_param_;
}
inline ::svaf::VectorMatchParameter* LayerParameter::mutable_vectormatch_param() {
  set_has_vectormatch_param();
  if (vectormatch_param_ == NULL) vectormatch_param_ = new ::svaf::VectorMatchParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.vectormatch_param)
  return vectormatch_param_;
}
inline ::svaf::VectorMatchParameter* LayerParameter::release_vectormatch_param() {
  clear_has_vectormatch_param();
  ::svaf::VectorMatchParameter* temp = vectormatch_param_;
  vectormatch_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_vectormatch_param(::svaf::VectorMatchParameter* vectormatch_param) {
  delete vectormatch_param_;
  vectormatch_param_ = vectormatch_param;
  if (vectormatch_param) {
    set_has_vectormatch_param();
  } else {
    clear_has_vectormatch_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.vectormatch_param)
}

// optional .svaf.KDTreeMatchParameter kdtreematch_param = 161;
inline bool LayerParameter::has_kdtreematch_param() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void LayerParameter::set_has_kdtreematch_param() {
  _has_bits_[1] |= 0x00100000u;
}
inline void LayerParameter::clear_has_kdtreematch_param() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void LayerParameter::clear_kdtreematch_param() {
  if (kdtreematch_param_ != NULL) kdtreematch_param_->::svaf::KDTreeMatchParameter::Clear();
  clear_has_kdtreematch_param();
}
inline const ::svaf::KDTreeMatchParameter& LayerParameter::kdtreematch_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.kdtreematch_param)
  return kdtreematch_param_ != NULL ? *kdtreematch_param_ : *default_instance_->kdtreematch_param_;
}
inline ::svaf::KDTreeMatchParameter* LayerParameter::mutable_kdtreematch_param() {
  set_has_kdtreematch_param();
  if (kdtreematch_param_ == NULL) kdtreematch_param_ = new ::svaf::KDTreeMatchParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.kdtreematch_param)
  return kdtreematch_param_;
}
inline ::svaf::KDTreeMatchParameter* LayerParameter::release_kdtreematch_param() {
  clear_has_kdtreematch_param();
  ::svaf::KDTreeMatchParameter* temp = kdtreematch_param_;
  kdtreematch_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_kdtreematch_param(::svaf::KDTreeMatchParameter* kdtreematch_param) {
  delete kdtreematch_param_;
  kdtreematch_param_ = kdtreematch_param;
  if (kdtreematch_param) {
    set_has_kdtreematch_param();
  } else {
    clear_has_kdtreematch_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.kdtreematch_param)
}

// optional .svaf.EularMatchParameter eularmatch_param = 162;
inline bool LayerParameter::has_eularmatch_param() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void LayerParameter::set_has_eularmatch_param() {
  _has_bits_[1] |= 0x00200000u;
}
inline void LayerParameter::clear_has_eularmatch_param() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void LayerParameter::clear_eularmatch_param() {
  if (eularmatch_param_ != NULL) eularmatch_param_->::svaf::EularMatchParameter::Clear();
  clear_has_eularmatch_param();
}
inline const ::svaf::EularMatchParameter& LayerParameter::eularmatch_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.eularmatch_param)
  return eularmatch_param_ != NULL ? *eularmatch_param_ : *default_instance_->eularmatch_param_;
}
inline ::svaf::EularMatchParameter* LayerParameter::mutable_eularmatch_param() {
  set_has_eularmatch_param();
  if (eularmatch_param_ == NULL) eularmatch_param_ = new ::svaf::EularMatchParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.eularmatch_param)
  return eularmatch_param_;
}
inline ::svaf::EularMatchParameter* LayerParameter::release_eularmatch_param() {
  clear_has_eularmatch_param();
  ::svaf::EularMatchParameter* temp = eularmatch_param_;
  eularmatch_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_eularmatch_param(::svaf::EularMatchParameter* eularmatch_param) {
  delete eularmatch_param_;
  eularmatch_param_ = eularmatch_param;
  if (eularmatch_param) {
    set_has_eularmatch_param();
  } else {
    clear_has_eularmatch_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.eularmatch_param)
}

// optional .svaf.RansacParameter ransac_param = 163;
inline bool LayerParameter::has_ransac_param() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void LayerParameter::set_has_ransac_param() {
  _has_bits_[1] |= 0x00400000u;
}
inline void LayerParameter::clear_has_ransac_param() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void LayerParameter::clear_ransac_param() {
  if (ransac_param_ != NULL) ransac_param_->::svaf::RansacParameter::Clear();
  clear_has_ransac_param();
}
inline const ::svaf::RansacParameter& LayerParameter::ransac_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.ransac_param)
  return ransac_param_ != NULL ? *ransac_param_ : *default_instance_->ransac_param_;
}
inline ::svaf::RansacParameter* LayerParameter::mutable_ransac_param() {
  set_has_ransac_param();
  if (ransac_param_ == NULL) ransac_param_ = new ::svaf::RansacParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.ransac_param)
  return ransac_param_;
}
inline ::svaf::RansacParameter* LayerParameter::release_ransac_param() {
  clear_has_ransac_param();
  ::svaf::RansacParameter* temp = ransac_param_;
  ransac_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_ransac_param(::svaf::RansacParameter* ransac_param) {
  delete ransac_param_;
  ransac_param_ = ransac_param;
  if (ransac_param) {
    set_has_ransac_param();
  } else {
    clear_has_ransac_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.ransac_param)
}

// optional .svaf.BruteForceMatchParameter bfmatch_param = 164;
inline bool LayerParameter::has_bfmatch_param() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void LayerParameter::set_has_bfmatch_param() {
  _has_bits_[1] |= 0x00800000u;
}
inline void LayerParameter::clear_has_bfmatch_param() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void LayerParameter::clear_bfmatch_param() {
  if (bfmatch_param_ != NULL) bfmatch_param_->::svaf::BruteForceMatchParameter::Clear();
  clear_has_bfmatch_param();
}
inline const ::svaf::BruteForceMatchParameter& LayerParameter::bfmatch_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.bfmatch_param)
  return bfmatch_param_ != NULL ? *bfmatch_param_ : *default_instance_->bfmatch_param_;
}
inline ::svaf::BruteForceMatchParameter* LayerParameter::mutable_bfmatch_param() {
  set_has_bfmatch_param();
  if (bfmatch_param_ == NULL) bfmatch_param_ = new ::svaf::BruteForceMatchParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.bfmatch_param)
  return bfmatch_param_;
}
inline ::svaf::BruteForceMatchParameter* LayerParameter::release_bfmatch_param() {
  clear_has_bfmatch_param();
  ::svaf::BruteForceMatchParameter* temp = bfmatch_param_;
  bfmatch_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_bfmatch_param(::svaf::BruteForceMatchParameter* bfmatch_param) {
  delete bfmatch_param_;
  bfmatch_param_ = bfmatch_param;
  if (bfmatch_param) {
    set_has_bfmatch_param();
  } else {
    clear_has_bfmatch_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.bfmatch_param)
}

// optional .svaf.FLANNMatchParameter flannmatch_param = 165;
inline bool LayerParameter::has_flannmatch_param() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void LayerParameter::set_has_flannmatch_param() {
  _has_bits_[1] |= 0x01000000u;
}
inline void LayerParameter::clear_has_flannmatch_param() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void LayerParameter::clear_flannmatch_param() {
  if (flannmatch_param_ != NULL) flannmatch_param_->::svaf::FLANNMatchParameter::Clear();
  clear_has_flannmatch_param();
}
inline const ::svaf::FLANNMatchParameter& LayerParameter::flannmatch_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.flannmatch_param)
  return flannmatch_param_ != NULL ? *flannmatch_param_ : *default_instance_->flannmatch_param_;
}
inline ::svaf::FLANNMatchParameter* LayerParameter::mutable_flannmatch_param() {
  set_has_flannmatch_param();
  if (flannmatch_param_ == NULL) flannmatch_param_ = new ::svaf::FLANNMatchParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.flannmatch_param)
  return flannmatch_param_;
}
inline ::svaf::FLANNMatchParameter* LayerParameter::release_flannmatch_param() {
  clear_has_flannmatch_param();
  ::svaf::FLANNMatchParameter* temp = flannmatch_param_;
  flannmatch_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_flannmatch_param(::svaf::FLANNMatchParameter* flannmatch_param) {
  delete flannmatch_param_;
  flannmatch_param_ = flannmatch_param;
  if (flannmatch_param) {
    set_has_flannmatch_param();
  } else {
    clear_has_flannmatch_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.flannmatch_param)
}

// optional .svaf.ECMatchParameter ecmatch_param = 168;
inline bool LayerParameter::has_ecmatch_param() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void LayerParameter::set_has_ecmatch_param() {
  _has_bits_[1] |= 0x02000000u;
}
inline void LayerParameter::clear_has_ecmatch_param() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void LayerParameter::clear_ecmatch_param() {
  if (ecmatch_param_ != NULL) ecmatch_param_->::svaf::ECMatchParameter::Clear();
  clear_has_ecmatch_param();
}
inline const ::svaf::ECMatchParameter& LayerParameter::ecmatch_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.ecmatch_param)
  return ecmatch_param_ != NULL ? *ecmatch_param_ : *default_instance_->ecmatch_param_;
}
inline ::svaf::ECMatchParameter* LayerParameter::mutable_ecmatch_param() {
  set_has_ecmatch_param();
  if (ecmatch_param_ == NULL) ecmatch_param_ = new ::svaf::ECMatchParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.ecmatch_param)
  return ecmatch_param_;
}
inline ::svaf::ECMatchParameter* LayerParameter::release_ecmatch_param() {
  clear_has_ecmatch_param();
  ::svaf::ECMatchParameter* temp = ecmatch_param_;
  ecmatch_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_ecmatch_param(::svaf::ECMatchParameter* ecmatch_param) {
  delete ecmatch_param_;
  ecmatch_param_ = ecmatch_param;
  if (ecmatch_param) {
    set_has_ecmatch_param();
  } else {
    clear_has_ecmatch_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.ecmatch_param)
}

// optional .svaf.CVMatchParameter cvmatch_param = 169;
inline bool LayerParameter::has_cvmatch_param() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void LayerParameter::set_has_cvmatch_param() {
  _has_bits_[1] |= 0x04000000u;
}
inline void LayerParameter::clear_has_cvmatch_param() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void LayerParameter::clear_cvmatch_param() {
  if (cvmatch_param_ != NULL) cvmatch_param_->::svaf::CVMatchParameter::Clear();
  clear_has_cvmatch_param();
}
inline const ::svaf::CVMatchParameter& LayerParameter::cvmatch_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.cvmatch_param)
  return cvmatch_param_ != NULL ? *cvmatch_param_ : *default_instance_->cvmatch_param_;
}
inline ::svaf::CVMatchParameter* LayerParameter::mutable_cvmatch_param() {
  set_has_cvmatch_param();
  if (cvmatch_param_ == NULL) cvmatch_param_ = new ::svaf::CVMatchParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.cvmatch_param)
  return cvmatch_param_;
}
inline ::svaf::CVMatchParameter* LayerParameter::release_cvmatch_param() {
  clear_has_cvmatch_param();
  ::svaf::CVMatchParameter* temp = cvmatch_param_;
  cvmatch_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_cvmatch_param(::svaf::CVMatchParameter* cvmatch_param) {
  delete cvmatch_param_;
  cvmatch_param_ = cvmatch_param;
  if (cvmatch_param) {
    set_has_cvmatch_param();
  } else {
    clear_has_cvmatch_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.cvmatch_param)
}

// optional .svaf.StereoMatchParameter stereomatch_param = 170;
inline bool LayerParameter::has_stereomatch_param() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void LayerParameter::set_has_stereomatch_param() {
  _has_bits_[1] |= 0x08000000u;
}
inline void LayerParameter::clear_has_stereomatch_param() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void LayerParameter::clear_stereomatch_param() {
  if (stereomatch_param_ != NULL) stereomatch_param_->::svaf::StereoMatchParameter::Clear();
  clear_has_stereomatch_param();
}
inline const ::svaf::StereoMatchParameter& LayerParameter::stereomatch_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.stereomatch_param)
  return stereomatch_param_ != NULL ? *stereomatch_param_ : *default_instance_->stereomatch_param_;
}
inline ::svaf::StereoMatchParameter* LayerParameter::mutable_stereomatch_param() {
  set_has_stereomatch_param();
  if (stereomatch_param_ == NULL) stereomatch_param_ = new ::svaf::StereoMatchParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.stereomatch_param)
  return stereomatch_param_;
}
inline ::svaf::StereoMatchParameter* LayerParameter::release_stereomatch_param() {
  clear_has_stereomatch_param();
  ::svaf::StereoMatchParameter* temp = stereomatch_param_;
  stereomatch_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_stereomatch_param(::svaf::StereoMatchParameter* stereomatch_param) {
  delete stereomatch_param_;
  stereomatch_param_ = stereomatch_param;
  if (stereomatch_param) {
    set_has_stereomatch_param();
  } else {
    clear_has_stereomatch_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.stereomatch_param)
}

// optional .svaf.SGMMatchParameter sgm_param = 171;
inline bool LayerParameter::has_sgm_param() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void LayerParameter::set_has_sgm_param() {
  _has_bits_[1] |= 0x10000000u;
}
inline void LayerParameter::clear_has_sgm_param() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void LayerParameter::clear_sgm_param() {
  if (sgm_param_ != NULL) sgm_param_->::svaf::SGMMatchParameter::Clear();
  clear_has_sgm_param();
}
inline const ::svaf::SGMMatchParameter& LayerParameter::sgm_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.sgm_param)
  return sgm_param_ != NULL ? *sgm_param_ : *default_instance_->sgm_param_;
}
inline ::svaf::SGMMatchParameter* LayerParameter::mutable_sgm_param() {
  set_has_sgm_param();
  if (sgm_param_ == NULL) sgm_param_ = new ::svaf::SGMMatchParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.sgm_param)
  return sgm_param_;
}
inline ::svaf::SGMMatchParameter* LayerParameter::release_sgm_param() {
  clear_has_sgm_param();
  ::svaf::SGMMatchParameter* temp = sgm_param_;
  sgm_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_sgm_param(::svaf::SGMMatchParameter* sgm_param) {
  delete sgm_param_;
  sgm_param_ = sgm_param;
  if (sgm_param) {
    set_has_sgm_param();
  } else {
    clear_has_sgm_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.sgm_param)
}

// optional .svaf.EADPMatchParameter eadp_param = 172;
inline bool LayerParameter::has_eadp_param() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void LayerParameter::set_has_eadp_param() {
  _has_bits_[1] |= 0x20000000u;
}
inline void LayerParameter::clear_has_eadp_param() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void LayerParameter::clear_eadp_param() {
  if (eadp_param_ != NULL) eadp_param_->::svaf::EADPMatchParameter::Clear();
  clear_has_eadp_param();
}
inline const ::svaf::EADPMatchParameter& LayerParameter::eadp_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.eadp_param)
  return eadp_param_ != NULL ? *eadp_param_ : *default_instance_->eadp_param_;
}
inline ::svaf::EADPMatchParameter* LayerParameter::mutable_eadp_param() {
  set_has_eadp_param();
  if (eadp_param_ == NULL) eadp_param_ = new ::svaf::EADPMatchParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.eadp_param)
  return eadp_param_;
}
inline ::svaf::EADPMatchParameter* LayerParameter::release_eadp_param() {
  clear_has_eadp_param();
  ::svaf::EADPMatchParameter* temp = eadp_param_;
  eadp_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_eadp_param(::svaf::EADPMatchParameter* eadp_param) {
  delete eadp_param_;
  eadp_param_ = eadp_param;
  if (eadp_param) {
    set_has_eadp_param();
  } else {
    clear_has_eadp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.eadp_param)
}

// optional .svaf.OutputParameter output_param = 180;
inline bool LayerParameter::has_output_param() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void LayerParameter::set_has_output_param() {
  _has_bits_[1] |= 0x40000000u;
}
inline void LayerParameter::clear_has_output_param() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void LayerParameter::clear_output_param() {
  if (output_param_ != NULL) output_param_->::svaf::OutputParameter::Clear();
  clear_has_output_param();
}
inline const ::svaf::OutputParameter& LayerParameter::output_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.output_param)
  return output_param_ != NULL ? *output_param_ : *default_instance_->output_param_;
}
inline ::svaf::OutputParameter* LayerParameter::mutable_output_param() {
  set_has_output_param();
  if (output_param_ == NULL) output_param_ = new ::svaf::OutputParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.output_param)
  return output_param_;
}
inline ::svaf::OutputParameter* LayerParameter::release_output_param() {
  clear_has_output_param();
  ::svaf::OutputParameter* temp = output_param_;
  output_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_output_param(::svaf::OutputParameter* output_param) {
  delete output_param_;
  output_param_ = output_param;
  if (output_param) {
    set_has_output_param();
  } else {
    clear_has_output_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.output_param)
}

// optional .svaf.TriangularParameter triang_param = 181;
inline bool LayerParameter::has_triang_param() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void LayerParameter::set_has_triang_param() {
  _has_bits_[1] |= 0x80000000u;
}
inline void LayerParameter::clear_has_triang_param() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void LayerParameter::clear_triang_param() {
  if (triang_param_ != NULL) triang_param_->::svaf::TriangularParameter::Clear();
  clear_has_triang_param();
}
inline const ::svaf::TriangularParameter& LayerParameter::triang_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.triang_param)
  return triang_param_ != NULL ? *triang_param_ : *default_instance_->triang_param_;
}
inline ::svaf::TriangularParameter* LayerParameter::mutable_triang_param() {
  set_has_triang_param();
  if (triang_param_ == NULL) triang_param_ = new ::svaf::TriangularParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.triang_param)
  return triang_param_;
}
inline ::svaf::TriangularParameter* LayerParameter::release_triang_param() {
  clear_has_triang_param();
  ::svaf::TriangularParameter* temp = triang_param_;
  triang_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_triang_param(::svaf::TriangularParameter* triang_param) {
  delete triang_param_;
  triang_param_ = triang_param;
  if (triang_param) {
    set_has_triang_param();
  } else {
    clear_has_triang_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.triang_param)
}

// optional .svaf.MatrixMulParameter mxmul_param = 182;
inline bool LayerParameter::has_mxmul_param() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void LayerParameter::set_has_mxmul_param() {
  _has_bits_[2] |= 0x00000001u;
}
inline void LayerParameter::clear_has_mxmul_param() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void LayerParameter::clear_mxmul_param() {
  if (mxmul_param_ != NULL) mxmul_param_->::svaf::MatrixMulParameter::Clear();
  clear_has_mxmul_param();
}
inline const ::svaf::MatrixMulParameter& LayerParameter::mxmul_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.mxmul_param)
  return mxmul_param_ != NULL ? *mxmul_param_ : *default_instance_->mxmul_param_;
}
inline ::svaf::MatrixMulParameter* LayerParameter::mutable_mxmul_param() {
  set_has_mxmul_param();
  if (mxmul_param_ == NULL) mxmul_param_ = new ::svaf::MatrixMulParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.mxmul_param)
  return mxmul_param_;
}
inline ::svaf::MatrixMulParameter* LayerParameter::release_mxmul_param() {
  clear_has_mxmul_param();
  ::svaf::MatrixMulParameter* temp = mxmul_param_;
  mxmul_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_mxmul_param(::svaf::MatrixMulParameter* mxmul_param) {
  delete mxmul_param_;
  mxmul_param_ = mxmul_param;
  if (mxmul_param) {
    set_has_mxmul_param();
  } else {
    clear_has_mxmul_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.mxmul_param)
}

// optional .svaf.PositionEstimateParameter posest_param = 190;
inline bool LayerParameter::has_posest_param() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void LayerParameter::set_has_posest_param() {
  _has_bits_[2] |= 0x00000002u;
}
inline void LayerParameter::clear_has_posest_param() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void LayerParameter::clear_posest_param() {
  if (posest_param_ != NULL) posest_param_->::svaf::PositionEstimateParameter::Clear();
  clear_has_posest_param();
}
inline const ::svaf::PositionEstimateParameter& LayerParameter::posest_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.posest_param)
  return posest_param_ != NULL ? *posest_param_ : *default_instance_->posest_param_;
}
inline ::svaf::PositionEstimateParameter* LayerParameter::mutable_posest_param() {
  set_has_posest_param();
  if (posest_param_ == NULL) posest_param_ = new ::svaf::PositionEstimateParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.posest_param)
  return posest_param_;
}
inline ::svaf::PositionEstimateParameter* LayerParameter::release_posest_param() {
  clear_has_posest_param();
  ::svaf::PositionEstimateParameter* temp = posest_param_;
  posest_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_posest_param(::svaf::PositionEstimateParameter* posest_param) {
  delete posest_param_;
  posest_param_ = posest_param;
  if (posest_param) {
    set_has_posest_param();
  } else {
    clear_has_posest_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.posest_param)
}

// optional .svaf.CenterPointParameter centerpoint_param = 191;
inline bool LayerParameter::has_centerpoint_param() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void LayerParameter::set_has_centerpoint_param() {
  _has_bits_[2] |= 0x00000004u;
}
inline void LayerParameter::clear_has_centerpoint_param() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void LayerParameter::clear_centerpoint_param() {
  if (centerpoint_param_ != NULL) centerpoint_param_->::svaf::CenterPointParameter::Clear();
  clear_has_centerpoint_param();
}
inline const ::svaf::CenterPointParameter& LayerParameter::centerpoint_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.centerpoint_param)
  return centerpoint_param_ != NULL ? *centerpoint_param_ : *default_instance_->centerpoint_param_;
}
inline ::svaf::CenterPointParameter* LayerParameter::mutable_centerpoint_param() {
  set_has_centerpoint_param();
  if (centerpoint_param_ == NULL) centerpoint_param_ = new ::svaf::CenterPointParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.centerpoint_param)
  return centerpoint_param_;
}
inline ::svaf::CenterPointParameter* LayerParameter::release_centerpoint_param() {
  clear_has_centerpoint_param();
  ::svaf::CenterPointParameter* temp = centerpoint_param_;
  centerpoint_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_centerpoint_param(::svaf::CenterPointParameter* centerpoint_param) {
  delete centerpoint_param_;
  centerpoint_param_ = centerpoint_param;
  if (centerpoint_param) {
    set_has_centerpoint_param();
  } else {
    clear_has_centerpoint_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.centerpoint_param)
}

// optional .svaf.SACIAEstimateParameter sacia_param = 194;
inline bool LayerParameter::has_sacia_param() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void LayerParameter::set_has_sacia_param() {
  _has_bits_[2] |= 0x00000008u;
}
inline void LayerParameter::clear_has_sacia_param() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void LayerParameter::clear_sacia_param() {
  if (sacia_param_ != NULL) sacia_param_->::svaf::SACIAEstimateParameter::Clear();
  clear_has_sacia_param();
}
inline const ::svaf::SACIAEstimateParameter& LayerParameter::sacia_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.sacia_param)
  return sacia_param_ != NULL ? *sacia_param_ : *default_instance_->sacia_param_;
}
inline ::svaf::SACIAEstimateParameter* LayerParameter::mutable_sacia_param() {
  set_has_sacia_param();
  if (sacia_param_ == NULL) sacia_param_ = new ::svaf::SACIAEstimateParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.sacia_param)
  return sacia_param_;
}
inline ::svaf::SACIAEstimateParameter* LayerParameter::release_sacia_param() {
  clear_has_sacia_param();
  ::svaf::SACIAEstimateParameter* temp = sacia_param_;
  sacia_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_sacia_param(::svaf::SACIAEstimateParameter* sacia_param) {
  delete sacia_param_;
  sacia_param_ = sacia_param;
  if (sacia_param) {
    set_has_sacia_param();
  } else {
    clear_has_sacia_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.sacia_param)
}

// optional .svaf.IAICPEstimateParameter iaicp_param = 195;
inline bool LayerParameter::has_iaicp_param() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void LayerParameter::set_has_iaicp_param() {
  _has_bits_[2] |= 0x00000010u;
}
inline void LayerParameter::clear_has_iaicp_param() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void LayerParameter::clear_iaicp_param() {
  if (iaicp_param_ != NULL) iaicp_param_->::svaf::IAICPEstimateParameter::Clear();
  clear_has_iaicp_param();
}
inline const ::svaf::IAICPEstimateParameter& LayerParameter::iaicp_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.iaicp_param)
  return iaicp_param_ != NULL ? *iaicp_param_ : *default_instance_->iaicp_param_;
}
inline ::svaf::IAICPEstimateParameter* LayerParameter::mutable_iaicp_param() {
  set_has_iaicp_param();
  if (iaicp_param_ == NULL) iaicp_param_ = new ::svaf::IAICPEstimateParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.iaicp_param)
  return iaicp_param_;
}
inline ::svaf::IAICPEstimateParameter* LayerParameter::release_iaicp_param() {
  clear_has_iaicp_param();
  ::svaf::IAICPEstimateParameter* temp = iaicp_param_;
  iaicp_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_iaicp_param(::svaf::IAICPEstimateParameter* iaicp_param) {
  delete iaicp_param_;
  iaicp_param_ = iaicp_param;
  if (iaicp_param) {
    set_has_iaicp_param();
  } else {
    clear_has_iaicp_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.iaicp_param)
}

// optional .svaf.IANDTEstimateParameter iandt_param = 196;
inline bool LayerParameter::has_iandt_param() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void LayerParameter::set_has_iandt_param() {
  _has_bits_[2] |= 0x00000020u;
}
inline void LayerParameter::clear_has_iandt_param() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void LayerParameter::clear_iandt_param() {
  if (iandt_param_ != NULL) iandt_param_->::svaf::IANDTEstimateParameter::Clear();
  clear_has_iandt_param();
}
inline const ::svaf::IANDTEstimateParameter& LayerParameter::iandt_param() const {
  // @@protoc_insertion_point(field_get:svaf.LayerParameter.iandt_param)
  return iandt_param_ != NULL ? *iandt_param_ : *default_instance_->iandt_param_;
}
inline ::svaf::IANDTEstimateParameter* LayerParameter::mutable_iandt_param() {
  set_has_iandt_param();
  if (iandt_param_ == NULL) iandt_param_ = new ::svaf::IANDTEstimateParameter;
  // @@protoc_insertion_point(field_mutable:svaf.LayerParameter.iandt_param)
  return iandt_param_;
}
inline ::svaf::IANDTEstimateParameter* LayerParameter::release_iandt_param() {
  clear_has_iandt_param();
  ::svaf::IANDTEstimateParameter* temp = iandt_param_;
  iandt_param_ = NULL;
  return temp;
}
inline void LayerParameter::set_allocated_iandt_param(::svaf::IANDTEstimateParameter* iandt_param) {
  delete iandt_param_;
  iandt_param_ = iandt_param;
  if (iandt_param) {
    set_has_iandt_param();
  } else {
    clear_has_iandt_param();
  }
  // @@protoc_insertion_point(field_set_allocated:svaf.LayerParameter.iandt_param)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace svaf

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::svaf::MilTrackParameter_InitType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::svaf::MilTrackParameter_InitType>() {
  return ::svaf::MilTrackParameter_InitType_descriptor();
}
template <> struct is_proto_enum< ::svaf::MilTrackParameter_TrackType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::svaf::MilTrackParameter_TrackType>() {
  return ::svaf::MilTrackParameter_TrackType_descriptor();
}
template <> struct is_proto_enum< ::svaf::FastParamCP_FastType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::svaf::FastParamCP_FastType>() {
  return ::svaf::FastParamCP_FastType_descriptor();
}
template <> struct is_proto_enum< ::svaf::ORBParamCP_OBRScoreType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::svaf::ORBParamCP_OBRScoreType>() {
  return ::svaf::ORBParamCP_OBRScoreType_descriptor();
}
template <> struct is_proto_enum< ::svaf::CVPointParameter_PointType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::svaf::CVPointParameter_PointType>() {
  return ::svaf::CVPointParameter_PointType_descriptor();
}
template <> struct is_proto_enum< ::svaf::CVDescriptorParameter_DespType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::svaf::CVDescriptorParameter_DespType>() {
  return ::svaf::CVDescriptorParameter_DespType_descriptor();
}
template <> struct is_proto_enum< ::svaf::CVMatchParameter_MatchType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::svaf::CVMatchParameter_MatchType>() {
  return ::svaf::CVMatchParameter_MatchType_descriptor();
}
template <> struct is_proto_enum< ::svaf::LayerParameter_LayerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::svaf::LayerParameter_LayerType>() {
  return ::svaf::LayerParameter_LayerType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_svaf_2eproto__INCLUDED
